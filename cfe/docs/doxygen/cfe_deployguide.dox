/**  
  \page cfedeployguide cFE Deployment Guide

  The purpose of this document is to provide guidelines and conventions 
  for the deployment of the cFE to a desired platform or platforms.  In 
  addition, instructions are included for creating a ground database and 
  pages in order to provide a user interface.  Note that the ground database 
  is specific to the ASIST ground system.

  <UL>
     <LI> \subpage cfedeploy_2
     <UL>
        <LI> \subpage cfedeploy_2_1 <BR>
        <UL>
           <LI> \ref cfedeploy_2_1_1
           <LI> \ref cfedeploy_2_1_2
        </UL>
        <LI> \subpage cfedeploy_2_2 <BR>
        <LI> \subpage cfedeploy_2_3 <BR>
        <LI> \subpage cfedeploy_2_4 <BR>
        <UL>
           <LI> \ref cfedeploy_2_4_1
           <LI> \ref cfedeploy_2_4_2
           <LI> \ref cfedeploy_2_4_3
        </UL>  
        <LI> \subpage cfedeploy_2_5 <BR>
        <LI> \subpage cfedeploy_2_6 <BR>
        <UL>
           <LI> \ref cfedeploy_2_6_1
           <LI> \ref cfedeploy_2_6_2
           <LI> \ref cfedeploy_2_6_3
           <LI> \ref cfedeploy_2_6_4
           <LI> \ref cfedeploy_2_6_5
        </UL>
     </UL>
     <LI> \subpage cfedeploy_3
     <UL>
        <LI> \ref cfedeploy_3_1
        <LI> \ref cfedeploy_3_3
        <LI> \ref cfedeploy_3_4
        <LI> \ref cfedeploy_3_5
     </UL>
     <LI> \subpage cfedeploy_4
     <LI> \subpage cfedeploy_6
     <UL>
        <LI> \ref cfedeploy_6_1
        <LI> \ref cfedeploy_6_2
        <LI> \ref cfedeploy_6_3
        <LI> \ref cfedeploy_6_4
     </UL>
  </UL>
**/

/**
  \page cfedeploy_2 How to Configure, Build, and Run the cFE

  The cFE development environment has been designed to isolate the reusable 
  cFE source code from the cFE applications, configuration parameters, and 
  build products.  The following sections provide instructions on how to: <BR>
  <UL>
     <LI> \subpage cfedeploy_2_1 <BR>
     <UL>
        <LI> \ref cfedeploy_2_1_1
        <LI> \ref cfedeploy_2_1_2
     </UL>
     <LI> \subpage cfedeploy_2_2 <BR>
     <LI> \subpage cfedeploy_2_3 <BR>
     <LI> \subpage cfedeploy_2_4 <BR>
     <UL>
        <LI> \ref cfedeploy_2_4_1
        <LI> \ref cfedeploy_2_4_2
        <LI> \ref cfedeploy_2_4_3
     </UL>  
     <LI> \subpage cfedeploy_2_5 <BR>
     <LI> \subpage cfedeploy_2_6 <BR>
     <UL>
        <LI> \ref cfedeploy_2_6_1
        <LI> \ref cfedeploy_2_6_2
        <LI> \ref cfedeploy_2_6_3
        <LI> \ref cfedeploy_2_6_4
        <LI> \ref cfedeploy_2_6_5
     </UL>
  </UL>

  Next: \ref cfedeploy_3 <BR>
  Up To: \ref cfedeployguide
**/

/**
  \page cfedeploy_2_1 Setup the Build Environment

  This section details the steps needed to setup the cFE source distribution 
  and prepare the host development environment to build the cFE.

  <UL>
     <LI> \subpage cfedeploy_2_1_1
     <LI> \subpage cfedeploy_2_1_2
  </UL>

  \image html directorytree.jpg "Suggested cFE Directory Structure"
  
  Next: \ref cfedeploy_2_2 <BR>
  Up To: \ref cfedeploy_2
**/

/**
  \page cfedeploy_2_1_1 Setup the cFE Source Distribution

  Get a copy of the cFE source distribution directory on your build machine. 
  The cFE source distribution has the following directories:

  <CENTER> <B> cFE source distribution directories </B> </CENTER>
  <TABLE WIDTH="100%">
  <TR>
     <TD> <B> Directory </B>
     <TD> <B> Description </B>
  <TR>
     <TD> cFE-5.2
     <TD> The top level cFE source distribution directory. cFE version 5.2 
          is being used as an example.
  <TR>
     <TD> cFE-5.2/fsw
     <TD> The fsw directory contains all cFE source and build files.
  <TR>        
     <TD> cFE-5.2/fsw/cfe-core
     <TD> The cfe-core directory contains the cFE core source code, OS 
          abstraction layer, and all architecture ports and BSPs. This 
          directory can be put anywhere in the host system as long as 
          the CFE_CORE environment variable is properly setup 
          ( see \ref cfedeploy_2_1_2 )
  <TR>        
     <TD> cFE-5.2/fsw/cfe-apps
     <TD> The cfe-apps directory contains a set of reference and test 
          applications for the cFE. This directory is optional, and can 
          also be put anywhere on the host system.
  <TR>        
     <TD> cFE-5.2/fsw/build
     <TD> The build directory contains the cFE configuration, cFE 
          applications, and all build build products for one or more CPUs.
  <TR>              
     <TD> cFE-5.2/docs
     <TD> The docs directory contains the cFE documentation.
  <TR>    
     <TD> cFE-5.2/test-and-ground
     <TD> The test-and-ground directory contains the ground system and 
          build test files.
  <TR>    
     <TD> cFE-5.2/tools
     <TD> The tools directory contains miscellaneous development support 
          tools such as the UTF and table tools.
  </TABLE>

  The cFE directory can go just about anywhere on a host development system 
  and there is no requirement to keep the cfe-core, cfe-apps, and build 
  directories together.

  <CENTER> <B> Example directory structure locations </B> </CENTER>
  <TABLE WIDTH="100%">
  <TR>
     <TD WIDTH="15%"> <B> Host Operating System </B>
     <TD WIDTH="35%"> <B> Example Directory </B>
     <TD WIDTH="50%"> <B> Notes </B>
  <TR>
     <TD> Windows/Cygwin
     <TD> /home/cfeuser/cFE-5.2
     <TD> 1) Building in Cygwin requires the "bash" command shell. Cygwin 
             provides a virtual unix style directory structure, so 
             <tt>"/home/cfeuser/cFE-5.2"</tt> might translate to 
             <tt>C:\\cygwin\\home\\cfeuser\\cFE-5.2.</tt> <BR>
          2) Putting the cFE directory under a directory with spaces is 
             not recommended. i.e. ( "My Documents" )
  <TR>
     <TD> Windows/vxWorks 6 Development Shell
     <TD> C:\\cfeproject\\cFE-5.2
     <TD> Building on Windows with the vxWorks 6.x development tools 
          requires using the "vxWorks Development Shell". The system will 
          not build on a standard Cygwin Shell, or a windows DOS prompt.
  <TR>
     <TD> Linux
     <TD> /home/cfeuser/cFE-5.2
     <TD> 
  <TR>
     <TD> Mac OS X
     <TD> /Users/cfeuser/cFE-5.2
     <TD> 
  </TABLE>

  Next: \ref cfedeploy_2_1_2 <BR>
  Up To: \ref cfedeploy_2_1
**/

/**
  \page cfedeploy_2_1_2 Create System Environment Variables
  
  Because the cfe-core and cfe-apps directories can be located almost 
  anywhere in the host directory structure, the following environment 
  variables must be created on the host development system:

  <CENTER> <B> Environment Variables Needed by the cFE </B> </CENTER>
  <TABLE WIDTH="100%">
  <TR>
     <TD WIDTH="15%"> <B> Environment Variable </B>
     <TD WIDTH="35%"> <B> Value ( in Linux as an example ) </B>
     <TD WIDTH="50%"> <B> Notes </B>
  <TR>
     <TD> CFE_CORE_SRC
     <TD> /home/cfeuser/cFE-5.2/fsw/cfe-core/src
     <TD> Set this variable to the location of the cfe-core source directory.
  <TR>
     <TD> CFE_ARC_SRC
     <TD> /home/cfeuser/cfe-5.2/fsw/cfe-core/arch
     <TD> Note that the arch directory or one branch of it can be moved anywhere
          as long as this environment variable is set.
  <TR>
     <TD> OSAL_SRC
     <TD> /home/cfeuser/cfe-5.2/fsw/cfe-core/os
     <TD> The location of the OS Abstraction project. This directory can be moved 
          anywhere, and it will eventually be removed from the cFE source code and 
          tracked as a separate project.
  <TR>
     <TD> CFE_MISSION_INC
     <TD> /home/cfeuser/cfe-5.2/build/inc
     <TD> The location of the mission include directory. This directory, along 
          with the build directories can be located anywhere.
  <TR>
     <TD> CFE_APP_SRC
     <TD> /home/cfeuser/cFE-5.2/fsw/cfe-apps
     <TD> Set this variable to the location of the cfe-apps directory. 
          This directory is optional, it provides a shared application directory 
          for building multiple CPUs.
  </TABLE>
  
  To make building the cFE easier, a shell script is provided that can set the 
  cFE environment variables relative to the cFE source distribution tree. The script 
  is called “setvars.sh” and it is located in the ‘fsw’ directory of the cFE source 
  distribution. It can be executed on Linux, OS X, and cygwin ( bash shell, not the 
  DOS Command prompt ). When it is executed, it will set the paths using the relative 
  location of the cFE source distribution.
  
  Example of using the setvars.sh script ( the cFE source distribution is cFE-5.2.tar )

\verbatim
$ cd /home/cfeuser
$ tar –xf cFE-5.2.tar
$ cd cFE-5.2
$ cd fsw
$ . ./setvars.sh
\endverbatim

Now the environment variables are set. Note the use of the first ‘.’ and space before 
the ‘./setvars.sh’. That is necessary to setup the environment variables properly.
  
  <CENTER> <B> Example Environment Variables for Different Development 
               Hosts </B> </CENTER>
  <TABLE WIDTH="100%">
  <TR>
     <TD WIDTH="15%"> <B> Host Operating System </B>
     <TD WIDTH="35%"> <B> Example Environment Variables </B>
     <TD WIDTH="50%"> <B> Notes </B>
  <TR>
     <TD> Windows/Cygwin
     <TD> $ export CFE_CORE_SRC=/home/cfeuser/cFE-5.2/fsw/cfe-core/src <BR>
          $ export CFE_ARCH_SRC=/home/cfeuser/cFE-5.2/fsw/cfe-core/arch <BR>
          $ export OSAL_SRC=/home/cfeuser/cFE-5.2/fsw/cfe-core/os <BR>
          $ export CFE_MISSION_INC=/home/cfeuser/cFE-5.2/fsw/build/inc <BR>
          $ export CFE_APP_SRC=/home/cfeuser/cFE-5.2/fsw/cfe-apps
     <TD> 1. The Windows/Cygwin environment variables are "Bash" shell 
          variables, not Windows environment variables.
  <TR>
     <TD> Windows/vxWorks 6 Development Shell
     <TD> % set CFE_CORE_SRC=C:/cfeproject/cFE-5.2/fsw/cfe-core/src <BR>
          % set CFE_ARCH_SRC=C:/cfeproject/cFE-5.2/fsw/cfe-core/arch <BR>
          % set OSAL_SRC=C:/cfeproject/cFE-5.2/fsw/cfe-core/os <BR>
          % set CFE_MISSION_INC=C:/cfeproject/cFE-5.2/build/inc <BR>
          % set CFE_APP_SRC=C:/cfeproject/cFE-5.2/fsw/cfe-apps
     <TD> 1. These environment variables can be set in the Windows 
          control panel under system/environment variables. <BR>
          2. Note the forward slash directory separators in the DOS 
          environment variables. Because the vxWorks tools are half 
          DOS and half-Unix, they don't seem to like the DOS style 
          backslash.
  <TR>
     <TD> Linux
     <TD> $ export CFE_CORE_SRC=/home/cfeuser/cFE-5.2/fsw/cfe-core/src <BR>
          $ export CFE_ARCH_SRC=/home/cfeuser/cFE-5.2/fsw/cfe-core/arch <BR>
          $ export OSAL_SRC=/home/cfeuser/cFE-5.2/fsw/cfe-core/os <BR>
          $ export CFE_MISSION_INC=/home/cfeuser/cFE-5.2/fsw/build/inc <BR>
          $ export CFE_APP_SRC=/home/cfeuser/cFE-5.2/fsw/cfe-apps
     <TD> These settings can be set in the user's .bash_profile
  <TR>
     <TD> Mac OS X
     <TD> $ export CFE_CORE_SRC=/Users/cfeuser/cFE-5.2/fsw/cfe-core/src <BR>
          $ export CFE_ARCH_SRC=/Users/cfeuser/cFE-5.2/fsw/cfe-core/arch <BR>
          $ export OSAL_SRC=/Users/cfeuser/cFE-5.2/fsw/cfe-core/os <BR>
          $ export CFE_MISSION_INC=/Users/cfeuser/cFE-5.2/fsw/build/inc <BR>
          $ export CFE_APP_SRC=/Users/cfeuser/cFE-5.2/fsw/cfe-apps
     <TD> These settings can be set in the user's .bash_profile
  </TABLE> 

  Next: \ref cfedeploy_2_2 <BR>
  Prev: \ref cfedeploy_2_1_1 <BR>
  Up To: \ref cfedeploy_2_1
**/

/**
  \page cfedeploy_2_2 Configure the Build Directory for a Mission

  The build directory is where the cFE is configured and compiled 
  for a mission. The build directory is designed to hold the cFE 
  configuration for all of the processors on a mission. Each processor 
  can have its own unique architecture and cFE configuration. <BR>
  
  \image html builddirtree.jpg "Suggested Mission Build Directory Tree"

  The cFE source distribution comes with a reference build directory. 
  The reference build directory contains four sub-directories: cpu1, 
  cpu2, cpu3, and inc. These three cpu directories are setup to run 
  vxWorks6.4 on an MCP750 PPC evaluation board. <BR>

  The "cpu" directories can be renamed, deleted, or duplicated to match 
  the number of processors on a mission. For example, if a mission has 
  a RAD750 processor, a Coldfire processor, and a PC/Linux platform for 
  running the cFE in a desktop environment, the CPU directories can be 
  renamed to "rad750", "coldfire", and "desktop". The 'inc' directory 
  contains header files that are common to all platforms in the mission. 
  The 'inc' directory is most useful for projects with two or more CPUs 
  running the cFE.

  Next: \ref cfedeploy_2_3 <BR>
  Prev: \ref cfedeploy_2_1 <BR>
  Up To: \ref cfedeploy_2
**/

/**
  \page cfedeploy_2_3 Configure the cFE Core for Each CPU Directory

  In order to build the cFE for each of the <tt>build/cpu[x]</tt> directories, 
  the cFE core configuration files must be properly configured. <BR>
   
  <CENTER> <H4> Define the CPU, Operating System, and Processor Board </H4> </CENTER>
  
  In each <tt>build/cpu[x]/cfe</tt> directory, edit the <B> 'cfe-config.mak' </B> file 
  (<tt>fsw/build/cpu[x]/cfe/cfe-config.mak</tt>) and set the options for your 
  target. The default settings in the cfe-config.mak are for running vxWorks6.4 
  on an MCP750 PowerPC board. <BR>

  <CENTER> <B> Prolog.mak Settings </B> </CENTER>
  <TABLE WIDTH="100%">
  <TR>
     <TD WIDTH="15%"> <B> Prolog.mak variable </B>
     <TD WIDTH="30%"> <B> Valid selections    </B>
     <TD WIDTH="50%"> <B> Notes               </B>
  <TR>
     <TD> HWARCH
     <TD> x86, ppc, coldfire
     <TD>
  <TR>
     <TD> PLATFORM
     <TD> mcp750, rad750, pc, mac, m5235bcc, sdnproto
     <TD> The m5235bcc abd sdoproto targets are not complete
  <TR>
     <TD> OS
     <TD> vxworks6, rtems, osx, linux
     <TD> VxWorks 5.5 is no longer supported
  <TR>
     <TD> BSP
     <TD> vxworks6.4, linux, osx, cygwin
     <TD>
  </TABLE>	
  <BR>
  Note that not all combinations are valid.  See the 
  \link cfedeploy_3 Platform Specific Section \endlink for more 
  information on each supported cFE target.
  <BR> <BR>
  <CENTER> <H4> Configure the cFE Core Parameter Files </H4> </CENTER>
  There are dozens of cFE configuration parameters that change many  
  aspects of the cFE core. A description of the parameters can be found
  in the files listed below.  Or, if the user would prefer to examine
  the configuration parameters by service type, they can be viewed using
  the following links: <BR>
  
  <UL>
     <LI> \link cfeescfg Executive Services \endlink
     <LI> \link cfeevscfg Event Services \endlink
     <LI> \link cfesbcfg Software Bus \endlink      
     <LI> \link cfetblcfg Table Services \endlink     
     <LI> \link cfetimecfg Time Services \endlink    
     <LI> \link cfeplatformcfg cFE Platform Configuration \endlink
     <LI> \link cfemissioncfg cFE Mission Configuration \endlink 
  </UL>

  <CENTER> <B> cFE core configuration files </B> </CENTER>
  <TABLE WIDTH="100%">
  <TR>
     <TD WIDTH="25%"> <B> File </B>
     <TD WIDTH="75%"> <B> Description </B>
  <TR>
     <TD> \link cfe_platform_cfg.h build/cpu[x]/inc/cfe_platform_cfg.h \endlink
     <TD> Configures all options of the cFE core. See the configuration
          guide for details. 
  <TR>
     <TD> \link osconfig.h build/cpu[x]/inc/osconfig.h \endlink
     <TD> Configures the OS Abstraction Layer for this CPU. See the OS AL  
          documentation and the header file for parameters.
  <TR>
     <TD> \link cfe_msgids.h build/cpu[x]/inc/cfe_msgids.h \endlink
     <TD> Software bus message IDs for the cFE Core applications. Make sure 
          these do not conflict with the application message IDs.
  <TR>
     <TD> build/inc/cfe_mission_cfg.h
     <TD> Configures mission wide cFE configuration parameters.
  </TABLE>

  Next: \ref cfedeploy_2_4 <BR>
  Prev: \ref cfedeploy_2_2 <BR>
  Up To: \ref cfedeploy_2
**/

/**
  \page cfedeploy_2_4 Configure a Set of cFE Applications for Each CPU
  
  \image html appdirtree.jpg "Suggested Application Directory Tree"
  
  Once the cFE core is configured and ready to build, the cFE applications 
  can be configured for each CPU directory in the build directory. Each CPU 
  directory can have a different set of applications and configurations. The 
  application source code can come from the cfe-apps directory, or the 
  applications can be contained completely within the CPU directory. The cFE 
  source distribution has a set of cFE applications in the cfe-apps directory 
  and a set of application directories and makefiles in each CPU directory 
  (cpu1, cpu2, and cpu3).
  
  <UL>
     <LI> \subpage cfedeploy_2_4_1
     <LI> \subpage cfedeploy_2_4_2
     <LI> \subpage cfedeploy_2_4_3
  </UL>  

  Next: \ref cfedeploy_2_5 <BR>
  Prev: \ref cfedeploy_2_3 <BR>
  Up To: \ref cfedeploy_2
**/

/**
  \page cfedeploy_2_4_1 Configure the Application Directories in each CPU Directory
   
  For each CPU in the build directory (examples: build/coldfire, build/cpu1, 
  build/rad750) determine the set of applications to build. For each application, 
  create (or copy) a sub-directory and a makefile. If the application does not have 
  a corresponding application in the cfe-apps directory, the source will also have 
  to go here.

  <CENTER> <H4> Sample cFE Application Directories for a CPU Directory Named "comm" </H4> </CENTER>
  
  <TABLE WIDTH="100%">
  <TR>
     <TD WIDTH="35%"> <B> File </B>
     <TD WIDTH="65%"> <B> Description </B>
  <TR>
     <TD> build/comm/ci
     <TD> Directory for the CI app.
  <TR>
     <TD> build/comm/ci/Makefile
     <TD> Makefile for the CI app. Because the CI app source is in the 
          cfe-apps directory, there is no need to include it here. The 
          makefile will find it using the CFE_APP_SRC environment variable. 
          The CI source could be copied here in order to customize it 
          for this CPU.
  <TR>
     <TD> build/comm/commapp1
     <TD> Directory for a fictional "Comm App 1" cFE application.
  <TR>
     <TD> build/comm/commapp1/Makefile
     <TD> Makefile for Comm App 1
  <TR>
     <TD> build/comm/commapp1/commapp1.c
     <TD> Source file for Comm App 1
  <TR>
     <TD> build/comm./commapp1/commapp1.h
     <TD> Header file for Comm App 1
  </TABLE>

  The Application makefiles have a specific format, so it is best to 
  copy one of the application makefiles from the cfe-apps directory, 
  such as cfe-apps/ci/Makefile.

  Next: \ref cfedeploy_2_4_2 <BR>
  Up To: \ref cfedeploy_2_4
**/

/**
  \page cfedeploy_2_4_2 Configure the makefile in each CPU Directory
   
  The next step is to define the list of applications to compile when 
  the high level 'make' command is executed. This list is located in 
  the top level Makefile, which resides in the build/cpu[x] directory. 
  Be sure to update all of the sections for building, cleaning, 
  installing and updating dependencies.

  <CENTER> <H4> Sample CPU top level makefile </H4> </CENTER>

  \verbatim  
  ##############################################################################
  ## Build rules

  cfecore::
          $(MAKE) -C cfe

  apps::
          $(MAKE) -C tst_lib
          $(MAKE) -C ci
          $(MAKE) -C to
          $(MAKE) -C sch
          $(MAKE) -C template

  cleancore ::
          $(MAKE) -C cfe clean

  cleanapps ::
          $(MAKE) -C tst_lib clean
          $(MAKE) -C ci clean
          $(MAKE) -C to clean
          $(MAKE) -C sch clean
          $(MAKE) -C template clean
  \endverbatim

  Next: \ref cfedeploy_2_4_3 <BR>
  Prev: \ref cfedeploy_2_4_1 <BR>
  Up To: \ref cfedeploy_2_4
**/

/**
  \page cfedeploy_2_4_3 Configure the mission and CPU specific cFE Application Parameter files 
   
  In the cFE source distribution, there are a few cFE Application configuration 
  files. These files exist only as an example of how mission and CPU specific 
  settings can be set for a suite of cFE Applications. There is no requirement 
  by the cFE to have application configuration files. 

  <CENTER> <H4> cFE Application configuration files </H4> </CENTER>
  <TABLE WIDTH="100%">
  <TR> 
     <TD WIDTH="35%"> <B> File </B>
     <TD WIDTH="65%"> <B> Description </B>
  <TR>
     <TD> \link app_msgids.h build/cpu[x]/inc/app_msgids.h \endlink
     <TD> Common cFE Application Message IDs for a CPU.
  <TR>
     <TD> \link app_perfids.h build/cpu[x]/inc/app_perfids.h \endlink
     <TD> Common cFE Application Performance IDs for a CPU
  <TR>
     <TD> \link app_mission_cfg.h build/inc/app_mission_cfg.h \endlink
     <TD> Mission-wide cFE Application parameters.
  </TABLE>

  Next: \ref cfedeploy_2_5 <BR>
  Prev: \ref cfedeploy_2_4_2 <BR>
  Up To: \ref cfedeploy_2_4
**/

/**
  \page cfedeploy_2_5 Build the cFE Core and cFE Applications

  Once the cFE Core and cFE Applications are set up in a build/CPU 
  directory, everything can be compiled. The cFE Core or any of the 
  cFE Applications can be built from individual make files, or they 
  can be built from the top-level makefile in the build/cpu[x] 
  directory.

  <CENTER> <H4> Build Commands </H4> </CENTER>
  <TABLE WIDTH="100%">
  <TR>
     <TD WIDTH="35%"> <B> Shell command </B>
     <TD WIDTH="65%"> <B> Description </B>
  <TR>
     <TD> $ cd build/comm
     <TD> Change to the build CPU directory for our example "comm" CPU.
  <TR>
     <TD> $ make
     <TD> Build the cFE Core, all cFE apps, and tables
  <TR>
     <TD> $ make clean
     <TD> Clean the cFE Core, all cFE apps, and tables
  <TR>
     <TD> $ make install
     <TD> Copy the cFE Core executable, and cFE apps into the "exe" directory.
  <TR>
     <TD> &nbsp;
     <TD> &nbsp;
  <TR>
     <TD> $ make cfecore
     <TD> Build the cFE Core only.
  <TR>
     <TD> $ make apps
     <TD> Build the cFE Apps only.
  <TR>
     <TD> $ make cleancore
     <TD> Clean the cFE Core only.
  <TR>
     <TD> $ make installcore
     <TD> Install the cFE Core only.
  <TR>
     <TD> $ make installapps
     <TD> Install the cFE Apps only.
  <TR>
     <TD> $ make depend
     <TD> Recalculate the dependencies on the cFE Apps
  <TR>
     <TD> &nbsp;
     <TD> &nbsp;
  <TR>
     <TD> $ cd cfe
     <TD> Change to the build/comm/cfe directory
  <TR>
     <TD> $ make
     <TD> Run the individual cFE Core makefile.
  <TR>
     <TD> $ make depend
     <TD> Generate dependencies for the cFE Core
  <TR>
     <TD> &nbsp;
     <TD> &nbsp;
  <TR>
     <TD> $ cd ../ci
     <TD> Change to the build/comm/ci directory.
  <TR>
     <TD> $ make
     <TD> Run the individual CI App makefile.
  </TABLE>

  Once the cFE core is built and installed, the cFE core executable file will
  be in the build/cpu[x]/exe directory. The filename of the cFE core 
  executable is dependent on the OS it is built for. 

  <CENTER> <H4> cFE core executable name </H4> </CENTER>
  <TABLE WIDTH="100%">
  <TR>
     <TD WIDTH="35%"> <B> Target Operating System </B>
     <TD WIDTH="25%"> <B> cFE Core name </B>
     <TD WIDTH="40%"> <B> Notes </B>
  <TR>
     <TD> vxWorks 6.x static link
     <TD> vxWorks.st
     <TD> The old MCP750 platform included the kernel and cFE core.
  <TR>
     <TD> vxWorks 6.x dynamic link
     <TD> cfe-core.o
     <TD> The RAD750 and MCP750 platforms use a dynamically loaded object without the 
          kernel.
  <TR>
     <TD> Linux
     <TD> core-linux.bin
     <TD>
  <TR>
     <TD> Mac OS X
     <TD> core-osx.bin
     <TD>
  <TR>
     <TD> Windows/Cygwin
     <TD> core-cygwin.bin
     <TD>
  <TR>
     <TD> Rtems/Coldfire
     <TD> cfe-core.bin
     <TD> Newer versions of the Coldfire port will use a dynamically loaded cFE core.
  </TABLE>	

  Next: \ref cfedeploy_2_6 <BR>
  Prev: \ref cfedeploy_2_4 <BR>
  Up To: \ref cfedeploy_2
**/

/**
  \page cfedeploy_2_6 Load and Run the cFE Core and cFE Applications 

  There are a handful of steps to running the cFE Core and cFE Applications 
  on a given platform:
  
  <UL>
     <LI> \subpage cfedeploy_2_6_1
     <LI> \subpage cfedeploy_2_6_2
     <LI> \subpage cfedeploy_2_6_3
     <LI> \subpage cfedeploy_2_6_4
     <LI> \subpage cfedeploy_2_6_5
  </UL>
  
  Next: \ref cfedeploy_3
  Up To: \ref cfedeploy_2
**/

/**
  \page cfedeploy_2_6_1 Load the cFE Core Executable on the Target 

  On desktop targets the cFE Core can be run right from the exe directory 
  where it was built/installed. On embedded targets, the cFE Core has to 
  be loaded into a remote file system, or booted over the network. On the 
  RAD750, the cFE Core must be loaded into the EEPROM disk after the vxWorks 
  kernel is booted. See the \link cfedeploy_3 target specific sections \endlink
  for details on each platform.
  
  Next: \ref cfedeploy_2_6_2 <BR>
  Up To: \ref cfedeploy_2_6
**/

/**
  \page cfedeploy_2_6_2 Setup the Target File Systems 

  The cFE requires a Non-Volatile disk volume (EEPROM, Flash, or Hard disk) and 
  a Volatile (RAM) disk to operate. The Non-Volatile disk is used to store the 
  cFE Application Startup file, cFE Applications, and Table images. The Volatile 
  disk is used to store runtime logs, data files, and new cFE Applications and 
  Tables. Because the cFE runs on many different platforms, it must be able to 
  deal with different file system types and different paths. The cFE accomplishes 
  this by using a file system abstraction. The abstracted cFE file system is 
  similar to a UNIX file system, where the root directory starts with "/" and 
  all disks are mounted on directory trees. For example:
  <UL>
     <LI> /ram0/apps/ -> RAM disk 0, apps subdirectory
     <LI> /ram1/data/ -> RAM disk 1, data subdirectory
     <LI> /hd0/tables/ -> Hard Disk 0, tables subdirectory
  </UL>
  
  Using this abstraction, a file "datafile1.dat" on RAM disk 1 might be accessed 
  from the cFE by using the path "/ram1/data/datafile1.dat". Using the host 
  vxWorks tools, the path to the same file would be: "RAM:0/data/myfile.dat". 
  If the cFE is running on a Linux development workstation, the file might be 
  located at: "/tmp/ramdev1/data/myfile.dat". The important part is that the 
  cFE can access the files using a generic path, allowing the cFE software to 
  remain portable.

  There are a few ways to map these host file systems to cFE file systems:
  <UL>
     <LI> <B>Map existing target file systems to a cFE path.</B> This is one of 
          the most common ways to map the Non-Volatile disk to the cFE. The cFE 
          rarely creates the non-volatile disk, instead it relies on the target OS 
          to create/mount this file system and it simply is given a mapping to the 
          disk to allow the cFE to access it.
     <LI> <B>Create EEPROM/Flash/ATA File systems.</B> The cFE through the OS 
          Abstraction Layer has the ability on some targets to format or initialize 
          a EEPROM or ATA disk device. This is less commonly used.
     <LI> <B> Create RAM File Systems.</B> The cFE can create RAM disks on 
          the vxWorks targets. The cFE will create or re-initialize the RAM 
          disk for the vxWorks targets.

  The following table shows examples of these file system mappings on various hosts:

  <CENTER> <H4> cFE File system mapping </H4> </CENTER>
  <TABLE WIDTH="100%">
  <TR>
     <TD> <B> Target Operating system </B>
     <TD> <B> cFE File system path </B>
     <TD> <B> Target OS File system path </B>
     <TD> <B> Notes </B>
  <TR>
     <TD> vxWorks 6.4
     <TD> /ram
     <TD> RAM:0/
     <TD> Most vxWorks targets
  <TR>
     <TD> &nbsp;
     <TD> /cf
     <TD> CF:0/ or CF:1/
     <TD> MCP750
  <TR>
     <TD> &nbsp;
     <TD> /cf
     <TD> EEP:0/
     <TD> RAD750 target
  <TR>
     <TD> Linux
     <TD> /ram
     <TD> /tmp/ramdev0
     <TD> Multiple users on the same development machine should remap 
          this to use a local directory.
  <TR>
     <TD> &nbsp;
     <TD> /cf
     <TD> /tmp/eedev0
     <TD>
  <TR>
     <TD> Mac OS X
     <TD> /ram
     <TD> /tmp/ramdev0
     <TD> Multiple users on the same development machine should remap 
          this to use a local directory.
  <TR>
     <TD> &nbsp;
     <TD> /cf
     <TD> /tmp/eedev0
     <TD>
  <TR>
     <TD> Windows/Cygwin
     <TD> /ram
     <TD> /tmp/ramdev0
     <TD> On Cygwin, the directory is a Cygwin shell directory. 
          /tmp/ramdev0 will probably map to: C:\\cygwin\\tmp\\ramdev0
  <TR>
     <TD> &nbsp;
     <TD> /cf
     <TD> /tmp/eedev0
     <TD> C:\\cygwin\\tmp\\eedev0
  </TABLE>

  Next: \ref cfedeploy_2_6_3 <BR>
  Prev: \ref cfedeploy_2_6_1 <BR>
  Up To: \ref cfedeploy_2_6
**/

/**
  \page cfedeploy_2_6_3 Transfer the cFE Applications and Startup File to the Target Non-Volatile Disk 

  Define the applications to be started automatically by the CFE_ES startup 
  code. The startup file (default name:<B>cfe_es_startup.scr</B>) contains 
  a list of applications that will be started by the CFE_ES startup code 
  immediately after the cFE initializes. Applications may also be started 
  at a later time via the <B>CFE_ES_StartApp</B> command. By default, only 
  the applications needed for communication with the ground system are listed 
  in the startup script. There is also a test library loaded in the default 
  script to demonstrate how a set of library functions can be loaded.
  
  <B>NOTE:</B>In older versions of the cFE, the startup file had to be set 
  to an exact path: "/cf/apps/cfe_es_startup.scr". Starting with cFE version 4.1, 
  the path and name of the startup file is passed into the cFE entry point 
  (#CFE_ES_Main) from the Board Support Package. Because of this, there are no 
  longer constraints on the name or path of the Non-Volatile file system. The 
  cFE will attempt to open the startup file that was passed in.
  
  Before transferring the cFE Apps and startup script, check that the 
  startup script has the correct extension for the files by editing the file 
  with a text editor.

  <CENTER> <H4> cFE Application extensions for different target operating systems: </H4> </CENTER>
  <TABLE WIDTH="100%">
  <TR>
     <TD> <B> "Target" operating systems </B>
     <TD> <B> cFE Application Extension </B>
     <TD> <B> Notes </B>
  <TR>
     <TD> RTEMS
     <TD> S-record file format : .s3r <BR> ci.s3r
     <TD>
  <TR>
     <TD> vxWorks 6.x
     <TD> Loadable ELF object format: .o <BR> ci.o
     <TD> 
  <TR>
     <TD> Linux
     <TD> Loadable Shared Library: .so <BR> ci.so
     <TD> 
  <TR>
     <TD> Mac OS X
     <TD> Loadable application bundle: .bundle <BR> ci.bundle
     <TD>
  <TR>
     <TD> Windows/Cygwin
     <TD> Loadable Shared Library: .dll <BR> ci.dll
     <TD> This is a cygwin shared library, it might not be a 
          standard windows "DLL"
  </TABLE>

  Once the startup script is finalized, copy the startup script and 
  the cFE applications to the Non-Volatile disk on the target. The default path
  to use is "/cf/apps" for both the startup script and cFE Applications, but it
  is not limited to that path or name.  In the case of a Linux desktop 
  implementation, the files would be copied to "/tmp/eedev0/apps". 
  On the RAD750, the files would be copied to the "apps" directory on 
  the "EEP:0" device, or "/EEP:0/apps".

  Next: \ref cfedeploy_2_6_4 <BR>
  Prev: \ref cfedeploy_2_6_2 <BR>
  Up To: \ref cfedeploy_2_6
**/

/**
  \page cfedeploy_2_6_4 Description of Fields in the Startup script 

  This section is a small aside on the description of the fields contained 
  within the startup script, cfe_es_startup.scr.  Here is an example line:

  \verbatim
  CFE_APP, /cf/apps/ci.o, CI_task_main,  CI_APP,  70,  4096, 0x0, 1;
  \endverbatim

  The fields are separated by commas and are:<BR>
  <UL>
     <LI> <B>Module Type</B>: This field is the type of module we are loading.  
          The choices are CFE_APP, CFE_LIB, CFE_DRV. CFE_APP is the standard 
          cFE application. CFE_LIB is for a cFE shared library. CFE_DRV is for 
          a cFE device driver (not currently implemented). <BR>
     <LI> <B>Path and Filename</B>: The second field is the path to the 
          loadable module on the system. <BR>
     <LI> <B>Entry Point</B>: The third parameter is the entry point 
          to the start of the code of the module (such as its initialization 
          function or main function). <BR>
     <LI> <B>cFE Name</B>: The fourth field is the cFE name for the Application
          or Library. <BR>
     <LI> <B>Priority</B>: The fifth field is the application's starting priority. 
          Priorities can range from 0 to 255 (0 being highest). <BR>
     <LI> <B>Stack Size</B>: The sixth field is the application's stack size. <BR>
     <LI> <B>Unused</B>: The seventh field is unused. It used to be Load Address.
          Set this field to 0 (zero). <BR>
     <LI> <B>Exception Action</B>: The eight field is the Exception Action: This 
          field specifies what the application will do if the cFE Application 
          causes an exception. A '1' here means that the cFE will perform a 
          Processor Reset. A '0' her means that the cFE will reset the Application 
          without stopping the rest of the cFE Applications. <BR>
  </UL>
  
  Each line corresponds to one entity. At the end of the line, a semicolon delineates 
  the end of the line. At the end of the file, a bang (exclamation point) delineates 
  the end of the file.

  Next: \ref cfedeploy_2_6_5 <BR>
  Prev: \ref cfedeploy_2_6_3 <BR>
  Up To: \ref cfedeploy_2_6
**/

/**
  \page cfedeploy_2_6_5 Start the cFE Core on the Target 

  With everything loaded, the cFE can be started. Starting the cFE is a 
  highly target dependant activity. The following table gives examples 
  of how to start the cFE on various platforms. For full details see 
  the notes for each section.

  <CENTER> <H4> How to start the cFE on Various Target Systems: </H4> </CENTER>
  <TABLE WIDTH="100%">
  <TR>
     <TD> <B> "Target" operating system </B>
     <TD> <B> How to start the cFE </B>
  <TR>
     <TD> RTEMS	
     <TD> Loaded through GDB/BDM using a shell script: <BR>
          \c "debug.sh"
  <TR>
     <TD> vxWorks 6.2 / RAD750
     <TD> Started from the vxWorks Target Shell command: <BR> 
          <tt> startCfeCore "/eep:0/cfe-core.o" </tt>
  <TR>
     <TD> Linux
     <TD> Start directly from the linux shell: <BR>
          <tt> $ ./core-linux.bin PO 1 </tt> <BR>
          All of the command line options can be listed by typing: <BR>
          <tt> $./core-linux.bin -h </tt>
  <TR>
     <TD> Mac OS X
     <TD> Start directly from the OS X shell: <BR>
          <tt> $ ./core-osx.bin PO 1 </tt> <BR>
          All of the command line options can be listed by typing: <BR>
          <tt> $./core-osx.bin -h </tt>
  <TR>
     <TD> Windows/Cygwin
     <TD> Start directly from the Cygwin shell: <BR>
          <tt> $ ./core-cygwin.exe PO 1 </tt> <BR>
          All of the command line options can be listed by typing: <BR>
          <tt> $./core-cygwin.exe -h </tt>
  </TABLE>

  Next: \ref cfedeploy_3 <BR>
  Prev: \ref cfedeploy_2_6_4 <BR>
  Up To: \ref cfedeploy_2_6
**/

/**
  \page cfedeploy_3 Target Specific Instructions

  This section provides details on how to load and run each of the 
  supported cFE configurations.
  
  Currently supported configurations are:
  <UL>
     <LI> \subpage cfedeploy_3_1
     <LI> \subpage cfedeploy_3_3
     <LI> \subpage cfedeploy_3_4
     <LI> \subpage cfedeploy_3_5
     <LI> \subpage cfedeploy_3_6
  </UL>
  
  If appropriate, be sure to check out: <BR>
  \subpage cfedeploy_3_6
  
  Next: \ref cfedeploy_4 <BR>
  Up To: \ref cfedeployguide
**/

/**
  \page cfedeploy_3_1 MCP750 / vxWorks 6.4 Platform
  
  On the MCP750/vxWorks 6.4 platform, the cFE Core is built as a dynamic loadable 
  vxWorks module, rather than being linked to the vxWorks kernel/BSP. The cFE core 
  is loaded into the compact flash disk on the MCP750, so it can be started from a 
  vxWorks shell or startup script after the kernel comes up. In order to successfully 
  run the cFE core and cFE Applications on the MCP750, the kernel must have a few 
  items configured to support the cFE

  <CENTER> <H4> cFE Core Configuration on the MCP750 PPC Board </H4> </CENTER>
  <CENTER> <B> cfe-config.mak Settings </B> </CENTER>
  <TABLE ALIGN="CENTER">
  <TR>
     <TD> <B>Prolog.mak variable </B>
     <TD> <B>Required selection </B>
     <TD> <B>Notes</B>
  <TR>
     <TD> HWARCH
     <TD> PPC
  <TR>
     <TD> PLATFORM
     <TD> mcp750
  <TR>
     <TD> OS
     <TD> vxworks6
  <TR>
     <TD> BSP
     <TD> vxworks6.4
  </TABLE>
  
  <CENTER> <H4> File System Mappings on the MCP750 PPC Board </H4> </CENTER>
  
  The cFE uses the following file system mappings for the MCP750 PPC Board. 
  The file system mappings are defined in the <tt>bsp_voltab.c</tt> file in the 
  <tt>arch/ppc/mcp750/vxworks6.2/bsp</tt> directory:
  
  <CENTER> <B> OSAL File System Mappings </B> </CENTER>
  <TABLE WIDTH="100%">
  <TR>
     <TD> <B> cFE "device" </B>
     <TD> <B> File System Type </B>
     <TD> <B> cFE Path </B>
     <TD> <B> Host Path </B>
     <TD> <B> Notes </B>
  <TR>
     <TD> /ramdev0
     <TD> Real RAM Disk ( vxWorks )
     <TD> /ram
     <TD> RAM:0/
     <TD> Created by the cFE Core. Used to store logs, data files. Preserved 
          on a processor reset.
  <TR>
     <TD> /eedev0
     <TD> File System Mapped  ( FS_BASED)
     <TD> /cf
     <TD> eep:0/
     <TD> The MCP750 Compact Flash disk is used as the Non-Volatile disk for 
          the cFE. It is created/initialized by the BSP and mapped to the 
          cFE in the volume table.
  <TR>
     <TD> /ramdev1 - /ramdev5
     <TD> Real RAM Disk
     <TD> N/A
     <TD> N/A
     <TD> Unused table entries for applications to create new cFE based RAM disks
  <TR>
     <TD> /ssrdev0 - /ssrdev2
     <TD> File System Mapped (FS_BASED)
     <TD> N/A
     <TD> /ssr:0/SSR1 - /ssr:0/SSR3
     <TD> Unused table entries for applications to map Hard Disk device 
          directories to "pseudo" SSR file systems.
  </TABLE>

  <CENTER> <H4> How to configure the vxWorks 6.4 BSP to support the cFE </H4> </CENTER>
  
  The vxWorks 6.4 BSP for the MCP750 is built and configured as a Workbench (Eclipse) 
  vxWorks kernel image project. All of the kernel settings are configured through the 
  Graphical User Interface rather than the traditional "config.h" and "configAll.h" 
  files. The vxWorks kernel image project files for the MCP750 in the 
  <tt>arch/ppc/mcp750/vxworks6.4/bsp/bsp-integration</tt> directory. To setup a new vxWorks 
  kernel image, do the following:<BR>
  
  <OL>
     <LI> Copy the <tt> arch/ppc/mcp750/vxworks6.4/bsp/bsp-integration/mcp750 </tt> directory to 
          the <tt> WindRiver/vxworks6.4/target/config </tt> directory in the vxworks installation 
          if it is not already present. 
     <LI> Copy the <tt> arch/ppc/mcp750/vxworks6.4/bsp/bsp-integration/mcp750image </tt> to the 
          Workbench (Eclipse) workspace directory. On the cFE development workstation 
          it is located in /opt/workspace. Make sure the file permissions are read and write. The 
          cm system usually makes them read-only. The vxWorks makefiles will fail if the files 
          remain read only.
     <LI> Start the WindRiver Workbench IDE and import an existing vxWorks 6.x kernel 
          image project, selecting the workspace/mcp750image project file. Now you should 
          be able to configure and build the vxWorks kernel for the MCP750.
     <LI> An alternative to the Workbench IDE kernel configuration is the “vxprj” command line 
          utility. Vxprj can be used to list, add, or remove vxworks parameters to the kernel 
          image project. It can also be used to build the vxworks kernel images. 
  </OL>
  
  Now that the vxWorks image project is setup, configure the following options for your application:

  <OL>
     <LI> In the kernel configuration settings, the #USER_RESERVED_MEM macro must be 
          set to be at least as much as the sum of:<BR><tt>
          #CFE_ES_RESET_AREA_SIZE +
          (#CFE_ES_RAM_DISK_SECTOR_SIZE * #CFE_ES_RAM_DISK_NUM_SECTORS )+
          #CFE_ES_USER_RESERVED_SIZE +
          0x100  </tt> 
          <BR>( that is just for a few extra variables )<BR>

          The #CFE_ES_USER_RESERVED_SIZE can be used to allocate a chunk of memory that 
          gets preserved on a Processor Reset.  The cFE Applications can get the address 
          and size of this memory by calling: <BR><tt>
       
          int32 OS_BSPGetUserReservedArea(void *ptrToUserArea, uint32 *SizeOfUserArea); </tt>

          The function prototype is in "os_bsp.h".

     <LI> Integrate the support module called cfeSupport.c : This module must be added to 
          the vxWorks BSP. It contains a couple of functions to return the kernel text 
          addresses and it also has the "startCfeCore" routine that will load and start 
          the cFE core. Note: This is already in the vxWorks kernel image project in 
          <tt> arch/ppc/mcp750/vxworks6.4/bsp/bsp-integration/mcp750image </tt> so you should not 
          have to do this step.
     <LI> Create a non-volatile disk. To support the cFE, there must be a non-volatile 
          disk that contains the cFE Core loadable module, startup script, and cFE apps. 
          For the MCP750 there is a Compact Flash disk in the board. The disk is created 
          in the kernel as device: "CF:0". This non-volatile disk device must be mapped 
          to the cFE 'eedev0' device in the file "bsp_voltab.c" ( the entry should 
          already be in the file and the standalone BSP should already mount the CF disk ). 
          In the event a physical EEPROM disk is not available, a vxWorks ROMFS file system, 
          or a hostfs file system could be used.
  </OL>

  <CENTER> <H4> How to Run the cFE on the MCP750 </H4> </CENTER>
  <OL>
     <LI> Load the kernel. The custom vxWorks kernel is loaded into the MCP750 via TFTP. 
          We use a vxWorks boot image (Rather than the Motorola boot monitor/loader) to 
          boot the MCP750 board, TFTP the "real" kernel to RAM, and execute it. This vxWorks 
          boot image also sets the network settings for the "real" kernel image. On our cFE 
          development system, we keep the loadable vxWorks kernel image in a TFTP directory 
          on the development workstation. So the vxWorks kernel image goes in 
          <tt>/tftpboot/cpu1/cfecpu1.st</tt>. 
          <tt>( $ cp /opt/workspace/mcp750image/default/vxWorks /tftpboot/cpu1/cfecpu1.st )</tt>
     <LI> Decide what directory will be used to store the cFE Applications and cFE Startup File. 
          In this example, assume that the cFE Applications will be stored in the <tt>/cf:0/apps</tt> 
          directory, which will be mapped to the "/cf/apps" cFE path. Create the "apps" 
          directory on the non-volatile disk: "/eep:0/apps".
     <LI> Copy the "cfe-core.o" loadable module into the non-volatile disk. On the MCP750, this is 
          done simply by FTPing the <tt>cfe-core.o</tt> file to the target:
          \verbatim
          $ ftp 192.168.1.4
          ftp> username: target
          ftp> password: password
          ftp>  cd "CF:0"
          ftp> cd "apps"
          ftp> binary
          ftp> put cfe-core.o
          \endverbatim
     <LI> For this example, also assume that the cFE Startup File is named "cfe_es_startup.scr". 
          Copy the "cfe_es_startup.scr" script into the non-volatile disk "apps" directory, 
          using FTP as well.
     <LI> Copy, via FTP,  all of the cFE Application ".o" files into the non-volatile disk "apps" 
          directory. Again, the apps can be FTPed to the target compact flash disk.
     <LI> Copy, via FTP,  the vxWorks startup script <tt>startup.scr</tt> to the Compact Flash root directory. 
          This startup script contains the command to start the cFE core when vxWorks is finished 
          booting. The <tt>startup.scr</tt> file can be found in the <tt>build/cpux/exe</tt> directory.
          
          The command in the startup.scr to start the cFE core is:
          
          \verbatim
          \endverbatim
          
          Note the new parameters to the "startCfeCore" function. The second parameter is the image ID. 
          It is an arbitrary integer to help identify which cFE image was booted. In a mission with two 
          banks of EEPROM and two copies of the cFE it can be used to identify or verify the bank that 
          is being used. No other runtime decisions are made based on this parameter. The third parameter 
          is the full cFE path and filename of the cFE Startup File. In this example, the name is the 
          same as the previous build. Once there are two banks of EEPROM in operation, this parameter 
          can be used to select which EEPROM disk is used to startup the cFE Applications.   
  </OL>
 
  <CENTER> <H4> Exception Handling </H4> </CENTER>

  The <tt>ppc/mcp750/vxWorks 6.4</tt> port will catch all exceptions, log them, and cause a processor reset.

  <CENTER> <H4> BSP Panic </H4> </CENTER>

  If the cFE core startup fails, the generic cFE code will call the #OS_BSPPanic routine. 
  This is a target specific routine. On the MCP750, the default action of the #OS_BSPPanic 
  routine is to exit back to the cFE shell

  <CENTER> <H4> Compressed file support </H4> </CENTER>

  The cFE supports loading compressed cFE Application files. The files must be compressed 
  with the "gzip" utility. An example: "<tt>$ gzip ci.o</tt>". This will produce the file 
  "<tt>ci.o.gz</tt>". When the cFE code detects the "<tt>.gz</tt>" file extension, it will 
  uncompress the cFE application when loading it.


  Next: \ref cfedeploy_3_3 <B>OR</B> \ref cfedeploy_4 <BR>
  Up To: \ref cfedeploy_3
**/
  

/**
  \page cfedeploy_3_3 BAE RAD750 / vxWorks 6.4 Platform
  
  On the RAD750/vxWorks 6.4 platform, the cFE Core is built as a dynamic 
  loadable vxWorks module, rather than being linked to the vxWorks 
  kernel/BSP. The cFE core is loaded into the EEPROM disk on the RAD750, 
  so it can be started from a vxWorks shell or startup script after the 
  kernel comes up. In order to  successfully run the cFE core and cFE 
  Applications on the RAD750, the kernel must have a few items configured 
  to support the cFE.

  <CENTER> <H4> cFE Core Configuration for the RAD750 </H4> </CENTER>
  <CENTER> <B> Prolog.mak Settings </B> </CENTER>
  <TABLE ALIGN="CENTER">
  <TR>
     <TD> <B>Prolog.mak variable </B>
     <TD> <B>Required selection </B>
     <TD> <B>Notes</B>
  <TR>
     <TD> HWARCH
     <TD> PPC
  <TR>
     <TD> PLATFORM
     <TD> rad750
  <TR>
     <TD> OS
     <TD> vxworks6
  <TR>
     <TD> BSP
     <TD> vxworks6.4
  </TABLE>

  Additional cFE Core configuration notes:<BR>
  <OL>
    <LI> By default, the -g debug switch is on. It needs to be turned off 
         to load <tt>cfe-core.o</tt> in the EEPROM disk. For loading it from the 
         host drive, you don't have to change it. The switch is located 
         in <tt>arch/ppc/rad750/vxworks6.4/make/config.mak</tt>
    <LI> The cfe platform configuration file needs to have the 
         #CFE_TIME_MAX_LOCAL_SECS variable changed from 27 to 20.
    <LI> The <tt>osconfig.h</tt> configuration file needs to have the 
         \#define #OS_INCLUDE_NETWORK changed to \#undef #OS_INCLUDE_NETWORK
  </OL>

  <CENTER> <H4> File System Mappings on the RAD750 PPC Board </H4> </CENTER>
  
  The cFE uses the following file system mappings for the RAD750 PPC Board. 
  The file system mappings are defined in the bsp_voltab.c file in the 
  <tt>arch/ppc/mcp750/vxworks6.2/bsp</tt> directory:<BR>
  <CENTER> <B> OSAL File System Mappings </B> </CENTER>
  <TABLE WIDTH="100%">
  <TR>
     <TD> <B> cFE "device" </B>
     <TD> <B> File System Type </B>
     <TD> <B> cFE Path </B>
     <TD> <B> Host Path </B>
     <TD> <B> Notes </B>
  <TR>
     <TD> /ramdev0
     <TD> Real RAM Disk ( vxWorks )
     <TD> /ram
     <TD> RAM:0/
     <TD> Created by the cFE Core. Used to store logs, data files. Preserved 
          on a processor reset.
  <TR>
     <TD> /eedev0
     <TD> File System Mapped  ( FS_BASED)
     <TD> /cf
     <TD> eep:0/
     <TD> The RAD750 EEPROM disk is used as the Non-Volatile disk for the cFE. 
          It is created/initialized by the BSP and mapped to the cFE in the 
          volume table.  This "CF" entry is for backwards compatibility while 
          transitioning to the two banks of EEPROM. It can be ignored once the 
          two-bank solution below is being used.
  <TR>
     <TD> /eedev1
     <TD> File System Mapped  ( FS_BASED)
     <TD> /eep1
     <TD> eep1:0/
     <TD> This is the primary RAD750 EEPROM disk. It can be used as the 
          Non-Volatile disk for the cFE. It is created and initialized 
          by the BSP and mapped to the cFE in the volume table.
  <TR>
     <TD> /eedev2
     <TD> File System Mapped  ( FS_BASED)
     <TD> /eep2
     <TD> eep2:0/
     <TD> This is the secondary RAD750 EEPROM disk. It can be used as 
          the Non-Volatile disk for the cFE. It is created and 
          initialized by the BSP and mapped to the cFE in the volume table.
  <TR>
     <TD> /ramdev1 - /ramdev5
     <TD> Real RAM Disk
     <TD> N/A
     <TD> N/A
     <TD> Unused table entries for applications to create new cFE based RAM disks
  <TR>
     <TD> /ssrdev0 - /ssrdev2
     <TD> File System Mapped (FS_BASED)
     <TD> N/A
     <TD> /ssr:0/SSR1 - /ssr:0/SSR3
     <TD> Unused table entries for applications to map Hard Disk device 
          directories to "pseudo" SSR file systems.
  </TABLE>

  <CENTER> <H4> How to configure the vxWorks 6.4 BSP to support the cFE </H4> </CENTER>
  
  <OL>
     <LI> In <tt>config.h</tt>, the USER_RESERVED_MEM macro must be set to be 
          at least as much as the sum of:<BR>
           #CFE_ES_RESET_AREA_SIZE + (#CFE_ES_RAM_DISK_SECTOR_SIZE * #CFE_ES_RAM_DISK_NUM_SECTORS ) + 
          #CFE_ES_USER_RESERVED_SIZE + 0x100   ( that is just for a few extra variables )

          The #CFE_ES_USER_RESERVED_SIZE can be used to allocate a chunk of memory 
          that gets preserved on a Processor Reset.  The cFE Applications can get 
          the address and size of this memory by calling:
          
          <tt>int32 OS_BSPGetUserReservedArea(void *ptrToUserArea, uint32 *SizeOfUserArea);</tt>
          
          The function prototype is in <tt>"os_bsp.h"</tt>.

          ( On the MCP750 COTS board, this sizing is automatic, because the 
          BSP is still integrated with the cFE ):
          
          \verbatim
          #define USER_RESERVED_MEM  (CFE_ES_CDS_SIZE + \
                                      CFE_ES_RESET_AREA_SIZE + \
                                      (CFE_ES_RAM_DISK_SECTOR_SIZE * CFE_ES_RAM_DISK_NUM_SECTORS )+ \
                                      CFE_ES_USER_RESERVED_SIZE + \
                                      0x100 )
          \endverbatim


    <LI> Integrate the support module called <tt>cfeSupport.c</tt> : This 
         module must be added to the vxWorks BSP. It contains a couple of 
         functions to return the kernel text addresses and it also has the 
         <tt>"startCfeCore"</tt> routine that will load and start the cFE core.

    <LI> Edit the file <tt>OS_Ext_Init.c</tt> in the <tt>LRO/os_ext</tt> directory. 
         Make the following changes to the #OS_Ext_Init function:
         <UL>
            <LI> remove the <tt>logFdAdd</tt> to <tt>/vio/2</tt>
            <LI> remove call to the <tt>RTOS_Debug_Init</tt> so it will not 
                 use the #USER_RESERVED_MEM area
            <LI> Removed the call to <tt>RTOS_Install_Exc_Handlers</tt> -- because 
                 we will be using our own exception handlers and they use 
                 the debug code above
            <LI> Removed the call to <tt>RTOS_TM_Init</tt> because it uses the 
                 <tt>ptimer 1</tt>, which the LRO scheduler will use. The cFE 
                 uses <tt>ptimer 2</tt> and <tt>3</tt> for the TIME subsystem.
         </UL>

    <LI> Create a non-volatile disk. To support the cFE, there must be 
         a non-volatile disk that contains the cFE Core loadable module, 
         startup script, and cFE apps. For LRO, there is an EEPROM disk 
         in the on-board EEPROMs. The disk is created in the kernel as 
         device: <tt>"/eep:0"</tt>. This non-volatile disk device must be mapped 
         to the cFE <tt>'eedev0'</tt> device in the file <tt>"bsp_voltab.c"</tt> ( the 
         entry should already be in the file ). In the event a physical 
         EEPROM disk is not available, a vxWorks <tt>ROMFS</tt> file system, or 
         a <tt>hostfs</tt> file system could be used.
  </OL>

  <CENTER> <H4> How to run the cFE on the RAD750 </H4> </CENTER>
  
  <OL>
     <LI> Load the kernel. The custom vxWorks kernel can be loaded into 
          a bank of EEPROM, or the kernel could be loaded via the serial 
          port directly into RAM to boot.
     <LI> Decide what directory will be used to store the cFE Applications 
          and cFE Startup File. In this example, assume that the cFE 
          Applications will be stored in the <tt>/eep:0/apps</tt> directory, which 
          will be mapped to the <tt>"/cf/apps"</tt> cFE path. Create the <tt>"apps"</tt> 
          directory on the non-volatile disk: <tt>"/eep:0/apps"</tt>. 
     <LI> Copy the <tt>"cfe-core.o"</tt> loadable module into the non-volatile disk. 
          On LRO, this has to be done with a custom vxWorks host shell 
          tcl script <tt>"lcp2"</tt> that can copy a file from the host file system 
          to a target file system over the serial WDB connection. Note that 
          the <tt>cfe-core.o</tt> must be built without the <tt>"-g"</tt> debug flag in order 
          to make it small enough for the copy.
     <LI> For this example, also assume that the cFE Startup File is named 
          <tt>"cfe_es_startup.scr"</tt>. Copy the <tt>"cfe_es_startup.scr"</tt> script into 
          the non-volatile disk <tt>"apps"</tt> directory.
     <LI> Copy all of the cFE Application <tt>".o"</tt> files into the non-volatile 
          disk <tt>"apps"</tt> directory. Again, the apps must be built without the 
          <tt>"-g"</tt> flag in order to make them small enough.
     <LI> Start the cFE Core on the target: <BR>
          On the host shell ( or target shell ) type:
          \verbatim
          > ioGlobalStdSet 1,3
          > ioGlobalStdSet 2,3
          > logFdSet 3
          > startCfeCore "/eep:0/cfe-core.o", 1, "/cf/apps/cfe_es_startup.scr"
          \endverbatim
          
          Note the new parameters to the <tt>"startCfeCore"</tt> function. The second 
          parameter is the image ID. It is an arbitrary integer to help identify 
          which cFE image was booted. In a mission with two banks of EEPROM and 
          two copies of the cFE it can be used to identify or verify the bank 
          that is being used. No other runtime decisions are made based on this 
          parameter. The third parameter is the full cFE path and filename of 
          the cFE Startup File. In this example, the name is the same as the 
          previous build ( 4.0.1 ). Once there are two banks of EEPROM in 
          operation, this parameter can be used to select which EEPROM disk is 
          used to startup the cFE Applications.

  <CENTER> <H4> Exception Handling </H4> </CENTER>

  The <tt>ppc/rad750/vxWorks 6.4</tt> port will catch all exceptions, log them, and cause 
  a processor reset. If the PID29 debug switch is ON, the cFE will NOT install 
  the cFE exception handler. This will allow the users to debug a crash using 
  the host vxWorks tools, rather than having the cFE perform a Processor Reset.

  <CENTER> <H4> BSP Panic </H4> </CENTER>

  If the cFE core startup fails, the generic cFE code will call the #OS_BSPPanic 
  routine. This is a target specific routine. If the cFE Startup fails and calls 
  #OS_BSPPanic, having the PID29 debug switch in the ON position will cause the 
  cFE to abort to the vxWorks shell. Having the switch in the OFF position will 
  cause the cFE to do a Processor Reset.

  <CENTER> <H4> Compressed file support </H4> </CENTER>

  The cFE supports loading compressed cFE Application files. The files must be 
  compressed with the <tt>"gzip"</tt> utility. An example: <tt>"$ gzip ci.o"</tt>. This will 
  produce the file <tt>"ci.o.gz"</tt>. When the cFE code detects the <tt>.gz</tt> file extension, 
  it will uncompress the cFE application when loading it.

  Next: \ref cfedeploy_3_4 <B>OR</B> \ref cfedeploy_4 <BR>
  Prev: \ref cfedeploy_3_1 <BR>
  Up To: \ref cfedeploy_3
**/

/**
  \page cfedeploy_3_4 Macintosh / OS X Platform
  
  <CENTER> <H4> cFE Core Configuration for the Macintosh / OS X Platform </H4> </CENTER>
  <CENTER> <B> Prolog.mak Settings </B> </CENTER>
  <TABLE ALIGN=CENTER>
  <TR>
     <TD> <B>Prolog.mak variable </B>
     <TD> <B>Required selection </B>
     <TD> <B>Notes</B>
  <TR>
     <TD> HWARCH
     <TD> PPC / x86
     <TD> Both the PPC and x86 are supported
  <TR>
     <TD> PLATFORM
     <TD> mac
  <TR>
     <TD> OS
     <TD> osx
  <TR>
     <TD> BSP
     <TD> osx
  </TABLE>

  <CENTER> <H4> How to run the cFE on the Macintosh / OS X Platform </H4> </CENTER>
  
  <OL>
     <LI> Create the directory to hold the non-volatile applications. 
          \verbatim
          $ mkdir /tmp/eedev0/apps
          \endverbatim
     <LI> Change the extension of the files files listed in the startup script 
          to <tt>.bundle</tt> (from the default of <tt>.o</tt>)
     <LI> Copy the files listed in the startup script (and the startup script) 
          to the non-volatile directory.
          \verbatim
          ...fsw/build/cpu1]$cp exe/ci.bundle /tmp/eedev0/apps
          ...fsw/build/cpu1]$cp exe/to.bundle /tmp/eedev0/apps
          ...fsw/build/cpu1]$cp exe/sch.bundle /tmp/eedev0/apps
          ...fsw/build/cpu1]$cp exe/tst_lib.bundle /tmp/eedev0/apps
          ...fsw/build/cpu1]$cp exe/cfe_es_startup.scr /tmp/eedev0/apps
          \endverbatim
     <LI> To run the cFE, type the following:
          \verbatim
          ...fsw/build/cpu1]$ ./exe/core-osx.bin PO 1
          \endverbatim
          <B>Note:</B> See section called \ref cfedeploy_3_6.
  </OL>

  <CENTER> <H4> Exception Handling </H4> </CENTER>

  This port does not install exception handlers. Exceptions will be 
  caught by the operating system or debugger. The UNIX signal handler 
  facility could be used to catch exceptions in the cFE.

  <CENTER> <H4> BSP Panic </H4> </CENTER>

  If the cFE core startup fails, the generic cFE code will call the 
  #OS_BSPPanic routine. This is a target specific routine. If the cFE 
  Startup fails and calls #OS_BSPPanic, this port will exit to the shell.

  <CENTER> <H4> Compressed file support </H4> </CENTER>

  The cFE supports loading compressed cFE Application files. 
  The files must be compressed with the <tt>"gzip"</tt> utility. An 
  example: <tt>"$ gzip ci.o"</tt>. This will produce the file <tt>"ci.o.gz"</tt>. 
  When the cFE code detects the <tt>.gz</tt> file extension, it will 
  uncompress the cFE application when loading it.

  Next: \ref cfedeploy_3_5 <B>OR</B> \ref cfedeploy_3_6 <BR>
  Prev: \ref cfedeploy_3_3 <BR>
  Up To: \ref cfedeploy_3
**/

/**
  \page cfedeploy_3_5 PC / Linux Platform
  
  <CENTER> <H4> cFE Core Configuration for the PC / Linux Platform </H4> </CENTER>
  <CENTER> <B> Prolog.mak Settings </B> </CENTER>
  <TABLE ALIGN=CENTER>
  <TR>
     <TD> <B>Prolog.mak variable </B>
     <TD> <B>Required selection </B>
     <TD> <B>Notes</B>
  <TR>
     <TD> HWARCH
     <TD> x86
  <TR>
     <TD> PLATFORM
     <TD> pc
  <TR>
     <TD> OS
     <TD> linux
  <TR>
     <TD> BSP
     <TD> linux
  </TABLE>

  <CENTER> <H4> How to run the cFE on the PC / Linux Platform </H4> </CENTER>
  
  <OL>
     <LI> Create the directory to hold the non-volatile applications. 
          \verbatim
          $ mkdir /tmp/eedev0/apps
          \endverbatim
     <LI> Change the extension of the files files listed in the startup script 
          to <tt>.so</tt> (from the default of <tt>.o</tt>)
     <LI> Copy the files listed in the startup script (and the startup script) 
          to the non-volatile directory.
          \verbatim
          ...fsw/build/cpu1]$cp exe/ci.so /tmp/eedev0/apps
          ...fsw/build/cpu1]$cp exe/to.so /tmp/eedev0/apps
          ...fsw/build/cpu1]$cp exe/sch.so /tmp/eedev0/apps
          ...fsw/build/cpu1]$cp exe/tst_lib.so /tmp/eedev0/apps
          ...fsw/build/cpu1]$cp exe/cfe_es_startup.scr /tmp/eedev0/apps
          \endverbatim
     <LI> To run the cFE, type the following:
          \verbatim
          ...fsw/build/cpu1]$ ./exe/core-linux.bin PO 1
          \endverbatim
          On Linux, the cFE uses POSIX Message Queues. Because of the 
          default kernel configuration, this usually requires the core-linux.bin 
          binary to run as the root user. So, it may be necessary to run the cFE 
          on linux as follows:
          \verbatim
          .../fsw/build/cpu1]$ su
          password: <enter root password here>
          .../fsw/build/cpu1]# ./exe/core-linux.bin
          \endverbatim
          <B>Note:</B> See section called \ref cfedeploy_3_6.
  </OL>

  <CENTER> <H4> Exception Handling </H4> </CENTER>

  This port does not install exception handlers. Exceptions will be 
  caught by the operating system or debugger. The UNIX signal handler 
  facility could be used to catch exceptions in the cFE.

  <CENTER> <H4> BSP Panic </H4> </CENTER>

  If the cFE core startup fails, the generic cFE code will call the 
  #OS_BSPPanic routine. This is a target specific routine. If the cFE 
  Startup fails and calls #OS_BSPPanic, this port will exit to the shell.

  <CENTER> <H4> Compressed file support </H4> </CENTER>

  The cFE supports loading compressed cFE Application files. The files must be 
  compressed with the “gzip” utility. An example: “$ gzip ci.o “. This will 
  produce the file “ci.o.gz”. When the cFE code detects the .gz file extension, 
  it will uncompress the cFE application when loading it.

  Next: \ref cfedeploy_3_6 <B>OR</B> \ref cfedeploy_3_7 <BR>
  Prev: \ref cfedeploy_3_4 <BR>
  Up To: \ref cfedeploy_3
**/

/**
  \page cfedeploy_3_6 PC / Cygwin-Windows Platform
  
  <CENTER> <H4> cFE Core Configuration for the PC / Cygwin-Windows Platform </H4> </CENTER>
  <CENTER> <B> Prolog.mak Settings </B> </CENTER>
  <TABLE ALIGN=CENTER>
  <TR>
     <TD> <B>Prolog.mak variable </B>
     <TD> <B>Required selection </B>
     <TD> <B>Notes</B>
  <TR>
     <TD> HWARCH
     <TD> x86
  <TR>
     <TD> PLATFORM
     <TD> pc
  <TR>
     <TD> OS
     <TD> linux
  <TR>
     <TD> BSP
     <TD> cygwin
  </TABLE>

  <CENTER> <H4> How to run the cFE on the PC / Cygwin-Windows Platform </H4> </CENTER>
  
  <OL>
     <LI> Create the directory to hold the non-volatile applications. 
          \verbatim
          $ mkdir /tmp/eedev0/apps ( in DOS: C:\\cygwin\\tmp\\eedev0\\apps )
          \endverbatim
     <LI> Change the extension of the files files listed in the startup script 
          to <tt>.dll</tt> (from the default of <tt>.o</tt>)
     <LI> Copy the files listed in the startup script (and the startup script) 
          to the non-volatile directory.
          \verbatim
          ...fsw/build/cpu1]$cp exe/ci.dll /tmp/eedev0/apps
          ...fsw/build/cpu1]$cp exe/to.dll /tmp/eedev0/apps
          ...fsw/build/cpu1]$cp exe/sch.dll /tmp/eedev0/apps
          ...fsw/build/cpu1]$cp exe/tst_lib.dll /tmp/eedev0/apps
          ...fsw/build/cpu1]$cp exe/cfe_es_startup.scr /tmp/eedev0/apps
          \endverbatim
     <LI> To run the cFE, type the following:
          \verbatim
          ...fsw/build/cpu1]$ ./exe/core-cygwin.bin PO 1
          \endverbatim
          If running the cFE results in a <tt>'bad system call'</tt> error at
          startup, the user must 1) enable the cygserver and 2) export the 
          <tt>CGYWIN</tt> environment variable to resolve the issue. 
          <OL>
             <LI> Enable the cygserver:
                <UL>
                <LI> You may have to be logged in as an Administrator to continue.
                <LI> Type <tt>'cygserver-config'</tt> at the cygwin prompt. It may 
                     ask you to start the cygserver as a system service or overwrite 
                     a configuration script. Say yes to both.
                <LI> You will either have to start the service using the 
                     'Administration Tools' -> 'Services' application or restart the 
                     computer (it is Windows, after all).
                <LI> To verify that the service is running, go to Start -> Run, 
                     type in <tt>'msconfig'</tt> and hit ENTER. Go to the 'Services' 
                     tab and check the 'Hide all Microsoft services'. After that you 
                     should see the cygserver listed in a state other than <tt>'stopped'</tt> 
                     or <tt>'not running'</tt>.
                </UL>
             <LI> export an environment variable
                <UL>
                <LI> type <tt>'export CGYWIN=server'</tt> at the cygwin prompt. You'll 
                     have to do this every time you bring up a new cygwin shell to run 
                     the cFE, so you might as well put it in your <tt>.bashrc</tt> with 
                     your other environment variables.
                <LI> If the above doesn't work, use <tt>'set CYGWIN=server'</tt>.
                </UL>
          </OL>

          <B>Note:</B> See section called \ref cfedeploy_3_6.
  </OL>

  <CENTER> <H4> Exception Handling </H4> </CENTER>

  This port does not install exception handlers. Exceptions will be 
  caught by the operating system or debugger. The UNIX signal handler 
  facility could be used to catch exceptions in the cFE.

  <CENTER> <H4> BSP Panic </H4> </CENTER>

  If the cFE core startup fails, the generic cFE code will call the 
  #OS_BSPPanic routine. This is a target specific routine. If the cFE 
  Startup fails and calls #OS_BSPPanic, this port will exit to the shell.

  <CENTER> <H4> Compressed file support </H4> </CENTER>

  The cFE supports loading compressed cFE Application files. The files must be 
  compressed with the “gzip” utility. An example: “$ gzip ci.o “. This will 
  produce the file “ci.o.gz”. When the cFE code detects the .gz file extension, 
  it will uncompress the cFE application when loading it.

  Next: \ref cfedeploy_3_7  <B>OR</B>  \ref cfedeploy_4 <BR>
  Prev: \ref cfedeploy_3_5 <BR>
  Up To: \ref cfedeploy_3
**/

/**
  \page cfedeploy_3_7 Notes on Parameters to starting the cFE in Linux, OS X, and Cygwin

  In the previous three sections, the command to start the cFE was shown as:
  \verbatim
  ...fsw/build/cpu1]$ ./exe/core-xxx.xxx PO 1
  \endverbatim

  This section will explain the parameters to the cfe core (the <tt>"PO"</tt> and the <tt>"1"</tt>). 

  The first parameter is the type of reset that you want the cFE to think it started with.  
  It can either be a Power On reset (<tt>PO</tt>), or a Processor Reset (<tt>PR</tt>).

  The second parameter is the type of reset subtype you want the cFE to start with:

  1 = Power on<BR>
  2 = Push Button Reset<BR>
  3 = Hardware Special Command Reset<BR>
  4 = Watchdog Reset<BR>
  5 = Reset Command<BR>

  These are useful for desktop development. With these parameters, one can 
  tell the cFE to try and recover CDS and reserved memory area (PR), or 
  clear it out (PO). Since getting the reset type and subtype is available 
  to cFE applications through an API, functionality of the application can 
  be tested on the desktop. 

  Next: \ref cfedeploy_4 <BR>
  Prev: \ref cfedeploy_3_5 <BR>
  Up To: \ref cfedeploy_3
**/
  
/**
  \page cfedeploy_4 cFE Tools

  <UL>
     <LI> \subpage cfedeploy_4_1
     <LI> \subpage cfedeploy_4_2
     <LI> \subpage cfedeploy_4_3
     <LI> \subpage cfedeploy_4_4
  </UL>
  
  Next: \ref cfedeploy_6 <BR>
  Prev: \ref cfedeploy_3 <BR>
  Up To: \ref cfedeployguide
**/

/**
  \page cfedeploy_4_1 cFE Table Compiler
  
  The following text is from the <tt>README.txt</tt> file in the 
  <tt>.../tools/elf2cfetbl</tt> directory:
  
  <H4> SUMMARY: </H4>

   The elf2cfetbl utility provides a method of converting an object file containing
   the desired contents of a cFE Application's Table Image into a binary file that
   is compatible with the cFE Table Services for loading the image.

  <H4> UTILITY SOURCE FILES: </H4>

   In the elf2cfetbl utility directory, one should find the following files: 

      <tt>cfe_tbl_filedef.h</tt> - a header file that should be placed into the fsw/cfe-core/inc
                          directory. This file should only need to be #include'd by those 
                          source files that define the initial contents of a table.

      <tt>SampleTblImg.c</tt>    - a sample .c file that defines the default contents of a 
                          table image.

      <tt>ELF_Structures.h, elf2cfetbl.c</tt> - source files for the elf2cfetbl utility.

  <H4> CREATING THE UTILITY: </H4>

   To build the utility on your particular platform, one should only need to put the 
   two source files into an appropriate directory and use the gnu CC compiler:

   \verbatim
      $ gcc -o elf2cfetbl elf2cfetbl.c
   \endverbatim

  <H4> PREPARING A SOURCE FILE FOR USE WITH THE UTILITY: </H4>

   Preparing a .c file for use with the utility requires the use of a special macro.
   At the bottom of the .c file, after defining the default contents of a table, the 
   developer should insert the following macro:

   \verbatim
   CFE_TBL_FILEDEF(ObjName, TblName, Desc, Filename)
   \endverbatim

   where:

      \c ObjName is the name of the variable previously identified in the file for the 
              instance of the table. Example: MyTblStruct
   
      \c TblName is the FULL name of the table including the owning application.  
              Example: MyApp.TableName
           
      \c Desc is a 32 character or less description of the table image.  
           (NOTE: Description cannot include commas) Example: Default Table Image
        
      \c Filename is the default filename that the application is expecting to load 
               upon initialization.  Example: MyTblDefault.bin

      An example of the usage of this macro is in the SampleTblImg.c file.

  <H4> UTILITY COMMAND LINE OPTIONS: </H4>

   The command line format for the utility is as follows:

   \verbatim
      elf2cfetbl [-tTblName] [-d"Description"] [-h] [-v] [-V] [-s#] [-p#] 
                 [-eYYYY:MM:DD:hh:mm:ss] SrcFilename [DestDirectory]
   \endverbatim

   where:<BR>
   <TABLE>
     <TR>
       <TD WIDTH="20%"><tt>-tTblName</tt>
       <TD WIDTH="80%">replaces the table name specified in the object file with \c TblName
     <TR>
       <TD WIDTH="20%"><tt>-d"Description"</tt>
       <TD WIDTH="80%">replaces the description specified in the object file with \c Description
     <TR>
       <TD WIDTH="20%"><tt>-h</tt>
       <TD WIDTH="80%">produces this output
     <TR>
       <TD WIDTH="20%"><tt>-v</tt>
       <TD WIDTH="80%">produces verbose output showing the breakdown of the object file in detail
     <TR>
       <TD WIDTH="20%"><tt>-V</tt>
       <TD WIDTH="80%">shows the version of this utility
     <TR>
       <TD WIDTH="20%"><tt>-s#</tt>
       <TD WIDTH="80%">specifies a Spacecraft ID to be put into file header. # can be specified as 
           decimal, octal (starting with a zero), or hex (starting with '0x')
     <TR>
       <TD WIDTH="20%"><tt>-p#</tt>
       <TD WIDTH="80%">specifies a Processor ID to be put into file header.  # can be specified as 
           decimal, octal (starting with a zero), or hex (starting with '0x')
     <TR>
       <TD WIDTH="20%"><tt>-a#</tt>
       <TD WIDTH="80%">specifies an Application ID to be put into file header.  # can be specified
           as decimal, octal (starting with a zero), or hex (starting with '0x')
     <TR>
       <TD WIDTH="20%"><tt>-eYYYY:MM:DD:hh:mm:ss</tt>
       <TD WIDTH="80%">specifies the spacecraft epoch time.  The <tt>SrcFilename</tt>'s file creation time 
           will be converted to seconds since the specified epoch time and stored in 
           the standard cFE File Header.<BR>
               where:   YYYY=year, MM=month (01-12), DD=day (01-31), <BR> 
                        hh=hour (00-23), mm=minute (00-59), ss=seconds (00-59) <BR>
           If no epoch is specified, the default epoch is either 1970:01:01:00:00:00 or the epoch specified
           by the user using the '-f' option described below
     <TR>
       <TD WIDTH="20%"><tt>-fYYYY:MM:DD:hh:mm:ss</tt>
       <TD WIDTH="80%">specifies the file system epoch time.  The <tt>SrcFilename</tt>'s file 
           creation time is obtained from the file system as seconds since an epoch.  
           On most systems the file system epoch is defined as 1970:01:01:00:00:00.  
           If the user is running this application on a machine with a different epoch,
           then the file system epoch should be defined with this option. <BR>
                where:   YYYY=year, MM=month (01-12), DD=day (01-31), <BR>
                         hh=hour (00-23), mm=minute (00-59), ss=seconds (00-59) <BR>
           If no epoch is specified, the default epoch is 1970:01:01:00:00:00
     <TR>
       <TD WIDTH="20%"><tt>SrcFilename</tt>
       <TD WIDTH="80%">specifies the object file to be converted
     <TR>
       <TD WIDTH="20%"><tt>DestDirectory</tt>
       <TD WIDTH="80%">specifies the directory in which the cFE Table Image file is to be created. 
           If a directory is not specified './' is assumed.
  </TABLE>

  <H4> EXAMPLES: </H4>
   \verbatim
      elf2cfetbl MyObjectFile ../../TblDefaultImgDir/
      elf2cfetbl -s12 -p0x0D -a016 -e2000:01:01:00:00:00 MyObjectFile ../../TblDefaultImgDir/
   \endverbatim

   NOTE: The name of the target file is specified within the source file as part of the 
         CFE_TBL_FILEDEF macro. If the macro has not been included in the source file, 
         the utility will fail to convert the object file.

  <H4> SPECIAL NOTES: </H4> 

   If one wishes to use a table image file under cygwin, the cygwin object file needs to 
   be converted from the COFF format to the ELF format before this utility can process it.  
   Cygwin provides a utility to make this conversion, it is called objcopy. To perform the 
   conversion, the user should issue a command similar to the following:

   \verbatim
   $ objcopy -O elf32-little MyObjFilenameInCoffFormat.o MyObjFilenameInElfFormat.o
   \endverbatim

   where the first specified filename is the original object file and the second is the 
   elf format of the same file.  The resulting elf format file should then be compatible
   with the elf2cfetbl utility.
  
  Next: \ref cfedeploy_4_2 <BR>
  Up To: \ref cfedeploy_4
**/

/**
  \page cfedeploy_4_2 Sending Commands to the cFE Core and Applications

  The following text is from the <tt>readme.txt</tt> file in the 
  <tt>.../tools/cmdUtil</tt> directory:
  
  cmdUtil is a command line C program that is designed to run on a host computer
  ( development machine, ground system, test system, etc.. ) and send commands to a
  CCSDS system over a UDP network socket.

  This utility will format and send a CCSDS command packet over a UDP network socket. It 
  can be used to send commands on a localhost, or a remote system. It is primarily used for
  cFE ( core Flight Executive ) development and testing.

  <H4> Documentation for the cmdUtil Program: </H4>

  The following is the help text from cmdUtil:<BR>
  \verbatim
  cmdUtil -- A CCSDS Command Client.
      The parameters are:
      --host : The hostname or IP address to send the command to ( default = localhost)
      --port : The UDP port to send the command to ( default = 1234 )
      --pktid : The Packet ID for the command being sent
      --cmdcode : The command code for the command being sent
      --endian : BE: Dont swap words, LE: Swap words on packet
      --half : Add a 16 bit parameter to the packet ( hex or dec )
      --long : Add a 32 bit parameter to the packet ( hex or dec )
      --string : Add a fixed length string to the packet
          The string parameter has the form "NNN:StringData"
          Where NNN is the length of the parameter in the
          command, and StringData is the string. So you could put
          --string="32:ES_APP" and it will build the string
          parameter and pad the rest of the 32 bytes with 0's.
      --byte : Add an 8 bit parameter to the packet ( hex or dec )
          This one is not implemented yet, because I will have to
          pad the other 8 bits..
 
       An example of using this is:
 
  ./cmdUtil --host=localhost --port=1234 --pktid=0x1803 --cmdcode=3 --half=100 --string="16:ES_APP"
  \endverbatim
  
  There are a couple of example shell scripts to show how the cmdUtil program can be invoked: <BR>
  The <tt>to-enable-tlm.sh</tt> is a script that sends a single command to the Telemetry
  Output (TO) application.

  The user can modify a copy of the <tt>to-enable-tlm.sh</tt> script to include the
  desired commands to be sent.

  To send the commands, just execute the script at the command prompt like this:
  \verbatim
  $./to-enable-tlm.sh
  \endverbatim

<HR>

<H4>IMPORTANT BUG!: </H4>
  This program currently does not handle Endianness. The underlying sendUdp function will get the 
  endian option passed to it, but it will swap words regardless of the datatype.
  The endian option needs to be totally reworked to account for:<BR>
  1. Sending on a Little Endian Host to a Big Endian target<BR>
  2. Sending on a Big Endian Host to a Little Endian target<BR>
  3. ( all other combinations.. )<BR>
  4. Properly swapping the specific header and data fields ( rather than just the whole packet )<BR>

  Right now it works when sending from a Little Endian ( x86 ) to Little Endian ( x86 ) machine ONLY!

  
  Next: \ref cfedeploy_4_3 <BR>
  Prev: \ref cfedeploy_4_1 <BR>
  Up To: \ref cfedeploy_4
**/

/**
  \page cfedeploy_4_3 Viewing Telemetry from the cFE Core and Applications
  
  The following text is from the <tt>readme.txt</tt> file in the 
  <tt>.../tools/tlmutils</tt> directory:
  
  The python script (<tt>packet-recv.py</tt>) in this directory allows the user to view
  telemetry packets sent by the Telemetry Output (TO) application.

  To run the script, python must be installed on the machine that will be used
  for viewing the packets.

  To run the script type the following command at the command prompt:<BR>
  \verbatim
  .../tlmutils]$python packet-recv.py
  \endverbatim

  To close the program, <tt>Ctl-C</tt> must be entered twice.

  Be sure the TO application has received a command that has the IP address of
  the machine running this script. Simply running the cFE will produce
  housekeeping telemetry packets.
  
  
  Next: \ref cfedeploy_4_4 <BR>
  Prev: \ref cfedeploy_4_2 <BR>
  Up To: \ref cfedeploy_4
**/

/**
  \page cfedeploy_4_4 Unit Test Framework (UTF)

  
  Prev: \ref cfedeploy_4_3 <BR>
  Up To: \ref cfedeploy_4
**/

/**
  \page cfedeploy_6 Building the Ground Database and Pages

  <UL>
     <LI> \subpage cfedeploy_6_1
     <LI> \subpage cfedeploy_6_2
     <LI> \subpage cfedeploy_6_3
     <LI> \subpage cfedeploy_6_4
  </UL>
  
  Prev: \ref cfedeploy_4 <BR>
  Next: \ref cfedeployguide
**/

/**
  \page cfedeploy_6_1 Populating the Global Directory

  <CENTER> <H4> tools Directory </H4> </CENTER>
  <OL>
     <LI> Extract the <tt>'global/tools'</tt> files from MKS 
          into the DESTINATION <tt>'global/tools'</tt> directory.
     <LI> Change the file permissions for all scripts to make 
          them executable.(<tt>chmod 777 \<filename> </tt>)
     <LI> Add the DESTINATION directory to the account PATH 
          variable in order to use the scripts located in this 
          directory in the following steps.
     <LI> Edit the <tt>cFEBuildMsgIds.h</tt> file to contain the 
          appropriate message IDs for each CPU in your DESTINATION 
          configuration.
  </OL>

  <CENTER> <H4> prc Directory </H4> </CENTER>

  <OL>
     <LI> Extract the <tt>'global/prc'</tt> files from MKS into 
          the DESTINATION <tt>'global/prc'</tt> directory.
     <LI> Change the file permissions on all procs so that they 
          are writable. (<tt>chmod 666 *.prc</tt>)
     <LI> Compile all procs by entering the command 
          <tt>"stol_compiler <filename>"</tt>.
  </OL>

  <CENTER> <H4> rdl Directory </H4> </CENTER>
  
  <OL>
     <LI> Extract the <tt>'global/rdl'</tt> files from MKS 
          into the DESTINATION <tt>'global/rdl'</tt> directory.
     <LI> Change the file permissions on all procs so that 
          they are writable. (<tt>chmod 666 *.rdl</tt>)
  </OL>

  Next: \ref cfedeploy_6_2 <BR>
  Up To: \ref cfedeploy_6
**/

/**
  \page cfedeploy_6_2 Populating the Local Directory

  <CENTER> <H4> rdl Directory </H4> </CENTER>
  
  <OL>
     <LI> Extract the <tt>'template*.rdl'</tt> files from 
          MKS into the DESTINATION <tt>'rdl/template'</tt> directory.
     <LI> Create a link to cFEBuildMsgIds.h file located in 
           the DESTINATION <tt>'global/tools'</tt> directory.
     \verbatim
     -> ln -s <destination>/global/tools/cFEBuildMsgIds.h cFEBuildMsgIds.h
     \endverbatim

     <LI> Extract the <tt>'.rdl'</tt> files listed below 
          from MKS <tt>'rdl'</tt> into DESTINATION <tt>'rdl'</tt> directory.
        <UL>
           <LI> <tt>ccsds_header.rdl</tt>
           <LI> <tt>cfe_user_tlm.rdl</tt>
           <LI> <tt>ccsds_header_no_append.rdl</tt>
           <LI> <tt>pseudo_tlm_file_info_3839.rdl</tt>
           <LI> <tt>cfe_cmd_types.rdl</tt>
           <LI> <tt>pseudo_tlm_file_info_3839.rdl</tt>
           <LI> <tt>cfe_file_header.rdl</tt>
           <LI> <tt>user_cmd.rdl</tt>
           <LI> <tt>cfe_tbl_header.rdl</tt>
           <LI> <tt>user_defs.rdl</tt>
           <LI> <tt>cfe_types.rdl</tt>
           <LI> <tt>user_tlm.rdl</tt>
           <LI> <tt>cfe_user_cmd.rdl</tt>
         </UL>

     <LI> Edit the <tt>user_cmd.rdl</tt> and <tt>user_tlm.rdl</tt> files 
          that exist in the rdl directory to include the <tt>cfe_user_cmd.rdl</tt>
          and <tt>cfe_user_tlm.rdl</tt> files. These files specify what 
          command and telemetry rdls to include in the ASIST databases.
     <LI> Create a link to the following files located in the appropriate 
          flight software directory(ies). The directories listed below are 
          the locations in the cFE MKS repository. The actual locations 
          may vary depending upon the mission or OS.
          \verbatim
          -> ln -s .../fsw/Build/inc/app_mission_cfg.h .
          -> ln -s .../fsw/Build/inc/cfe_mission_cfg.h .
          -> ln -s .../fsw/Build/cpu3/cfe/config/inc/cfe_platform_cfg.h .
          -> ln -s .../fsw/Build/cpu3/cfe/config/inc /osconfig.h .
          \endverbatim
  </OL>

  <CENTER> <H4> prc Directory </H4> </CENTER>

  <OL>
     <LI> Extract the <tt>'template*.prc'</tt> files from MKS into 
          the DESTINATION  <tt>'prc/template'</tt> directory.
     <LI> Extract the following procedures from MKS into the 
          DESTINATION <tt>'prc'</tt> directory.
        <UL>
           <LI> <tt>clear_spacecraft_status.prc</tt>    
           <LI> <tt>ftp_file.prc</tt>
           <LI> <tt>send_that_to_command.prc</tt>
           <LI> <tt>create_tbl_file_from_cvt.prc</tt>
           <LI> <tt>get_file_to_cvt.prc</tt>            
           <LI> <tt>set_requirements.prc</tt>
           <LI> <tt>data_center.prc</tt>
           <LI> <tt>get_tbl_to_cvt.prc</tt>            
           <LI> <tt>user_startup.prc</tt>
           <LI> <tt>display_next_page.prc</tt>      
           <LI> <tt>load_app.prc</tt>            
           <LI> <tt>ut_setupevent.prc</tt>
           <LI> <tt>file_compare.prc</tt>
           <LI> <tt>load_start_app.prc</tt>
           <LI> <tt>ut_setupevents.prc</tt>
           <LI> <tt>fill_in_spacecraft_status.prc</tt>  
           <LI> <tt>load_table.prc</tt>
         </UL>

     <LI> Create a link to the following files located in the 
          appropriate flight software directory(ies). The 
          directories listed below are the locations in the 
          cFE MKS repository. The actual locations may vary 
          depending upon the mission or OS.
          \verbatim
          ln -s .../fsw/Build/inc/app_mission_cfg.h .
          ln -s .../fsw/Build/inc/cfe_mission_cfg.h .
          ln -s .../fsw/Build/cpu3/cfe/config/inc/cfe_platform_cfg.h .
          ln -s .../fsw/Build/cpu3/cfe/config/inc /osconfig.h .
          \endverbatim

     <LI> Change the file permissions on all procs so that 
          they are writable. (<tt>chmod 666 *.prc</tt>)
     <LI> Create links to the appropriate flight software 
          <tt>*events.h</tt> files that are included in the 
          most test procedure files. 
          \verbatim
          ln -s .../fsw/cfe-core/src/inc/*events.h .
          ln -s .../fsw/cfe-apps/to/to_events.h .
          ln -s .../fsw/cfe-apps/tst_es/tst_es_events.h .
          ln -s .../fsw/cfe-apps/tst_evs/tst_evs_events.h .
          ln -s .../fsw/cfe-apps/tst_sb/tst_sb_events.h .
          ln -s .../fsw/cfe-apps/tst_tbl/tst_tbl_events.h .
          ln -s .../fsw/cfe-apps/tst_tbl2/tst_tbl2_events.h .
          ln -s .../fsw/cfe-apps/tst_time/tst_time_events.h .
          \endverbatim
  </OL>

  <CENTER> <H4> Other Local Directories </H4> </CENTER>

  <OL>
     <LI> Extract the local <tt>'data'</tt>, <tt>'image'</tt>, 
          and <tt>'tools'</tt> files (if any) from MKS into 
          the DESTINATION  <tt>'data'</tt>, <tt>'image'</tt>, 
          and <tt>'tools'</tt> directories.
     <LI> Change the file permissions to the appropriate level 
          for any files extracted above.
     <LI> Enter the following commands to create other required 
          directories:
          \verbatim
          mkdir test_logs
          mkdir apps
          cd apps
          mkdir cpu1
          mkdir cpu2
          mkdir cpu3
          \endverbatim

     <LI> Copy the test application object files from <tt>cfelnx</tt>
          to the <tt>apps/cpux</tt> directories.
          <B>NOTE:</B> This step requires a developer account on 
          <tt>cfelnx</tt> with the privileges to create the test 
          application object files required to execute test applications.
  </OL>

  Next: \ref cfedeploy_6_3 <BR>
  Prev: \ref cfedeploy_6_1 <BR>
  Up To: \ref cfedeploy_6
**/

/**
  \page cfedeploy_6_3 Creating the Command and Telemetry Databases

  <OL>
     <LI> In the <tt>'rdl/template'</tt> directory, generate all rdl files 
          using the following perl script:
          \verbatim
          -> create_rdls <spacecraft>
          \endverbatim
          Use <tt>""</tt> in place of the <tt>spacecraft</tt> if you want it omitted.
     <LI> Move the generated rdl files from the template directory up one 
          directory to the rdl directory.
     <LI> Move up to the <tt>'rdl'</tt> directory by entering <tt>'cd ..'</tt>
          at the command prompt.
     <LI> Rename the following <tt>"table"</tt> rdls:
          \verbatim
          mv scx__cpu1_tst_es_4004.rdl scx_table_cpu1_tst_es_4004.rdl
          mv scx__cpu1_tst_es_4005.rdl scx_table_cpu1_tst_es_4005.rdl
          mv scx__cpu1_tst_tbl_4002.rdl scx_table_cpu1_tst_tbl_4002p.rdl
          mv scx__cpu2_tst_es_4034.rdl scx_table_cpu2_tst_es_4034.rdl
          mv scx__cpu2_tst_es_4035.rdl scx_table_cpu2_tst_es_4035.rdl
          mv scx__cpu2_tst_tbl_4032.rdl scx_table_cpu2_tst_tbl_4032p.rdl
          mv scx__cpu3_tst_es_4066.rdl scx_table_cpu3_tst_es_4066.rdl
          mv scx__cpu3_tst_es_4067.rdl scx_table_cpu3_tst_es_4067.rdl
          mv scx__cpu3_tst_tbl_4064.rdl scx_table_cpu3_tst_tbl_4064p.rdl
          \endverbatim
     <LI> Make the following manual changes in order to ensure that 
          the TST_TBL table rdls will compile:
        
        - Edit the <tt>scx_table_cpu1_tst_tbl_4002p.rdl</tt> file.
        <OL>
           <LI>	In the file header comments, change the second Packet 
                Application ID: comment from 4002 to 4003 and the hex 
                value from '0FA2' to '0FA3'.
           <LI>	Find the Packet specification for Table 2. The packet 
                specification starts with PACKET Pxxxx APID=yyyy. Change 
                the specification from "P0FA2 APID=4002" to 
                "P0FA3 APID=4003".
           <LI>	Save the changes and exit the file editor.
        </OL>
        - Edit the <tt>scx_table_cpu2_tst_tbl_4032p.rdl</tt> file.
        <OL>
           <LI>	In the file header comments, change the second Packet 
                Application ID: comment from 4002 to 4003 and the hex 
                value from '0FA2' to '0FA3'.
           <LI>	Find the Packet specification for Table 2. The packet 
                specification starts with PACKET Pxxxx APID=yyyy. Change 
                the specification from "P0FA2 APID=4002" to "P0FA3 APID=4003".
           <LI>	Save the changes and exit the file editor.
        </OL>
        - Edit the <tt>scx_table_cpu3_tst_tbl_4064p.rdl</tt> file.
        <OL>
           <LI>	In the file header comments, change the second Packet 
                Application ID: comment from 4064 to 4065 and the hex 
                value from '0FE0' to '0FE1'.
           <LI>	Find the Packet specification for Table 2. The packet 
                specification starts with PACKET Pxxxx APID=yyyy. Change 
                the specification from "P0FE0 APID=4064" to 
                "P0FE1 APID=4065".
           <LI>	Save the changes and exit the file editor.
        </OL>
     <LI> Make sure that the <tt>'cfe_user_tlm.rdl'</tt> and 
          <tt>'cfe_user_cmd.rdl'</tt> files contain entries to match 
          the file names in the directory. If they do not, you must 
          edit these files so that they do match the files in the directory.
     <LI> Compile the command database by entering <tt>'dbcmpcmd'</tt> on the 
          command line. If there were NO errors, proceed to the next step. 
          Otherwise, correct any errors and repeat until a clean compile is 
          achieved.
     <LI> Load the command database by entering <tt>'dbloadcmd'</tt> on 
          the command line.
     <LI> Compile the telemetry database by entering <tt>'dbcmptlm'</tt> on the 
          command line. If there were NO errors, proceed to the next step. 
          Otherwise, correct any errors and repeat until a clean compile is achieved.
     <LI> Load the telemetry database by entering <tt>'dbloadtlm'</tt> on the command line.
     <LI> Start or re-start ASIST. If you made changes to the existing databases, 
          you can verify your changes by opening the CMD or TLM Database Browser 
          and selecting the ID that you changed.
     <LI> Compile all the procs by entering the command 
          <tt>"stol_compiler <filename>"</tt>.
  </OL>
  Next: \ref cfedeploy_6_4 <BR>
  Prev: \ref cfedeploy_6_2 <BR>
  Up To: \ref cfedeploy_6
**/

/**
  \page cfedeploy_6_4 Generating the ASIST cFE Pages

  <OL>
     <LI> Extract the <tt>'*.fmt'</tt> files from MKS into the 
          DESTINATION <tt>'sam/fmt/template'</tt> directory.
     <LI> Generate template and / or page files from existing <tt>'.fmt'</tt>
          (page) files using the following command: 
          \verbatim
          -> makeallpages -b y y <spacecraft> <processor1> <processor2>, etc.
          \endverbatim
          
          <i>Use "" in place of the spacecraft if you want it omitted.</i>

     <LI> Move resulting <tt>'*.fmt'</tt> (page) files to <tt>'sam/fmt'</tt> directory.
     <LI> Extract the <tt>*.fmt</tt> files from MKS into the <tt>'sam/fmt'</tt> directory.
     <LI> Start or re-start ASIST to verify that the pages you just created will display.
  </OL>
  
  Prev:  \ref cfedeploy_6_3 <BR>
  Up To: \ref cfedeploy_6
**/
