        -:    0:Source:/mnt/hgfs/Projects/Repo_cFE/fsw/cfe-core/src/time/cfe_time_task.c
        -:    0:Programs:4
        -:    1:/*
        -:    2:** $Id: cfe_time_task.c.gcov 1.3 2014/09/08 13:33:01GMT-05:00 rmcgraw Exp  $
        -:    3:**
        -:    4:**
        -:    5:**      Copyright (c) 2004-2012, United States government as represented by the
        -:    6:**      administrator of the National Aeronautics Space Administration.
        -:    7:**      All rights reserved. This software(cFE) was created at NASA's Goddard
        -:    8:**      Space Flight Center pursuant to government contracts.
        -:    9:**
        -:   10:**      This is governed by the NASA Open Source Agreement and may be used,
        -:   11:**      distributed and modified only pursuant to the terms of that agreement.
        -:   12:**
        -:   13:**
        -:   14:**
        -:   15:**
        -:   16:** Subsystem: cFE TIME Task
        -:   17:**
        -:   18:** Author: S. Walling (Microtel)
        -:   19:**
        -:   20:** Notes:
        -:   21:**
        -:   22:** $Log: cfe_time_task.c.gcov  $
        -:   22:** Revision 1.3 2014/09/08 13:33:01GMT-05:00 rmcgraw 
        -:   22:** DCR22107:26 TIME Unit Test baseline for cFE 6.4.0.
        -:   23:** Revision 1.8 2014/04/14 11:51:39EDT lwalling
        -:   24:** Created platform config definitions for Time 1HZ and Time TONE task priorities and stack sizes
        -:   25:** Revision 1.7 2012/09/28 16:31:14EDT aschoeni
        -:   26:** Removed Interrupt Enable fixme
        -:   27:** Revision 1.6 2012/01/18 16:33:35EST jmdagost
        -:   28:** Updated no-op event msg to include cFE version numbers.
        -:   29:** Revision 1.5 2012/01/13 12:21:35EST acudmore
        -:   30:** Changed license text to reflect open source
        -:   31:** Revision 1.4 2011/11/30 15:10:04EST jmdagost
        -:   32:** Replaced ifdef/ifndef preprocessor tests with if...==TRUE/if...!=TRUE tests
        -:   33:** Revision 1.3 2009/06/08 16:13:07EDT lwalling
        -:   34:** Change 1Hz adjust cmd arg from micro-seconds to sub-seconds
        -:   35:** Revision 1.2 2008/07/31 15:41:26EDT apcudmore
        -:   36:** Added execution counter API:
        -:   37:**   -- Added execution counter to ES internal task data
        -:   38:**   -- Added code to increment counter in RunLoop
        -:   39:**   -- Added code to report counter in GetInfo APIs
        -:   40:**   -- Added API to increment counter for child tasks
        -:   41:**   -- Added code to cFE Core apps to increment counters.
        -:   42:** Revision 1.1 2008/04/17 08:05:39EDT ruperera
        -:   43:** Initial revision
        -:   44:** Member added to project c:/MKSDATA/MKS-REPOSITORY/MKS-CFE-PROJECT/fsw/cfe-core/src/time/project.pj
        -:   45:** Revision 1.28 2007/09/21 15:40:15EDT David Kobe (dlkobe)
        -:   46:** Modified pointer type definitions to eliminate Linux gcc compile warnings
        -:   47:** Revision 1.27 2007/07/18 10:23:55EDT njyanchik
        -:   48:** I changed the 'Result' variable to 'Status in the ifdef.
        -:   49:** Revision 1.26 2007/05/15 11:00:14EDT rjmcgraw
        -:   50:** DCR78:11 Exit main loop for CFE_SB_RcvMsg errors
        -:   51:** Revision 1.25 2007/04/27 16:59:26EDT rjmcgraw
        -:   52:** DCR2987:4 Standardize task init error code
        -:   53:** Revision 1.24 2007/04/27 12:31:04EDT njyanchik
        -:   54:** I changed EVS and TIME to not have a telemetry counter for SB pipe reads in the main loop.
        -:   55:** Instead, I have added a syslog message to state the problem
        -:   56:** Revision 1.23 2007/04/13 16:22:05EDT apcudmore
        -:   57:** Changed EarlyInit function prototype to return int32 status.
        -:   58:** Revision 1.22 2007/04/11 11:02:05EDT njyanchik
        -:   59:** Remove the TaskDelay in the main loop for TIME. I also addeda counterin telemtry that will
        -:   60:** notify the ground of an error in reading the command pipe.
        -:   61:** Revision 1.21 2007/04/09 14:47:52EDT rjmcgraw
        -:   62:** Changed names of performance ids to include CFE_
        -:   63:** Revision 1.20 2007/02/01 16:10:03EST rjmcgraw
        -:   64:** Changed time and tone pkt subscriptions to local for server
        -:   65:** Revision 1.19 2006/11/01 11:33:17EST njyanchik
        -:   66:** This change removes any references to the CDS in TIME. TIME now uses  the ES
        -:   67:** Reset Area to store its critial variables. this was due to an issue of trying to call
        -:   68:** CDS functions before apps were registered (in the EarlyInit call).
        -:   69:** Revision 1.18 2006/07/28 09:17:15GMT-05:00 njyanchik
        -:   70:** Fix of LDRA errors
        -:   71:** Revision 1.17 2006/06/21 13:24:12EDT kkaudra
        -:   72:** Removed cfe_es_perf.h
        -:   73:** Revision 1.16 2006/06/13 16:28:07EDT rjmcgraw
        -:   74:** osperf to perf changes
        -:   75:*/
        -:   76:
        -:   77:
        -:   78:/*
        -:   79:** Required header files...
        -:   80:*/
        -:   81:#include "cfe_time_utils.h"
        -:   82:#include "cfe_version.h"
        -:   83:
        -:   84:/*
        -:   85:** Time task global data...
        -:   86:*/
        -:   87:CFE_TIME_TaskData_t CFE_TIME_TaskData;
        -:   88:
        -:   89:
        -:   90:/*
        -:   91:** Local function prototypes...
        -:   92:**
        -:   93:** Note: Except for the early API initialization and main
        -:   94:**       task entry point functions (which are specified
        -:   95:**       in the ES startup script), none of the following
        -:   96:**       functions are called from any other source module.
        -:   97:*/
        -:   98:int32  CFE_TIME_EarlyInit(void);
        -:   99:void  CFE_TIME_TaskMain(void);
        -:  100:int32 CFE_TIME_TaskInit(void);
        -:  101:void  CFE_TIME_TaskPipe(CFE_SB_MsgPtr_t MessagePtr);
        -:  102:
        -:  103:/*
        -:  104:** Command handler for "HK request"...
        -:  105:*/
        -:  106:void  CFE_TIME_HousekeepingCmd(void);
        -:  107:
        -:  108:/*
        -:  109:** Command handler for "tone signal detected"...
        -:  110:*/
        -:  111:void  CFE_TIME_ToneSignalCmd(void);
        -:  112:
        -:  113:/*
        -:  114:** Command handler for "time at the tone"...
        -:  115:*/
        -:  116:void  CFE_TIME_ToneDataCmd(CFE_SB_MsgPtr_t MessagePtr);
        -:  117:
        -:  118:/*
        -:  119:** Command handler for "fake tone"...
        -:  120:*/
        -:  121:#if (CFE_TIME_CFG_FAKE_TONE == TRUE)
        -:  122:void CFE_TIME_FakeToneCmd(void);
        -:  123:#endif
        -:  124:
        -:  125:/*
        -:  126:** Command handler for "request time at the tone"...
        -:  127:**
        -:  128:** Note: This command (sent by the scheduler) is used to
        -:  129:**       signal that now is the right time (in relation
        -:  130:**       to the "real" tone signal) for a Time Server to
        -:  131:**       send the "time at the tone" data packet.  We do
        -:  132:**       not need (or want) this command if we are not a
        -:  133:**       Time Server, or if we are configured to operate
        -:  134:**       in "fake tone" mode, or if we are configured to
        -:  135:**       get time data from an external source.
        -:  136:*/
        -:  137:#if (CFE_TIME_CFG_SERVER == TRUE)
        -:  138:  #if (CFE_TIME_CFG_SOURCE != TRUE)
        -:  139:    #if (CFE_TIME_CFG_FAKE_TONE != TRUE)
        -:  140:void CFE_TIME_ToneSendCmd(void);
        -:  141:    #endif
        -:  142:  #endif
        -:  143:#endif
        -:  144:
        -:  145:/*
        -:  146:** Ground command handlers...
        -:  147:*/
        -:  148:void CFE_TIME_NoopCmd(void);
        -:  149:void CFE_TIME_ResetCmd(void);
        -:  150:void CFE_TIME_DiagCmd(void);
        -:  151:void CFE_TIME_SetStateCmd(CFE_SB_MsgPtr_t MessagePtr);
        -:  152:void CFE_TIME_SetSourceCmd(CFE_SB_MsgPtr_t MessagePtr);
        -:  153:void CFE_TIME_SetSignalCmd(CFE_SB_MsgPtr_t MessagePtr);
        -:  154:void CFE_TIME_SetDelayCmd(CFE_SB_MsgPtr_t MessagePtr, int16 Direction);
        -:  155:void CFE_TIME_SetTimeCmd(CFE_SB_MsgPtr_t MessagePtr);
        -:  156:void CFE_TIME_SetMETCmd(CFE_SB_MsgPtr_t MessagePtr);
        -:  157:void CFE_TIME_SetSTCFCmd(CFE_SB_MsgPtr_t MessagePtr);
        -:  158:void CFE_TIME_SetLeapsCmd(CFE_SB_MsgPtr_t MessagePtr);
        -:  159:void CFE_TIME_AdjustCmd(CFE_SB_MsgPtr_t MessagePtr, int16 Direction);
        -:  160:void CFE_TIME_1HzAdjCmd(CFE_SB_MsgPtr_t MessagePtr, int16 Direction);
        -:  161:
        -:  162:
        -:  163:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  164:/*                                                                 */
        -:  165:/* CFE_TIME_EarlyInit() -- API initialization before any tasks     */
        -:  166:/*                                                                 */
        -:  167:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  168:
        1:  169:int32 CFE_TIME_EarlyInit(void)
        -:  170:{
        -:  171:    /*
        -:  172:    ** Initialize global Time Services data...
        -:  173:    */
        1:  174:    CFE_TIME_InitData();
        -:  175:
        1:  176:    return ( CFE_SUCCESS);
        -:  177:
        -:  178:} /* End of CFE_TIME_EarlyInit() */
        -:  179:
        -:  180:
        -:  181:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  182:/*                                                                 */
        -:  183:/* CFE_TIME_TaskMain() -- Task entry point and main process loop   */
        -:  184:/*                                                                 */
        -:  185:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  186:
        2:  187:void CFE_TIME_TaskMain(void)
        -:  188:{
        -:  189:    int32  Status;
        -:  190:
        2:  191:    CFE_ES_PerfLogEntry(CFE_TIME_MAIN_PERF_ID);
        -:  192:
        2:  193:    Status = CFE_TIME_TaskInit();
        -:  194:
        2:  195:    if(Status != CFE_SUCCESS)
        -:  196:    {
        1:  197:      CFE_ES_WriteToSysLog("TIME:Application Init Failed,RC=0x%08X\n", Status);
        1:  198:      CFE_ES_PerfLogExit(CFE_TIME_MAIN_PERF_ID);
        -:  199:      /* Note: CFE_ES_ExitApp will not return */
        1:  200:      CFE_ES_ExitApp(CFE_ES_CORE_APP_INIT_ERROR);
        -:  201:    }/* end if */
        -:  202:
        -:  203:    /* Main loop */
        6:  204:    while (Status == CFE_SUCCESS)
        -:  205:    {
        -:  206:
        -:  207:      /* Increment the Main task Execution Counter */
        2:  208:      CFE_ES_IncrementTaskCounter();
        -:  209:
        2:  210:      CFE_ES_PerfLogExit(CFE_TIME_MAIN_PERF_ID);
        -:  211:
        -:  212:      /* Pend on receipt of packet */
        2:  213:      Status = CFE_SB_RcvMsg(&CFE_TIME_TaskData.MsgPtr,
        2:  214:                              CFE_TIME_TaskData.CmdPipe,
        -:  215:                              CFE_SB_PEND_FOREVER);
        -:  216:
        2:  217:      CFE_ES_PerfLogEntry(CFE_TIME_MAIN_PERF_ID);
        -:  218:
        2:  219:      if (Status == CFE_SUCCESS)
        -:  220:      {
        -:  221:          /* Process cmd pipe msg */
        1:  222:          CFE_TIME_TaskPipe(CFE_TIME_TaskData.MsgPtr);
        -:  223:      }else{
        1:  224:          CFE_ES_WriteToSysLog("TIME:Error reading cmd pipe,RC=0x%08X\n",Status);
        -:  225:      }/* end if */
        -:  226:
        -:  227:    }/* end while */
        -:  228:
        -:  229:    /* while loop exits only if CFE_SB_RcvMsg returns error */
        2:  230:    CFE_ES_ExitApp(CFE_ES_CORE_APP_RUNTIME_ERROR);
        -:  231:
        2:  232:} /* end CFE_TIME_TaskMain */
        -:  233:
        -:  234:
        -:  235:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  236:/*                                                                 */
        -:  237:/* CFE_TIME_TaskInit() -- Time task initialization                 */
        -:  238:/*                                                                 */
        -:  239:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  240:
       16:  241:int32 CFE_TIME_TaskInit(void)
        -:  242:{
       16:  243:    int32 Status = CFE_SUCCESS;
        -:  244:
       16:  245:    Status = CFE_ES_RegisterApp();
       16:  246:    if(Status != CFE_SUCCESS)
        -:  247:    {
        2:  248:      CFE_ES_WriteToSysLog("TIME:Call to CFE_ES_RegisterApp Failed:RC=0x%08X\n",Status);
        2:  249:      return Status;
        -:  250:    }/* end if */
        -:  251:
       14:  252:    Status = CFE_EVS_Register(NULL, 0, 0);
       14:  253:    if(Status != CFE_SUCCESS)
        -:  254:    {
        1:  255:      CFE_ES_WriteToSysLog("TIME:Call to CFE_EVS_Register Failed:RC=0x%08X\n",Status);
        1:  256:      return Status;
        -:  257:    }/* end if */
        -:  258:
       13:  259:    Status = OS_BinSemCreate(&CFE_TIME_TaskData.ToneSemaphore,
        -:  260:                              CFE_TIME_SEM_TONE_NAME,
        -:  261:                              CFE_TIME_SEM_VALUE,
        -:  262:                              CFE_TIME_SEM_OPTIONS);
       13:  263:    if(Status != CFE_SUCCESS)
        -:  264:    {
        1:  265:      CFE_ES_WriteToSysLog("TIME:Error creating tone semaphore:RC=0x%08X\n",Status);
        1:  266:      return Status;
        -:  267:    }/* end if */
        -:  268:
       12:  269:    Status = OS_BinSemCreate(&CFE_TIME_TaskData.LocalSemaphore,
        -:  270:                              CFE_TIME_SEM_1HZ_NAME,
        -:  271:                              CFE_TIME_SEM_VALUE,
        -:  272:                              CFE_TIME_SEM_OPTIONS);
       12:  273:    if(Status != CFE_SUCCESS)
        -:  274:    {
        1:  275:      CFE_ES_WriteToSysLog("TIME:Error creating local semaphore:RC=0x%08X\n",Status);
        1:  276:      return Status;
        -:  277:    }/* end if */
        -:  278:
        -:  279:
       11:  280:    Status = CFE_ES_CreateChildTask(&CFE_TIME_TaskData.ToneTaskID,
        -:  281:                                     CFE_TIME_TASK_TONE_NAME,
        -:  282:                                     CFE_TIME_Tone1HzTask,
        -:  283:                                     CFE_TIME_TASK_STACK_PTR,
        -:  284:                                     CFE_TIME_TONE_TASK_STACK_SIZE,
        -:  285:                                     CFE_TIME_TONE_TASK_PRIORITY,
        -:  286:                                     CFE_TIME_TASK_FLAGS);
       11:  287:    if(Status != CFE_SUCCESS)
        -:  288:    {
        1:  289:      CFE_ES_WriteToSysLog("TIME:Error creating tone 1Hz child task:RC=0x%08X\n",Status);
        1:  290:      return Status;
        -:  291:    }/* end if */
        -:  292:
        -:  293:
       10:  294:    Status = CFE_ES_CreateChildTask(&CFE_TIME_TaskData.LocalTaskID,
        -:  295:                                     CFE_TIME_TASK_1HZ_NAME,
        -:  296:                                     CFE_TIME_Local1HzTask,
        -:  297:                                     CFE_TIME_TASK_STACK_PTR,
        -:  298:                                     CFE_TIME_1HZ_TASK_STACK_SIZE,
        -:  299:                                     CFE_TIME_1HZ_TASK_PRIORITY,
        -:  300:                                     CFE_TIME_TASK_FLAGS);
       10:  301:    if(Status != CFE_SUCCESS)
        -:  302:    {
        1:  303:      CFE_ES_WriteToSysLog("TIME:Error creating local 1Hz child task:RC=0x%08X\n",Status);
        1:  304:      return Status;
        -:  305:    }/* end if */
        -:  306:
        -:  307:
        9:  308:    Status = CFE_SB_CreatePipe(&CFE_TIME_TaskData.CmdPipe,
        9:  309:                                CFE_TIME_TaskData.PipeDepth,
        -:  310:                                CFE_TIME_TaskData.PipeName);
        9:  311:    if(Status != CFE_SUCCESS)
        -:  312:    {
        1:  313:      CFE_ES_WriteToSysLog("TIME:Error creating cmd pipe:RC=0x%08X\n",Status);
        1:  314:      return Status;
        -:  315:    }/* end if */
        -:  316:
        -:  317:
        8:  318:    Status = CFE_SB_Subscribe(CFE_TIME_SEND_HK_MID,
        8:  319:                              CFE_TIME_TaskData.CmdPipe);
        8:  320:    if(Status != CFE_SUCCESS)
        -:  321:    {
        1:  322:      CFE_ES_WriteToSysLog("TIME:Error subscribing to HK Request:RC=0x%08X\n",Status);
        1:  323:      return Status;
        -:  324:    }/* end if */
        -:  325:
        -:  326:
        -:  327:    /*
        -:  328:    ** Subscribe to time at the tone "signal" commands...
        -:  329:    */
        -:  330:    #if (CFE_TIME_CFG_CLIENT == TRUE)
        -:  331:    Status = CFE_SB_Subscribe(CFE_TIME_TONE_CMD_MID,
        -:  332:                              CFE_TIME_TaskData.CmdPipe);
        -:  333:    #endif
        -:  334:
        -:  335:    #if (CFE_TIME_CFG_SERVER == TRUE)
        7:  336:    Status = CFE_SB_SubscribeLocal(CFE_TIME_TONE_CMD_MID,
        7:  337:                              CFE_TIME_TaskData.CmdPipe,4);
        -:  338:    #endif
        7:  339:    if(Status != CFE_SUCCESS)
        -:  340:    {
        1:  341:      CFE_ES_WriteToSysLog("TIME:Error subscribing to tone cmd:RC=0x%08X\n",Status);
        1:  342:      return Status;
        -:  343:    }/* end if */
        -:  344:
        -:  345:
        -:  346:    /*
        -:  347:    ** Subscribe to time at the tone "data" commands...
        -:  348:    */
        -:  349:    #if (CFE_TIME_CFG_CLIENT == TRUE)
        -:  350:    Status = CFE_SB_Subscribe(CFE_TIME_DATA_CMD_MID,
        -:  351:                              CFE_TIME_TaskData.CmdPipe);
        -:  352:    #endif
        -:  353:
        -:  354:    #if (CFE_TIME_CFG_SERVER == TRUE)
        6:  355:    Status = CFE_SB_SubscribeLocal(CFE_TIME_DATA_CMD_MID,
        6:  356:                              CFE_TIME_TaskData.CmdPipe,4);
        -:  357:    #endif
        6:  358:    if(Status != CFE_SUCCESS)
        -:  359:    {
        1:  360:      CFE_ES_WriteToSysLog("TIME:Error subscribing to time data cmd:RC=0x%08X\n",Status);
        1:  361:      return Status;
        -:  362:    }/* end if */
        -:  363:
        -:  364:
        -:  365:    /*
        -:  366:    ** Subscribe to "fake" tone signal commands...
        -:  367:    */
        -:  368:    #if (CFE_TIME_CFG_FAKE_TONE == TRUE)
        -:  369:
        -:  370:    #if (CFE_TIME_CFG_CLIENT == TRUE)
        -:  371:    Status = CFE_SB_Subscribe(CFE_TIME_FAKE_CMD_MID,
        -:  372:                              CFE_TIME_TaskData.CmdPipe);
        -:  373:    #endif
        -:  374:
        -:  375:    #if (CFE_TIME_CFG_SERVER == TRUE)
        5:  376:    Status = CFE_SB_SubscribeLocal(CFE_TIME_FAKE_CMD_MID,
        5:  377:                                   CFE_TIME_TaskData.CmdPipe,4);
        -:  378:    #endif
        -:  379:
        5:  380:    if(Status != CFE_SUCCESS)
        -:  381:    {
        1:  382:      CFE_ES_WriteToSysLog("TIME:Error subscribing to fake tone signal cmds:RC=0x%08X\n",Status);
        1:  383:      return Status;
        -:  384:    }/* end if */
        -:  385:    #endif
        -:  386:
        -:  387:
        -:  388:    /*
        -:  389:    ** Subscribe to time at the tone "request data" commands...
        -:  390:    */
        -:  391:    #if (CFE_TIME_CFG_SERVER == TRUE)
        -:  392:      #if (CFE_TIME_CFG_SOURCE != TRUE)
        -:  393:        #if (CFE_TIME_CFG_FAKE_TONE != TRUE)
        -:  394:
        -:  395:
        -:  396:   Status = CFE_SB_Subscribe(CFE_TIME_SEND_CMD_MID,
        -:  397:                                  CFE_TIME_TaskData.CmdPipe);
        -:  398:        if(Status != CFE_SUCCESS)
        -:  399:        {
        -:  400:          CFE_ES_WriteToSysLog("TIME:Error subscribing to time at the tone request data cmds:RC=0x%08X\n",Status);
        -:  401:          return Status;
        -:  402:        }/* end if */
        -:  403:
        -:  404:        #endif
        -:  405:      #endif
        -:  406:    #endif
        -:  407:
        -:  408:    /*
        -:  409:    ** Subscribe to Time task ground command packets...
        -:  410:    */
        4:  411:    Status = CFE_SB_Subscribe(CFE_TIME_CMD_MID,
        4:  412:                              CFE_TIME_TaskData.CmdPipe);
        4:  413:    if(Status != CFE_SUCCESS)
        -:  414:    {
        1:  415:      CFE_ES_WriteToSysLog("TIME:Error subscribing to time task gnd cmds:RC=0x%08X\n",Status);
        1:  416:      return Status;
        -:  417:    }/* end if */
        -:  418:
        -:  419:
        3:  420:    Status = CFE_EVS_SendEvent(CFE_TIME_INIT_EID,
        -:  421:                               CFE_EVS_INFORMATION,
        -:  422:                               "cFE TIME Initialized");
        3:  423:    if(Status != CFE_SUCCESS)
        -:  424:    {
        1:  425:      CFE_ES_WriteToSysLog("TIME:Error sending init event:RC=0x%08X\n",Status);
        1:  426:      return Status;
        -:  427:    }/* end if */
        -:  428:
        -:  429:    /*
        -:  430:    ** Select primary vs redundant tone interrupt signal...
        -:  431:    */
        -:  432:    #if (CFE_TIME_CFG_SIGNAL == TRUE)
        -:  433:    OS_SelectTone(CFE_TIME_TaskData.ClockSignal);
        -:  434:    #endif
        -:  435:
        2:  436:    return CFE_SUCCESS;
        -:  437:
        -:  438:} /* End of CFE_TIME_TaskInit() */
        -:  439:
        -:  440:
        -:  441:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  442:/*                                                                 */
        -:  443:/* CFE_TIME_TaskPipe() -- Process command pipe message             */
        -:  444:/*                                                                 */
        -:  445:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  446:
       42:  447:void CFE_TIME_TaskPipe(CFE_SB_MsgPtr_t MessagePtr)
        -:  448:{
        -:  449:    CFE_SB_MsgId_t MessageID;
        -:  450:    uint16 CommandCode;
        -:  451:
       42:  452:    MessageID = CFE_SB_GetMsgId(MessagePtr);
       42:  453:    switch (MessageID)
        -:  454:    {
        -:  455:        /*
        -:  456:        ** Housekeeping telemetry request...
        -:  457:        */
        -:  458:        case CFE_TIME_SEND_HK_MID:
        1:  459:            CFE_TIME_HousekeepingCmd();
        1:  460:            break;
        -:  461:
        -:  462:        /*
        -:  463:        ** Time at the tone "signal"...
        -:  464:        */
        -:  465:        case CFE_TIME_TONE_CMD_MID:
        2:  466:            CFE_TIME_ToneSignalCmd();
        2:  467:            break;
        -:  468:
        -:  469:        /*
        -:  470:        ** Time at the tone "data"...
        -:  471:        */
        -:  472:        case CFE_TIME_DATA_CMD_MID:
        5:  473:            CFE_TIME_ToneDataCmd(MessagePtr);
        5:  474:            break;
        -:  475:
        -:  476:        /*
        -:  477:        ** Simulate time at the tone "signal"...
        -:  478:        */
        -:  479:        #if (CFE_TIME_CFG_FAKE_TONE == TRUE)
        -:  480:        case CFE_TIME_FAKE_CMD_MID:
        2:  481:            CFE_TIME_FakeToneCmd();
        2:  482:            break;
        -:  483:        #endif
        -:  484:
        -:  485:        /*
        -:  486:        ** Request for time at the tone "data"...
        -:  487:        */
        -:  488:        #if (CFE_TIME_CFG_SERVER == TRUE)
        -:  489:          #if (CFE_TIME_CFG_SOURCE != TRUE)
        -:  490:            #if (CFE_TIME_CFG_FAKE_TONE != TRUE)
        -:  491:        case CFE_TIME_SEND_CMD_MID:
        -:  492:            CFE_TIME_ToneSendCmd();
        -:  493:            break;
        -:  494:            #endif
        -:  495:          #endif
        -:  496:        #endif
        -:  497:
        -:  498:        /*
        -:  499:        ** Time task ground commands...
        -:  500:        */
        -:  501:        case CFE_TIME_CMD_MID:
        -:  502:
       29:  503:            CommandCode = CFE_SB_GetCmdCode(MessagePtr);
       29:  504:            switch (CommandCode)
        -:  505:            {
        -:  506:                case CFE_TIME_NOOP_CC:
        1:  507:                    CFE_TIME_NoopCmd();
        1:  508:                    break;
        -:  509:
        -:  510:                case CFE_TIME_RESET_CC:
        1:  511:                    CFE_TIME_ResetCmd();
        1:  512:                    break;
        -:  513:
        -:  514:                case CFE_TIME_DIAG_TLM_CC:
        1:  515:                    CFE_TIME_DiagCmd();
        1:  516:                    break;
        -:  517:
        -:  518:                case CFE_TIME_SET_STATE_CC:
        4:  519:                    CFE_TIME_SetStateCmd(MessagePtr);
        4:  520:                    break;
        -:  521:
        -:  522:                case CFE_TIME_SET_SOURCE_CC:
        3:  523:                    CFE_TIME_SetSourceCmd(MessagePtr);
        3:  524:                    break;
        -:  525:
        -:  526:                case CFE_TIME_SET_SIGNAL_CC:
        3:  527:                    CFE_TIME_SetSignalCmd(MessagePtr);
        3:  528:                    break;
        -:  529:
        -:  530:                /*
        -:  531:                ** Time Clients process "tone delay" commands...
        -:  532:                */
        -:  533:                case CFE_TIME_ADD_DELAY_CC:
        2:  534:                    CFE_TIME_SetDelayCmd(MessagePtr, (int16) CFE_TIME_ADD_ADJUST);
        2:  535:                    break;
        -:  536:
        -:  537:                case CFE_TIME_SUB_DELAY_CC:
        1:  538:                    CFE_TIME_SetDelayCmd(MessagePtr, (int16) CFE_TIME_SUB_ADJUST);
        1:  539:                    break;
        -:  540:
        -:  541:                /*
        -:  542:                ** Time Servers process "set time" commands...
        -:  543:                */
        -:  544:                case CFE_TIME_SET_TIME_CC:
        2:  545:                    CFE_TIME_SetTimeCmd(MessagePtr);
        2:  546:                    break;
        -:  547:
        -:  548:                case CFE_TIME_SET_MET_CC:
        2:  549:                    CFE_TIME_SetMETCmd(MessagePtr);
        2:  550:                    break;
        -:  551:
        -:  552:                case CFE_TIME_SET_STCF_CC:
        2:  553:                    CFE_TIME_SetSTCFCmd(MessagePtr);
        2:  554:                    break;
        -:  555:
        -:  556:                case CFE_TIME_SET_LEAPS_CC:
        1:  557:                    CFE_TIME_SetLeapsCmd(MessagePtr);
        1:  558:                    break;
        -:  559:
        -:  560:                case CFE_TIME_ADD_ADJUST_CC:
        2:  561:                    CFE_TIME_AdjustCmd(MessagePtr, (int16) CFE_TIME_ADD_ADJUST);
        2:  562:                    break;
        -:  563:
        -:  564:                case CFE_TIME_SUB_ADJUST_CC:
        1:  565:                    CFE_TIME_AdjustCmd(MessagePtr,  (int16) CFE_TIME_SUB_ADJUST);
        1:  566:                    break;
        -:  567:
        -:  568:                case CFE_TIME_ADD_1HZADJ_CC:
        1:  569:                    CFE_TIME_1HzAdjCmd(MessagePtr, (int16) CFE_TIME_ADD_ADJUST);
        1:  570:                    break;
        -:  571:
        -:  572:                case CFE_TIME_SUB_1HZADJ_CC:
        1:  573:                    CFE_TIME_1HzAdjCmd(MessagePtr, (int16) CFE_TIME_SUB_ADJUST);
        1:  574:                    break;
        -:  575:
        -:  576:                default:
        -:  577:
        1:  578:                    CFE_TIME_TaskData.ErrCounter++;
        1:  579:                    CFE_EVS_SendEvent(CFE_TIME_CC_ERR_EID, CFE_EVS_ERROR,
        -:  580:                             "Invalid command code -- ID = 0x%X, CC = %d",
        -:  581:                                      MessageID, CommandCode);
        -:  582:                    break;
        -:  583:            } /* switch (CFE_TIME_CMD_MID -- command code)*/
       29:  584:            break;
        -:  585:
        -:  586:        default:
        -:  587:
        -:  588:            /*
        -:  589:            ** Note: we only increment the command error counter when
        -:  590:            **    processing CFE_TIME_CMD_MID commands...
        -:  591:            */
        3:  592:            CFE_EVS_SendEvent(CFE_TIME_ID_ERR_EID, CFE_EVS_ERROR,
        -:  593:                             "Invalid message ID -- ID = 0x%X",
        -:  594:                              MessageID);
        -:  595:            break;
        -:  596:
        -:  597:    } /* switch (message ID) */
        -:  598:
       42:  599:    return;
        -:  600:
        -:  601:} /* End of CFE_TIME_TaskPipe() */
        -:  602:
        -:  603:
        -:  604:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  605:/*                                                                 */
        -:  606:/* CFE_TIME_HousekeepingCmd() -- On-board command (HK request)     */
        -:  607:/*                                                                 */
        -:  608:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  609:
        1:  610:void CFE_TIME_HousekeepingCmd(void)
        -:  611:{
        -:  612:    CFE_TIME_Reference_t Reference;
        -:  613:
        -:  614:    /*
        -:  615:    ** Get reference time values (local time, time at tone, etc.)...
        -:  616:    */
        1:  617:    CFE_TIME_GetReference(&Reference);
        -:  618:
        -:  619:    /*
        -:  620:    ** Update TIME portion of Critical Data Store...
        -:  621:    */
        1:  622:    CFE_TIME_UpdateResetVars(&Reference);
        -:  623:
        -:  624:    /*
        -:  625:    ** Collect housekeeping data from Time Services utilities...
        -:  626:    */
        1:  627:    CFE_TIME_GetHkData(&Reference);
        -:  628:
        -:  629:    /*
        -:  630:    ** Send housekeeping telemetry packet...
        -:  631:    */
        1:  632:    CFE_SB_TimeStampMsg((CFE_SB_Msg_t *) &CFE_TIME_TaskData.HkPacket);
        1:  633:    CFE_SB_SendMsg((CFE_SB_Msg_t *) &CFE_TIME_TaskData.HkPacket);
        -:  634:
        -:  635:    /*
        -:  636:    ** Note: we only increment the command execution counter when
        -:  637:    **   processing CFE_TIME_CMD_MID commands...
        -:  638:    */
        1:  639:    return;
        -:  640:
        -:  641:} /* End of CFE_TIME_HousekeepingCmd() */
        -:  642:
        -:  643:
        -:  644:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  645:/*                                                                 */
        -:  646:/* CFE_TIME_ToneSignalCmd() -- Time at tone command (signal)       */
        -:  647:/*                                                                 */
        -:  648:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  649:
        2:  650:void CFE_TIME_ToneSignalCmd(void)
        -:  651:{
        -:  652:    /*
        -:  653:    ** Indication that tone signal occurred recently...
        -:  654:    */
        2:  655:    CFE_TIME_ToneSignal();
        -:  656:
        -:  657:    #if (CFE_TIME_CFG_SERVER == TRUE)
        -:  658:      #if (CFE_TIME_CFG_FAKE_TONE == TRUE)
        -:  659:    /*
        -:  660:    ** If we are simulating the tone signal, and we are the time
        -:  661:    **   server, and we have processed the simulated tone, then
        -:  662:    **   send time at the tone data...
        -:  663:    */
        2:  664:    CFE_TIME_ToneSend();
        -:  665:      #endif
        -:  666:    #endif
        -:  667:
        -:  668:    /*
        -:  669:    ** Note: we only increment the command execution counter when
        -:  670:    **   processing CFE_TIME_CMD_MID commands...
        -:  671:    */
        2:  672:    return;
        -:  673:
        -:  674:} /* End of CFE_TIME_ToneSignalCmd() */
        -:  675:
        -:  676:
        -:  677:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  678:/*                                                                 */
        -:  679:/* CFE_TIME_ToneDataCmd() -- Time at tone command (data)           */
        -:  680:/*                                                                 */
        -:  681:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  682:
        5:  683:void CFE_TIME_ToneDataCmd(CFE_SB_MsgPtr_t MessagePtr)
        -:  684:{
        -:  685:    /*
        -:  686:    ** This command packet contains "time at the tone" data...
        -:  687:    */
        5:  688:    CFE_TIME_ToneData((CFE_TIME_ToneDataCmd_t *) MessagePtr);
        -:  689:
        -:  690:    /*
        -:  691:    ** Note: we only increment the command execution counter when
        -:  692:    **   processing CFE_TIME_CMD_MID commands...
        -:  693:    */
        5:  694:    return;
        -:  695:
        -:  696:} /* End of CFE_TIME_ToneDataCmd() */
        -:  697:
        -:  698:
        -:  699:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  700:/*                                                                 */
        -:  701:/* CFE_TIME_FakeToneCmd() -- Simulated time at tone signal         */
        -:  702:/*                                                                 */
        -:  703:/* If we don't have a distributed tone signal and we are in a      */
        -:  704:/*    lab environment where time accuracy isn't important, then    */
        -:  705:/*    we can use a SB message to signal the tone.                  */
        -:  706:/*                                                                 */
        -:  707:/* Both the time server and clients may be configured to use       */
        -:  708:/*    the arrival time of the SB message as the tone (instead      */
        -:  709:/*    of a discrete interrupt signal).                             */
        -:  710:/*                                                                 */
        -:  711:/* This way the actual time of the tone is closer to being in      */
        -:  712:/*    sync and we can ignore the slight delays due to getting      */
        -:  713:/*    the tone command from the SB message queue since it will     */
        -:  714:/*    be the same for the server and clients.                      */
        -:  715:/*                                                                 */
        -:  716:/* This command is sent by the time server (might be us) while     */
        -:  717:/*    processing its local 1Hz interrupt task.                     */
        -:  718:/*                                                                 */
        -:  719:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  720:
        -:  721:#if (CFE_TIME_CFG_FAKE_TONE == TRUE)
        2:  722:void CFE_TIME_FakeToneCmd(void)
        -:  723:{
        -:  724:    /*
        -:  725:    ** Fake the call-back from the "real" h/w ISR...
        -:  726:    */
        2:  727:    CFE_TIME_Tone1HzISR();
        -:  728:
        -:  729:    /*
        -:  730:    ** Note: we only increment the command execution counter when
        -:  731:    **   processing CFE_TIME_CMD_MID commands...
        -:  732:    */
        2:  733:    return;
        -:  734:
        -:  735:} /* End of CFE_TIME_FakeToneCmd() */
        -:  736:#endif /* CFE_TIME_CFG_FAKE_TONE */
        -:  737:
        -:  738:
        -:  739:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  740:/*                                                                 */
        -:  741:/* CFE_TIME_ToneSendCmd() -- Time at tone command (send data)      */
        -:  742:/*                                                                 */
        -:  743:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  744:
        -:  745:#if (CFE_TIME_CFG_SERVER == TRUE)
        -:  746:  #if (CFE_TIME_CFG_SOURCE != TRUE)
        -:  747:    #if (CFE_TIME_CFG_FAKE_TONE != TRUE)
        -:  748:void CFE_TIME_ToneSendCmd(void)
        -:  749:{
        -:  750:    /*
        -:  751:    ** Request for "time at tone" data packet (probably scheduler)...
        -:  752:    */
        -:  753:    CFE_TIME_ToneSend();
        -:  754:
        -:  755:    /*
        -:  756:    ** Note: we only increment the command execution counter when
        -:  757:    **   processing CFE_TIME_CMD_MID commands...
        -:  758:    */
        -:  759:    return;
        -:  760:
        -:  761:} /* End of CFE_TIME_SendCmd() */
        -:  762:    #endif /* CFE_TIME_CFG_SERVER */
        -:  763:  #endif /* not CFE_TIME_CFG_SOURCE */
        -:  764:#endif /* not CFE_TIME_CFG_FAKE_TONE */
        -:  765:
        -:  766:
        -:  767:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  768:/*                                                                 */
        -:  769:/* CFE_TIME_NoopCmd() -- Time task ground command (NO-OP)          */
        -:  770:/*                                                                 */
        -:  771:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  772:
        1:  773:void CFE_TIME_NoopCmd(void)
        -:  774:{
        -:  775:
        1:  776:    CFE_TIME_TaskData.CmdCounter++;
        -:  777:
        1:  778:    CFE_EVS_SendEvent(CFE_TIME_NOOP_EID, CFE_EVS_INFORMATION,
        -:  779:                     "No-op command. cFE Version %d.%d.%d.%d",
        -:  780:                     CFE_MAJOR_VERSION,CFE_MINOR_VERSION,CFE_REVISION,CFE_MISSION_REV);
        -:  781:
        1:  782:    return;
        -:  783:
        -:  784:} /* End of CFE_TIME_NoopCmd() */
        -:  785:
        -:  786:
        -:  787:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  788:/*                                                                 */
        -:  789:/* CFE_TIME_ResetCmd() -- Time task ground command (reset counters)*/
        -:  790:/*                                                                 */
        -:  791:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  792:
        1:  793:void CFE_TIME_ResetCmd(void)
        -:  794:{
        -:  795:
        1:  796:    CFE_TIME_TaskData.CmdCounter = 0;
        1:  797:    CFE_TIME_TaskData.ErrCounter = 0;
        -:  798:
        1:  799:    CFE_TIME_TaskData.ToneMatchCount  = 0;
        1:  800:    CFE_TIME_TaskData.ToneMatchErrors = 0;
        -:  801:
        1:  802:    CFE_TIME_TaskData.ToneSignalCount = 0;
        1:  803:    CFE_TIME_TaskData.ToneDataCount   = 0;
        -:  804:
        1:  805:    CFE_TIME_TaskData.ToneIntCount    = 0;
        1:  806:    CFE_TIME_TaskData.ToneIntErrors   = 0;
        1:  807:    CFE_TIME_TaskData.ToneTaskCount   = 0;
        -:  808:
        1:  809:    CFE_TIME_TaskData.VersionCount    = 0;
        -:  810:
        1:  811:    CFE_TIME_TaskData.LocalIntCount   = 0;
        1:  812:    CFE_TIME_TaskData.LocalTaskCount  = 0;
        -:  813:
        1:  814:    CFE_TIME_TaskData.InternalCount   = 0;
        1:  815:    CFE_TIME_TaskData.ExternalCount   = 0;
        -:  816:
        1:  817:    CFE_EVS_SendEvent(CFE_TIME_RESET_EID, CFE_EVS_DEBUG,
        -:  818:                     "Reset Counters command");
        -:  819:
        1:  820:    return;
        -:  821:
        -:  822:} /* End of CFE_TIME_ResetCmd() */
        -:  823:
        -:  824:
        -:  825:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  826:/*                                                                 */
        -:  827:/* CFE_TIME_DiagCmd() -- Time task ground command (diagnostics)    */
        -:  828:/*                                                                 */
        -:  829:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  830:
        1:  831:void CFE_TIME_DiagCmd(void)
        -:  832:{
        1:  833:    CFE_TIME_TaskData.CmdCounter++;
        -:  834:
        -:  835:    /*
        -:  836:    ** Collect housekeeping data from Time Services utilities...
        -:  837:    */
        1:  838:    CFE_TIME_GetDiagData();
        -:  839:
        -:  840:    /*
        -:  841:    ** Send housekeeping telemetry packet...
        -:  842:    */
        1:  843:    CFE_SB_TimeStampMsg((CFE_SB_Msg_t *) &CFE_TIME_TaskData.DiagPacket);
        1:  844:    CFE_SB_SendMsg((CFE_SB_Msg_t *) &CFE_TIME_TaskData.DiagPacket);
        -:  845:
        1:  846:    CFE_EVS_SendEvent(CFE_TIME_DIAG_EID, CFE_EVS_DEBUG,
        -:  847:                     "Request diagnostics command");
        -:  848:
        1:  849:    return;
        -:  850:
        -:  851:} /* End of CFE_TIME_DiagCmd() */
        -:  852:
        -:  853:
        -:  854:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  855:/*                                                                 */
        -:  856:/* CFE_TIME_SetStateCmd() -- Time task command (set clock state)   */
        -:  857:/*                                                                 */
        -:  858:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  859:
        4:  860:void CFE_TIME_SetStateCmd(CFE_SB_MsgPtr_t MessagePtr)
        -:  861:{
        4:  862:    CFE_TIME_StateCmd_t *CommandPtr = (CFE_TIME_StateCmd_t *) MessagePtr;
        -:  863:    char *ClockStateText;
        -:  864:
        -:  865:    /*
        -:  866:    ** Verify command argument value (clock state)...
        -:  867:    */
       12:  868:    if ((CommandPtr->ClockState == CFE_TIME_INVALID) ||
        3:  869:        (CommandPtr->ClockState == CFE_TIME_VALID)   ||
        2:  870:        (CommandPtr->ClockState == CFE_TIME_FLYWHEEL))
        -:  871:    {
        3:  872:        CFE_TIME_SetState(CommandPtr->ClockState);
        -:  873:
        -:  874:        /*
        -:  875:        ** Select appropriate text for event message...
        -:  876:        */
        3:  877:        if (CommandPtr->ClockState == CFE_TIME_INVALID)
        -:  878:        {
        1:  879:            ClockStateText = "INVALID";
        -:  880:        }
        2:  881:        else if (CommandPtr->ClockState == CFE_TIME_VALID)
        -:  882:        {
        1:  883:            ClockStateText = "VALID";
        -:  884:        }
        -:  885:        else
        -:  886:        {
        1:  887:            ClockStateText = "FLYWHEEL";
        -:  888:        }
        -:  889:
        3:  890:        CFE_TIME_TaskData.CmdCounter++;
        3:  891:        CFE_EVS_SendEvent(CFE_TIME_STATE_EID, CFE_EVS_INFORMATION,
        -:  892:                         "Set Clock State = %s", ClockStateText);
        -:  893:    }
        -:  894:    else
        -:  895:    {
        1:  896:        CFE_TIME_TaskData.ErrCounter++;
        1:  897:        CFE_EVS_SendEvent(CFE_TIME_STATE_ERR_EID, CFE_EVS_ERROR,
        1:  898:                         "Invalid Clock State = 0x%X", CommandPtr->ClockState);
        -:  899:    }
        -:  900:
        4:  901:    return;
        -:  902:
        -:  903:} /* End of CFE_TIME_SetStateCmd() */
        -:  904:
        -:  905:
        -:  906:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  907:/*                                                                 */
        -:  908:/* CFE_TIME_SetSourceCmd() -- Time task command (set time source)  */
        -:  909:/*                                                                 */
        -:  910:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  911:
        3:  912:void CFE_TIME_SetSourceCmd(CFE_SB_MsgPtr_t MessagePtr)
        -:  913:{
        3:  914:    CFE_TIME_SourceCmd_t *CommandPtr = (CFE_TIME_SourceCmd_t *) MessagePtr;
        -:  915:
        -:  916:    #if (CFE_TIME_CFG_SOURCE == TRUE)
        -:  917:    char *TimeSourceText;
        -:  918:    #endif
        -:  919:
        -:  920:    /*
        -:  921:    ** Verify command argument value (time data source)...
        -:  922:    */
        7:  923:    if ((CommandPtr->TimeSource == CFE_TIME_USE_INTERN) ||
        2:  924:        (CommandPtr->TimeSource == CFE_TIME_USE_EXTERN))
        -:  925:    {
        -:  926:        #if (CFE_TIME_CFG_SOURCE == TRUE)
        -:  927:        /*
        -:  928:        ** Only systems configured to select source of time data...
        -:  929:        */
        -:  930:        CFE_TIME_TaskData.CmdCounter++;
        -:  931:
        -:  932:        CFE_TIME_SetSource(CommandPtr->TimeSource);
        -:  933:
        -:  934:        /*
        -:  935:        ** Select appropriate text for event message...
        -:  936:        */
        -:  937:        if (CommandPtr->TimeSource == CFE_TIME_USE_INTERN)
        -:  938:        {
        -:  939:            TimeSourceText = "INTERNAL";
        -:  940:        }
        -:  941:        else
        -:  942:        {
        -:  943:            TimeSourceText = "EXTERNAL";
        -:  944:        }
        -:  945:
        -:  946:        CFE_EVS_SendEvent(CFE_TIME_SOURCE_EID,
        -:  947:                          CFE_EVS_INFORMATION,
        -:  948:                         "Set Time Source = %s", TimeSourceText);
        -:  949:
        -:  950:        #else /* not CFE_TIME_CFG_SOURCE */
        -:  951:        /*
        -:  952:        ** We want to know if disabled commands are being sent...
        -:  953:        */
        2:  954:        CFE_TIME_TaskData.ErrCounter++;
        -:  955:
        2:  956:        CFE_EVS_SendEvent(CFE_TIME_SOURCE_CFG_EID, CFE_EVS_ERROR,
        -:  957:        "Set Source commands invalid without CFE_TIME_CFG_SOURCE set to TRUE");
        -:  958:
        -:  959:        #endif /* CFE_TIME_CFG_SOURCE */
        -:  960:    }
        -:  961:    else
        -:  962:    {
        -:  963:        /*
        -:  964:        ** Ground system database will prevent most of these errors...
        -:  965:        */
        1:  966:        CFE_TIME_TaskData.ErrCounter++;
        -:  967:
        1:  968:        CFE_EVS_SendEvent(CFE_TIME_SOURCE_ERR_EID, CFE_EVS_ERROR,
        1:  969:                         "Invalid Time Source = 0x%X", CommandPtr->TimeSource);
        -:  970:    }
        -:  971:
        3:  972:    return;
        -:  973:
        -:  974:} /* End of CFE_TIME_SetSourceCmd() */
        -:  975:
        -:  976:
        -:  977:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  978:/*                                                                 */
        -:  979:/* CFE_TIME_SetSignalCmd() -- Time task command (set tone source)  */
        -:  980:/*                                                                 */
        -:  981:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  982:
        3:  983:void CFE_TIME_SetSignalCmd(CFE_SB_MsgPtr_t MessagePtr)
        -:  984:{
        3:  985:    CFE_TIME_SignalCmd_t *CommandPtr = (CFE_TIME_SignalCmd_t *) MessagePtr;
        -:  986:
        -:  987:    #if (CFE_TIME_CFG_SIGNAL == TRUE)
        -:  988:    char *ToneSourceText;
        -:  989:    #endif
        -:  990:
        -:  991:    /*
        -:  992:    ** Verify command argument value (tone source)...
        -:  993:    */
        7:  994:    if ((CommandPtr->ToneSource == CFE_TIME_TONE_PRI) ||
        2:  995:        (CommandPtr->ToneSource == CFE_TIME_TONE_RED))
        -:  996:    {
        -:  997:        #if (CFE_TIME_CFG_SIGNAL == TRUE)
        -:  998:        /*
        -:  999:        ** Only systems configured to select tone signal...
        -: 1000:        */
        -: 1001:        CFE_TIME_TaskData.CmdCounter++;
        -: 1002:
        -: 1003:        CFE_TIME_SetSignal(CommandPtr->ToneSource);
        -: 1004:
        -: 1005:        /*
        -: 1006:        ** Select appropriate text for event message...
        -: 1007:        */
        -: 1008:        if (CommandPtr->ToneSource == CFE_TIME_TONE_PRI)
        -: 1009:        {
        -: 1010:            ToneSourceText = "PRIMARY";
        -: 1011:        }
        -: 1012:        else
        -: 1013:        {
        -: 1014:            ToneSourceText = "REDUNDANT";
        -: 1015:        }
        -: 1016:
        -: 1017:        CFE_EVS_SendEvent(CFE_TIME_SIGNAL_EID,
        -: 1018:                          CFE_EVS_INFORMATION,
        -: 1019:                         "Set Tone Source = %s", ToneSourceText);
        -: 1020:
        -: 1021:        #else /* not CFE_TIME_CFG_SIGNAL */
        -: 1022:        /*
        -: 1023:        ** We want to know if disabled commands are being sent...
        -: 1024:        */
        2: 1025:        CFE_TIME_TaskData.ErrCounter++;
        -: 1026:
        2: 1027:        CFE_EVS_SendEvent(CFE_TIME_SIGNAL_CFG_EID, CFE_EVS_ERROR,
        -: 1028:           "Set Signal commands invalid without CFE_TIME_CFG_SIGNAL set to TRUE");
        -: 1029:
        -: 1030:        #endif /* CFE_TIME_CFG_SIGNAL */
        -: 1031:    }
        -: 1032:    else
        -: 1033:    {
        -: 1034:        /*
        -: 1035:        ** Ground system database will prevent most of these errors...
        -: 1036:        */
        1: 1037:        CFE_TIME_TaskData.ErrCounter++;
        -: 1038:
        1: 1039:        CFE_EVS_SendEvent(CFE_TIME_SIGNAL_ERR_EID, CFE_EVS_ERROR,
        1: 1040:                         "Invalid Tone Source = 0x%X", CommandPtr->ToneSource);
        -: 1041:    }
        -: 1042:
        3: 1043:    return;
        -: 1044:
        -: 1045:} /* End of CFE_TIME_SetSignalCmd() */
        -: 1046:
        -: 1047:
        -: 1048:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1049:/*                                                                 */
        -: 1050:/* CFE_TIME_SetDelayCmd() -- Time task ground command (tone delay) */
        -: 1051:/*                                                                 */
        -: 1052:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1053:
        3: 1054:void CFE_TIME_SetDelayCmd(CFE_SB_MsgPtr_t MessagePtr, int16 Direction)
        -: 1055:{
        3: 1056:    CFE_TIME_TimeCmd_t *CommandPtr = (CFE_TIME_TimeCmd_t *) MessagePtr;
        -: 1057:
        -: 1058:    /*
        -: 1059:    ** Verify "micro-seconds" command argument...
        -: 1060:    */
        3: 1061:    if (CommandPtr->MicroSeconds < 1000000)
        -: 1062:    {
        -: 1063:        #if (CFE_TIME_CFG_CLIENT == TRUE)
        -: 1064:
        -: 1065:        CFE_TIME_SysTime_t Delay;
        -: 1066:
        -: 1067:        Delay.Seconds = CommandPtr->Seconds;
        -: 1068:        Delay.Subseconds = CFE_TIME_Micro2SubSecs(CommandPtr->MicroSeconds);
        -: 1069:
        -: 1070:        CFE_TIME_SetDelay(Delay, Direction);
        -: 1071:
        -: 1072:        CFE_TIME_TaskData.CmdCounter++;
        -: 1073:        CFE_EVS_SendEvent(CFE_TIME_DELAY_EID, CFE_EVS_INFORMATION,
        -: 1074:           "Set Tone Delay -- secs = %d, usecs = %d, ssecs = 0x%X, dir = %d",
        -: 1075:                          CommandPtr->Seconds, CommandPtr->MicroSeconds,
        -: 1076:                          CFE_TIME_Micro2SubSecs(CommandPtr->MicroSeconds),
        -: 1077:                          Direction);
        -: 1078:
        -: 1079:        #else /* not CFE_TIME_CFG_CLIENT */
        -: 1080:        /*
        -: 1081:        ** We want to know if disabled commands are being sent...
        -: 1082:        */
        2: 1083:        CFE_TIME_TaskData.ErrCounter++;
        -: 1084:
        2: 1085:        CFE_EVS_SendEvent(CFE_TIME_DELAY_CFG_EID, CFE_EVS_ERROR,
        -: 1086:        "Set Delay commands invalid without CFE_TIME_CFG_CLIENT set to TRUE");
        -: 1087:
        -: 1088:        #endif /* CFE_TIME_CFG_CLIENT */
        -: 1089:    }
        -: 1090:    else
        -: 1091:    {
        1: 1092:        CFE_TIME_TaskData.ErrCounter++;
        1: 1093:        CFE_EVS_SendEvent(CFE_TIME_DELAY_ERR_EID, CFE_EVS_ERROR,
        -: 1094:               "Invalid Tone Delay -- secs = %d, usecs = %d",
        -: 1095:                          CommandPtr->Seconds, CommandPtr->MicroSeconds);
        -: 1096:    }
        -: 1097:
        3: 1098:    return;
        -: 1099:
        -: 1100:} /* End of CFE_TIME_SetDelayCmd() */
        -: 1101:
        -: 1102:
        -: 1103:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1104:/*                                                                 */
        -: 1105:/* CFE_TIME_SetTimeCmd() -- Time task ground command (calc STCF)   */
        -: 1106:/*                                                                 */
        -: 1107:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1108:
        2: 1109:void CFE_TIME_SetTimeCmd(CFE_SB_MsgPtr_t MessagePtr)
        -: 1110:{
        2: 1111:    CFE_TIME_TimeCmd_t *CommandPtr = (CFE_TIME_TimeCmd_t *) MessagePtr;
        -: 1112:
        -: 1113:    /*
        -: 1114:    ** Verify "micro-seconds" command argument...
        -: 1115:    */
        2: 1116:    if (CommandPtr->MicroSeconds < 1000000)
        -: 1117:    {
        -: 1118:        #if (CFE_TIME_CFG_SERVER == TRUE)
        -: 1119:
        -: 1120:        CFE_TIME_SysTime_t NewTime;
        -: 1121:
        1: 1122:        NewTime.Seconds = CommandPtr->Seconds;
        1: 1123:        NewTime.Subseconds = CFE_TIME_Micro2SubSecs(CommandPtr->MicroSeconds);
        -: 1124:
        1: 1125:        CFE_TIME_SetTime(NewTime);
        -: 1126:
        1: 1127:        CFE_TIME_TaskData.CmdCounter++;
        1: 1128:        CFE_EVS_SendEvent(CFE_TIME_TIME_EID, CFE_EVS_INFORMATION,
        -: 1129:                         "Set Time -- secs = %d, usecs = %d, ssecs = 0x%X",
        -: 1130:                          CommandPtr->Seconds, CommandPtr->MicroSeconds,
        -: 1131:                          CFE_TIME_Micro2SubSecs(CommandPtr->MicroSeconds));
        -: 1132:
        -: 1133:        #else /* not CFE_TIME_CFG_SERVER */
        -: 1134:        /*
        -: 1135:        ** We want to know if disabled commands are being sent...
        -: 1136:        */
        -: 1137:        CFE_TIME_TaskData.ErrCounter++;
        -: 1138:
        -: 1139:        CFE_EVS_SendEvent(CFE_TIME_TIME_CFG_EID, CFE_EVS_ERROR,
        -: 1140:           "Set Time commands invalid without CFE_TIME_CFG_SERVER set to TRUE");
        -: 1141:
        -: 1142:        #endif /* CFE_TIME_CFG_SERVER */
        -: 1143:    }
        -: 1144:    else
        -: 1145:    {
        1: 1146:        CFE_TIME_TaskData.ErrCounter++;
        1: 1147:        CFE_EVS_SendEvent(CFE_TIME_TIME_ERR_EID, CFE_EVS_ERROR,
        -: 1148:                         "Invalid Time -- secs = %d, usecs = %d",
        -: 1149:                          CommandPtr->Seconds, CommandPtr->MicroSeconds);
        -: 1150:    }
        -: 1151:
        2: 1152:    return;
        -: 1153:
        -: 1154:} /* End of CFE_TIME_SetTimeCmd() */
        -: 1155:
        -: 1156:
        -: 1157:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1158:/*                                                                 */
        -: 1159:/* CFE_TIME_SetMETCmd() -- Time task ground command (set MET)      */
        -: 1160:/*                                                                 */
        -: 1161:/* Note: This command will not have lasting effect if configured   */
        -: 1162:/*       to get external time of type MET.  Also, there cannot     */
        -: 1163:/*       be a local h/w MET and an external MET since both would   */
        -: 1164:/*       need to be synchronized to the same tone signal.          */
        -: 1165:/*                                                                 */
        -: 1166:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1167:
        2: 1168:void CFE_TIME_SetMETCmd(CFE_SB_MsgPtr_t MessagePtr)
        -: 1169:{
        2: 1170:    CFE_TIME_TimeCmd_t *CommandPtr = (CFE_TIME_TimeCmd_t *) MessagePtr;
        -: 1171:
        -: 1172:    /*
        -: 1173:    ** Verify "micro-seconds" command argument...
        -: 1174:    */
        2: 1175:    if (CommandPtr->MicroSeconds < 1000000)
        -: 1176:    {
        -: 1177:        #if (CFE_TIME_CFG_SERVER == TRUE)
        -: 1178:
        -: 1179:        CFE_TIME_SysTime_t NewMET;
        -: 1180:
        1: 1181:        NewMET.Seconds = CommandPtr->Seconds;
        1: 1182:        NewMET.Subseconds = CFE_TIME_Micro2SubSecs(CommandPtr->MicroSeconds);
        -: 1183:
        1: 1184:        CFE_TIME_SetMET(NewMET);
        -: 1185:
        1: 1186:        CFE_TIME_TaskData.CmdCounter++;
        1: 1187:        CFE_EVS_SendEvent(CFE_TIME_MET_EID, CFE_EVS_INFORMATION,
        -: 1188:                         "Set MET -- secs = %d, usecs = %d, ssecs = 0x%X",
        -: 1189:                          CommandPtr->Seconds, CommandPtr->MicroSeconds,
        -: 1190:                          CFE_TIME_Micro2SubSecs(CommandPtr->MicroSeconds));
        -: 1191:
        -: 1192:        #else /* not CFE_TIME_CFG_SERVER */
        -: 1193:        /*
        -: 1194:        ** We want to know if disabled commands are being sent...
        -: 1195:        */
        -: 1196:        CFE_TIME_TaskData.ErrCounter++;
        -: 1197:
        -: 1198:        CFE_EVS_SendEvent(CFE_TIME_MET_CFG_EID, CFE_EVS_ERROR,
        -: 1199:           "Set MET commands invalid without CFE_TIME_CFG_SERVER set to TRUE");
        -: 1200:
        -: 1201:        #endif /* CFE_TIME_CFG_SERVER */
        -: 1202:    }
        -: 1203:    else
        -: 1204:    {
        1: 1205:        CFE_TIME_TaskData.ErrCounter++;
        1: 1206:        CFE_EVS_SendEvent(CFE_TIME_MET_ERR_EID, CFE_EVS_ERROR,
        -: 1207:                         "Invalid MET -- secs = %d, usecs = %d",
        -: 1208:                          CommandPtr->Seconds, CommandPtr->MicroSeconds);
        -: 1209:    }
        -: 1210:
        2: 1211:    return;
        -: 1212:
        -: 1213:} /* End of CFE_TIME_SetMETCmd() */
        -: 1214:
        -: 1215:
        -: 1216:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1217:/*                                                                 */
        -: 1218:/* CFE_TIME_SetSTCFCmd() -- Time task ground command (set STCF)    */
        -: 1219:/*                                                                 */
        -: 1220:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1221:
        2: 1222:void CFE_TIME_SetSTCFCmd(CFE_SB_MsgPtr_t MessagePtr)
        -: 1223:{
        2: 1224:    CFE_TIME_TimeCmd_t *CommandPtr = (CFE_TIME_TimeCmd_t *) MessagePtr;
        -: 1225:
        -: 1226:    /*
        -: 1227:    ** Verify "micro-seconds" command argument...
        -: 1228:    */
        2: 1229:    if (CommandPtr->MicroSeconds < 1000000)
        -: 1230:    {
        -: 1231:        #if (CFE_TIME_CFG_SERVER == TRUE)
        -: 1232:
        -: 1233:        CFE_TIME_SysTime_t NewSTCF;
        -: 1234:
        1: 1235:        NewSTCF.Seconds = CommandPtr->Seconds;
        1: 1236:        NewSTCF.Subseconds = CFE_TIME_Micro2SubSecs(CommandPtr->MicroSeconds);
        -: 1237:
        1: 1238:        CFE_TIME_SetSTCF(NewSTCF);
        -: 1239:
        1: 1240:        CFE_TIME_TaskData.CmdCounter++;
        1: 1241:        CFE_EVS_SendEvent(CFE_TIME_STCF_EID, CFE_EVS_INFORMATION,
        -: 1242:                         "Set STCF -- secs = %d, usecs = %d, ssecs = 0x%X",
        -: 1243:                          CommandPtr->Seconds, CommandPtr->MicroSeconds,
        -: 1244:                          CFE_TIME_Micro2SubSecs(CommandPtr->MicroSeconds));
        -: 1245:
        -: 1246:        #else /* not CFE_TIME_CFG_SERVER */
        -: 1247:        /*
        -: 1248:        ** We want to know if disabled commands are being sent...
        -: 1249:        */
        -: 1250:        CFE_TIME_TaskData.ErrCounter++;
        -: 1251:
        -: 1252:        CFE_EVS_SendEvent(CFE_TIME_STCF_CFG_EID, CFE_EVS_ERROR,
        -: 1253:           "Set STCF commands invalid without CFE_TIME_CFG_SERVER set to TRUE");
        -: 1254:
        -: 1255:        #endif /* CFE_TIME_CFG_SERVER */
        -: 1256:    }
        -: 1257:    else
        -: 1258:    {
        1: 1259:        CFE_TIME_TaskData.ErrCounter++;
        1: 1260:        CFE_EVS_SendEvent(CFE_TIME_STCF_ERR_EID, CFE_EVS_ERROR,
        -: 1261:                         "Invalid STCF -- secs = %d, usecs = %d",
        -: 1262:                          CommandPtr->Seconds, CommandPtr->MicroSeconds);
        -: 1263:    }
        -: 1264:
        2: 1265:    return;
        -: 1266:
        -: 1267:} /* End of CFE_TIME_SetSTCFCmd() */
        -: 1268:
        -: 1269:
        -: 1270:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1271:/*                                                                 */
        -: 1272:/* CFE_TIME_SetLeapsCmd() -- Time task ground command (set leaps)  */
        -: 1273:/*                                                                 */
        -: 1274:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1275:
        1: 1276:void CFE_TIME_SetLeapsCmd(CFE_SB_MsgPtr_t MessagePtr)
        -: 1277:{
        -: 1278:    #if (CFE_TIME_CFG_SERVER == TRUE)
        -: 1279:
        1: 1280:    CFE_TIME_LeapsCmd_t *CommandPtr = (CFE_TIME_LeapsCmd_t *) MessagePtr;
        -: 1281:
        -: 1282:    /*
        -: 1283:    ** No value checking (leaps may be positive or negative)...
        -: 1284:    */
        1: 1285:    CFE_TIME_SetLeaps(CommandPtr->LeapSeconds);
        -: 1286:
        1: 1287:    CFE_TIME_TaskData.CmdCounter++;
        -: 1288:
        1: 1289:    CFE_EVS_SendEvent(CFE_TIME_LEAPS_EID, CFE_EVS_INFORMATION,
        1: 1290:                     "Set Leap Seconds = %d", CommandPtr->LeapSeconds);
        -: 1291:
        -: 1292:    #else /* not CFE_TIME_CFG_SERVER */
        -: 1293:    /*
        -: 1294:    ** We want to know if disabled commands are being sent...
        -: 1295:    */
        -: 1296:    CFE_TIME_TaskData.ErrCounter++;
        -: 1297:
        -: 1298:    CFE_EVS_SendEvent(CFE_TIME_LEAPS_CFG_EID, CFE_EVS_ERROR,
        -: 1299:       "Set Leaps commands invalid without CFE_TIME_CFG_SERVER set to TRUE");
        -: 1300:
        -: 1301:    #endif /* CFE_TIME_CFG_SERVER */
        -: 1302:
        1: 1303:    return;
        -: 1304:
        -: 1305:} /* End of CFE_TIME_SetLeapsCmd() */
        -: 1306:
        -: 1307:
        -: 1308:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1309:/*                                                                 */
        -: 1310:/* CFE_TIME_AdjustCmd() -- Time task ground command (adjust STCF)  */
        -: 1311:/*                                                                 */
        -: 1312:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1313:
        3: 1314:void CFE_TIME_AdjustCmd(CFE_SB_MsgPtr_t MessagePtr, int16 Direction)
        -: 1315:{
        3: 1316:    CFE_TIME_TimeCmd_t *CommandPtr = (CFE_TIME_TimeCmd_t *) MessagePtr;
        -: 1317:
        -: 1318:    /*
        -: 1319:    ** Verify command arguments...
        -: 1320:    */
        3: 1321:    if (CommandPtr->MicroSeconds < 1000000)
        -: 1322:    {
        -: 1323:        #if (CFE_TIME_CFG_SERVER == TRUE)
        -: 1324:
        -: 1325:        CFE_TIME_SysTime_t Adjust;
        -: 1326:
        2: 1327:        Adjust.Seconds = CommandPtr->Seconds;
        2: 1328:        Adjust.Subseconds = CFE_TIME_Micro2SubSecs(CommandPtr->MicroSeconds);
        -: 1329:
        2: 1330:        CFE_TIME_SetAdjust(Adjust, Direction);
        -: 1331:
        2: 1332:        CFE_TIME_TaskData.CmdCounter++;
        2: 1333:        CFE_EVS_SendEvent(CFE_TIME_DELTA_EID, CFE_EVS_INFORMATION,
        -: 1334:           "STCF Adjust -- secs = %d, usecs = %d, ssecs = 0x%X, dir[1=Pos, 2=Neg] = %d",
        -: 1335:                          CommandPtr->Seconds, CommandPtr->MicroSeconds,
        -: 1336:                          CFE_TIME_Micro2SubSecs(CommandPtr->MicroSeconds),
        -: 1337:                          Direction);
        -: 1338:
        -: 1339:        #else /* not CFE_TIME_CFG_SERVER */
        -: 1340:        /*
        -: 1341:        ** We want to know if disabled commands are being sent...
        -: 1342:        */
        -: 1343:        CFE_TIME_TaskData.ErrCounter++;
        -: 1344:
        -: 1345:        CFE_EVS_SendEvent(CFE_TIME_DELTA_CFG_EID, CFE_EVS_ERROR,
        -: 1346:           "STCF Adjust commands invalid without CFE_TIME_CFG_SERVER set to TRUE");
        -: 1347:
        -: 1348:        #endif /* CFE_TIME_CFG_SERVER */
        -: 1349:    }
        -: 1350:    else
        -: 1351:    {
        1: 1352:        CFE_TIME_TaskData.ErrCounter++;
        1: 1353:        CFE_EVS_SendEvent(CFE_TIME_DELTA_ERR_EID, CFE_EVS_ERROR,
        -: 1354:           "Invalid STCF Adjust -- secs = %d, usecs = %d, dir[1=Pos, 2=Neg] = %d",
        -: 1355:                          CommandPtr->Seconds, CommandPtr->MicroSeconds, Direction);
        -: 1356:    }
        -: 1357:
        3: 1358:    return;
        -: 1359:
        -: 1360:} /* End of CFE_TIME_AdjustCmd() */
        -: 1361:
        -: 1362:
        -: 1363:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1364:/*                                                                 */
        -: 1365:/* CFE_TIME_1HzAdjCmd() -- Time task ground command (1Hz adjust)   */
        -: 1366:/*                                                                 */
        -: 1367:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1368:
        2: 1369:void CFE_TIME_1HzAdjCmd(CFE_SB_MsgPtr_t MessagePtr, int16 Direction)
        -: 1370:{
        -: 1371:    /*
        -: 1372:    ** 1Hz adjustments are only valid for "Time Servers"...
        -: 1373:    */
        -: 1374:    #if (CFE_TIME_CFG_SERVER == TRUE)
        -: 1375:
        2: 1376:    CFE_TIME_1HzAdjCmd_t *CommandPtr = (CFE_TIME_1HzAdjCmd_t *) MessagePtr;
        -: 1377:    CFE_TIME_SysTime_t Adjust;
        -: 1378:
        2: 1379:    Adjust.Seconds = CommandPtr->Seconds;
        2: 1380:    Adjust.Subseconds = CommandPtr->SubSeconds;
        -: 1381:
        2: 1382:    CFE_TIME_Set1HzAdj(Adjust, Direction);
        -: 1383:
        2: 1384:    CFE_TIME_TaskData.CmdCounter++;
        2: 1385:    CFE_EVS_SendEvent(CFE_TIME_1HZ_EID, CFE_EVS_INFORMATION,
        -: 1386:       "STCF 1Hz Adjust -- secs = %d, ssecs = 0x%X, dir[1=Pos, 2=Neg] = %d",
        -: 1387:                      CommandPtr->Seconds, CommandPtr->SubSeconds, Direction);
        -: 1388:
        -: 1389:    #else /* not CFE_TIME_CFG_SERVER */
        -: 1390:    /*
        -: 1391:    ** We want to know if disabled commands are being sent...
        -: 1392:    */
        -: 1393:    CFE_TIME_TaskData.ErrCounter++;
        -: 1394:
        -: 1395:    CFE_EVS_SendEvent(CFE_TIME_1HZ_CFG_EID, CFE_EVS_ERROR,
        -: 1396:       "1Hz Adjust commands invalid without CFE_TIME_CFG_SERVER set to TRUE");
        -: 1397:
        -: 1398:    #endif /* CFE_TIME_CFG_SERVER */
        -: 1399:
        2: 1400:    return;
        -: 1401:
        -: 1402:} /* End of CFE_TIME_1HzAdjCmd() */
        -: 1403:
        -: 1404:
        -: 1405:/************************/
        -: 1406:/*  End of File Comment */
        -: 1407:/************************/
