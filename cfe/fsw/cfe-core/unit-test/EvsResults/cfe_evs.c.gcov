        -:    0:Source:/home/jdagostino/CProj/CFS/MKS/cfs-mission/cfe/fsw/cfe-core/src/evs/cfe_evs.c
        -:    0:Graph:cfe_evs.gcno
        -:    0:Data:cfe_evs.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:**
        -:    3:**  File Name: cfe_evs.c
        -:    4:**  $Id: cfe_evs.c.gcov 1.3 2010/11/03 16:20:38EDT jmdagost Exp  $
        -:    5:**
        -:    6:**
        -:    7:**
        -:    8:**      Copyright (c) 2004-2006, United States government as represented by the 
        -:    9:**      administrator of the National Aeronautics Space Administration.  
        -:   10:**      All rights reserved. This software(cFE) was created at NASA's Goddard 
        -:   11:**      Space Flight Center pursuant to government contracts.
        -:   12:**
        -:   13:**      This software may be used only pursuant to a United States government 
        -:   14:**      sponsored project and the United States government may not be charged
        -:   15:**      for use thereof. 
        -:   16:**
        -:   17:**
        -:   18:**
        -:   19:**  Title: Event Services API library
        -:   20:**
        -:   21:**  Purpose: This module defines the library functions of the
        -:   22:**           Event Services API
        -:   23:**
        -:   24:**  $Date: 2010/11/03 16:20:38EDT $
        -:   25:**  $Revision: 1.3 $
        -:   26:**  $Log: cfe_evs.c.gcov  $
        -:   26:**  Revision 1.3 2010/11/03 16:20:38EDT jmdagost 
        -:   26:**  Updated unit test results.
        -:   27:**  Revision 1.4 2010/10/26 17:01:42EDT jmdagost 
        -:   28:**  Made CFE_EVS_ResetFilter() argument a signed int and added test for positive.
        -:   29:**  Revision 1.3 2010/10/25 15:01:44EDT jmdagost 
        -:   30:**  Corrected bad apostrophe in prologue.
        -:   31:**  Revision 1.2 2010/10/04 15:27:15EDT jmdagost 
        -:   32:**  Cleaned up copyright symbol.
        -:   33:**  Revision 1.1 2008/04/17 08:05:12EDT ruperera 
        -:   34:**  Initial revision
        -:   35:**  Member added to project c:/MKSDATA/MKS-REPOSITORY/MKS-CFE-PROJECT/fsw/cfe-core/src/evs/project.pj
        -:   36:**  Revision 1.35 2007/08/07 12:52:41EDT David Kobe (dlkobe) 
        -:   37:**  Modified CFE_ES_GetPoolBuf API's first parameter to be of type uint32**
        -:   38:**  Revision 1.34 2007/07/18 11:59:00EDT dlkobe 
        -:   39:**  Replaced memory address reference with CFE_EVS_GlobalData.EVS_TableHdl.
        -:   40:**  Revision 1.33 2007/03/21 14:35:21EST njyanchik 
        -:   41:**  I didn't previously fix this DCR for these two other Send Event APIs.
        -:   42:**  Revision 1.32 2007/02/06 14:42:37EST njyanchik 
        -:   43:**  this CP checks in the changes to fix the broken message truncation counter
        -:   44:**  Revision 1.31 2006/07/31 12:38:49GMT-05:00 njyanchik 
        -:   45:**  LDRA complained about passing an uninitialized variable into a function (even
        -:   46:**  when the function itself initializes the variable).
        -:   47:**  
        -:   48:**  In a structure definition, there was a uint16 AppID variable. It should be uint32.
        -:   49:**  Revision 1.30 2006/06/09 16:27:25EDT rjmcgraw 
        -:   50:**  Swapped parameters for memory pool API's
        -:   51:**  Revision 1.29 2006/06/09 19:28:15GMT kkaudra 
        -:   52:**  Changed size of BigBuf, removed static declaration from BigBuf, replaced vsprintf with vsnprintf
        -:   53:**  Revision 1.28 2006/06/08 14:14:54EDT njyanchik 
        -:   54:**  I added the appropriate legal headers to all of the evs files
        -:   55:**
        -:   56:*/
        -:   57:
        -:   58:/* Include Files */
        -:   59:#include "cfe_evs.h"         /* EVS library function definitions */
        -:   60:#include "cfe_evs_task.h"    /* EVS internal definitions */
        -:   61:#include "cfe_evs_utils.h"   /* EVS utility function definitions */
        -:   62:#include "common_types.h"    /* Basic data types */
        -:   63:#include "cfe_es.h"          /* Executive Service definitions */
        -:   64:#include "cfe_error.h"       /* cFE error code definitions */
        -:   65:
        -:   66:#include <stdarg.h>
        -:   67:#include <string.h>
        -:   68:
        -:   69:/* External Data */
        -:   70:extern CFE_EVS_GlobalData_t   CFE_EVS_GlobalData;
        -:   71:
        -:   72:
        -:   73:/* Local Function Prototypes */
        -:   74:
        -:   75:
        -:   76:/* Function Definitions */
        -:   77:
        -:   78:/*
        -:   79:**             Function Prologue
        -:   80:**
        -:   81:** Function Name:      CFE_EVS_Register
        -:   82:**
        -:   83:** Purpose:  This routine registers an application for receiving event services.
        -:   84:**
        -:   85:** Assumptions and Notes:
        -:   86:**
        -:   87:*/
        -:   88:int32 CFE_EVS_Register (void *Filters, uint16 NumEventFilters, uint16 FilterScheme)
       18:   89:{
       18:   90:   int32                  Status = CFE_SUCCESS;
       18:   91:   uint32                 AppID = 0xFFFFFFFF;
        -:   92:   CFE_EVS_Table_t        *TableEntry;
        -:   93:
        -:   94:   /* Retreive the calling application's ID number */
       18:   95:   Status = CFE_ES_GetAppID(&AppID);
        -:   96:
       18:   97:   if(Status == CFE_SUCCESS)
        -:   98:   {
        -:   99:      /* Check validity of AppID and application registration */
       18:  100:      Status = EVS_CheckApplication(AppID);
        -:  101:
       18:  102:      if(Status == CFE_SUCCESS)
        -:  103:      {
        -:  104:         /* Unregister application if previously registered */
       11:  105:         Status = EVS_UnregisterInternal(AppID);
        -:  106:      }
       18:  107:      if((Status == CFE_SUCCESS) || (Status == CFE_EVS_APP_NOT_REGISTERED))
        -:  108:      {
       16:  109:         if(FilterScheme == CFE_EVS_BINARY_FILTER)
        -:  110:         {
        -:  111:            /* Create table entries for storing application information*/
       15:  112:            Status = CFE_ES_GetPoolBuf((uint32 **)&TableEntry,
        -:  113:                                       CFE_EVS_GlobalData.EVS_TableHdl,                                   
        -:  114:                                       (sizeof(CFE_EVS_Table_t)));
        -:  115:
       15:  116:            if((Status == CFE_SUCCESS)||(Status > 0))
        -:  117:            {
       15:  118:               CFE_EVS_GlobalData.EVS_TablePtr[AppID].Address = TableEntry;
        -:  119:
        -:  120:               /* Initialize and coppy application data to EVS table */
       15:  121:               Status = EVS_InitCpyApplicationData(AppID, Filters, NumEventFilters);
        -:  122:            }
        -:  123:         }
        -:  124:         else
        -:  125:         {
        1:  126:            Status = CFE_EVS_UNKNOWN_FILTER;
        -:  127:         }
        -:  128:      }
        -:  129:   }
        -:  130:
       18:  131:   return Status;
        -:  132:
        -:  133:} /* End CFE_EVS_Register */
        -:  134:
        -:  135:
        -:  136:/*
        -:  137:**             Function Prologue
        -:  138:**
        -:  139:** Function Name:      CFE_EVS_Unregister
        -:  140:**
        -:  141:** Purpose:  This routine unregisters an application for receiving event services.
        -:  142:**
        -:  143:** Assumptions and Notes:
        -:  144:**
        -:  145:*/
        -:  146:int32 CFE_EVS_Unregister ( void )
        5:  147:{
        5:  148:   uint32           AppID = 0xFFFFFFFF;
        5:  149:   int32            Status = CFE_SUCCESS;
        -:  150:
        -:  151:   /* Retreive the calling application's ID number */
        5:  152:   Status = CFE_ES_GetAppID(&AppID);
        -:  153:
        5:  154:   if(Status == CFE_SUCCESS)
        -:  155:   {
        5:  156:      Status = EVS_CheckApplication(AppID);
        -:  157:   }
        -:  158:
        5:  159:   if(Status == CFE_SUCCESS)
        -:  160:   {
        3:  161:      Status = EVS_UnregisterInternal(AppID);
        -:  162:   }
        -:  163:
        5:  164:   return Status;
        -:  165:
        -:  166:} /* End CFE_EVS_Unregister */
        -:  167:
        -:  168:
        -:  169:/*
        -:  170:**             Function Prologue
        -:  171:**
        -:  172:** Function Name:      CFE_EVS_SendEvent
        -:  173:**
        -:  174:** Purpose:  This routine sends an event message, with message ID containing the current
        -:  175:**           processor/box and task ID as well as the eventID.
        -:  176:**
        -:  177:** Assumptions and Notes:
        -:  178:*/
        -:  179:int32 CFE_EVS_SendEvent (uint16 EventID, uint16 EventType, const char *Spec, ... )
      185:  180:{
      185:  181:   int32               Status = CFE_SUCCESS;
      185:  182:   uint32              AppID = 0xFFFFFFFF;
        -:  183:   CFE_TIME_SysTime_t  Time;
        -:  184:   char                BigBuf[CFE_EVS_MAX_MESSAGE_LENGTH];
        -:  185:   char                GTBigBuf[CFE_EVS_MAX_MESSAGE_LENGTH + 2];
        -:  186:   va_list             Ptr;
        -:  187:
        -:  188:   /* Get application identifier */
      185:  189:   Status = CFE_ES_GetAppID(&AppID);
        -:  190:
      185:  191:   if(Status == CFE_SUCCESS)
        -:  192:   {
        -:  193:      /* Copy message to event packet */
      185:  194:      va_start(Ptr, Spec);
      185:  195:      vsnprintf(GTBigBuf, CFE_EVS_MAX_MESSAGE_LENGTH +2, Spec, Ptr);
      185:  196:      va_end(Ptr);
        -:  197:
        -:  198:
        -:  199:      /* We make a buffer greater than than the max allowed. We can
        -:  200:       * check the length of the string to see if it is bigger
        -:  201:       * than the allowed. If it is, we trunc it and increment
        -:  202:       * the counter. 
        -:  203:       *
        -:  204:       * Then we copy the max size of the message over to another
        -:  205:       * buffer to be sent 
        -:  206:       */ 
      185:  207:      if(strlen(GTBigBuf) > CFE_EVS_MAX_MESSAGE_LENGTH)
        -:  208:      {
        1:  209:         CFE_EVS_GlobalData.EVS_TlmPkt.MessageTruncCounter++;
        -:  210:      }
        -:  211:
      185:  212:      strncpy(BigBuf,GTBigBuf,CFE_EVS_MAX_MESSAGE_LENGTH);
        -:  213:      
        -:  214:      /* Get system time */
      185:  215:      Time = CFE_TIME_GetTime();
        -:  216:
        -:  217:      /* Send event */
      185:  218:      Status = EVS_SendEvent(AppID, Time, EventID, EventType, BigBuf);
        -:  219:   }
        -:  220:
      185:  221:   return Status;
        -:  222:
        -:  223:} /* End CFE_EVS_SendEvent */
        -:  224:
        -:  225:/*
        -:  226:**             Function Prologue
        -:  227:**
        -:  228:** Function Name:      CFE_EVS_SendEventWithAppID
        -:  229:**
        -:  230:** Purpose:  This routine sends an event message, with message ID containing the current
        -:  231:**           processor/box and task ID as well as the eventID. Also forces the user to
        -:  232:**           supply an AppID to be sent with the message.
        -:  233:**
        -:  234:** Assumptions and Notes:
        -:  235:*/
        -:  236:int32 CFE_EVS_SendEventWithAppID (uint16 EventID, uint16 EventType,uint32 AppID, const char *Spec, ... )
        5:  237:{
        5:  238:   int32               Status = CFE_SUCCESS;
        -:  239:   CFE_TIME_SysTime_t  Time;
        -:  240:   char                BigBuf[CFE_EVS_MAX_MESSAGE_LENGTH];
        -:  241:   char                GTBigBuf[CFE_EVS_MAX_MESSAGE_LENGTH + 2];
        -:  242:   va_list             Ptr;
        -:  243:
        -:  244:   
        -:  245:   /* Check to make sure the given AppID is legit */
        5:  246:   Status = EVS_CheckApplication(AppID);
        -:  247:   
        5:  248:   if(Status == CFE_SUCCESS)
        -:  249:   {
        -:  250:      /* Copy message to event packet */
        2:  251:      va_start(Ptr, Spec);
        2:  252:      vsnprintf(GTBigBuf, CFE_EVS_MAX_MESSAGE_LENGTH +2, Spec, Ptr);
        2:  253:      va_end(Ptr);
        -:  254:
        2:  255:      if(strlen(GTBigBuf) > CFE_EVS_MAX_MESSAGE_LENGTH)
        -:  256:      {
        1:  257:         CFE_EVS_GlobalData.EVS_TlmPkt.MessageTruncCounter++;
        -:  258:      }
        -:  259:
        2:  260:      strncpy(BigBuf,GTBigBuf,CFE_EVS_MAX_MESSAGE_LENGTH);
        -:  261:
        -:  262:      /* Get system time */
        2:  263:      Time = CFE_TIME_GetTime();
        -:  264:
        -:  265:      /* Send event */
        2:  266:      Status = EVS_SendEvent(AppID, Time, EventID, EventType, BigBuf);
        -:  267:   }
        -:  268:
        5:  269:   return Status;
        -:  270:
        -:  271:} /* End CFE_EVS_SendEventWithAppID */
        -:  272:
        -:  273:
        -:  274:
        -:  275:
        -:  276:/*
        -:  277:**             Function Prologue
        -:  278:**
        -:  279:** Function Name:      CFE_EVS_SendTimedEvent
        -:  280:**
        -:  281:** Purpose:  This routine sends a timed event message, with message ID containing the
        -:  282:**           current processor/box and task ID as well as the eventID.
        -:  283:**
        -:  284:** Assumptions and Notes:
        -:  285:*/
        -:  286:int32 CFE_EVS_SendTimedEvent (CFE_TIME_SysTime_t Time, uint16 EventID, uint16 EventType, const char *Spec, ... )
        3:  287:{
        -:  288:   int32              Status;
        3:  289:   uint32             AppID = 0xFFFFFFFF;
        -:  290:   char               BigBuf[CFE_EVS_MAX_MESSAGE_LENGTH];
        -:  291:   char                GTBigBuf[CFE_EVS_MAX_MESSAGE_LENGTH + 2];
        -:  292:   va_list            Ptr;
        -:  293:
        -:  294:    /* Get application identifier */
        3:  295:   Status = CFE_ES_GetAppID(&AppID);
        -:  296:
        3:  297:   if(Status == CFE_SUCCESS)
        -:  298:   {
        -:  299:      /* Copy message to event packet */
        3:  300:      va_start(Ptr, Spec);
        3:  301:      vsnprintf(GTBigBuf,CFE_EVS_MAX_MESSAGE_LENGTH + 2, Spec, Ptr);
        3:  302:      va_end(Ptr);
        -:  303:
        -:  304:
        3:  305:      if(strlen(GTBigBuf) > CFE_EVS_MAX_MESSAGE_LENGTH)
        -:  306:      {
        1:  307:         CFE_EVS_GlobalData.EVS_TlmPkt.MessageTruncCounter++;
        -:  308:      }
        -:  309:
        3:  310:      strncpy(BigBuf,GTBigBuf,CFE_EVS_MAX_MESSAGE_LENGTH);
        -:  311:
        -:  312:
        3:  313:      Status = EVS_SendEvent(AppID, Time, EventID, EventType, BigBuf);
        -:  314:   }
        -:  315:
        3:  316:   return Status;
        -:  317:
        -:  318:} /* End CFE_EVS_SendTimedEvent */
        -:  319:
        -:  320:
        -:  321:/*
        -:  322:**             Function Prologue
        -:  323:**
        -:  324:** Function Name:      CFE_EVS_ResetFilter
        -:  325:**
        -:  326:** Purpose:  This routine clears the filter counter for the calling application's given event_id.
        -:  327:**
        -:  328:** Assumptions and Notes:
        -:  329:**
        -:  330:*/
        -:  331:int32 CFE_EVS_ResetFilter (int16 EventID)
        5:  332:{
        5:  333:   int32                  Status = CFE_SUCCESS;
        5:  334:   CFE_EVS_EVSBinFilter_t *FilterPtr = NULL;
        5:  335:   uint32                 AppID = 0xFFFFFFFF;
        -:  336:   CFE_EVS_Table_t        *TablePtr;
        -:  337:
        -:  338:   /* Retreive calling application's ID */
        5:  339:   Status = CFE_ES_GetAppID(&AppID);
        -:  340:
        5:  341:   if(Status == CFE_SUCCESS)
        -:  342:   {
        -:  343:      /* Check validity of AppID and application registration */
        5:  344:      Status = EVS_CheckApplication(AppID);
        -:  345:
        5:  346:      if(Status == CFE_SUCCESS)
        -:  347:      {
        3:  348:         if((EventID >= 0) && (EventID <= CFE_EVS_MAX_EVENT_FILTERS))
        -:  349:         {
        1:  350:            TablePtr = CFE_EVS_GlobalData.EVS_TablePtr[AppID].Address;
        -:  351:             
        1:  352:            FilterPtr = EVS_FindEventID(EventID, (CFE_EVS_EVSBinFilter_t *)&TablePtr->BinFilters);
        -:  353:
        1:  354:            if(FilterPtr != NULL)
        -:  355:            {
        1:  356:               FilterPtr->Count = 0;
        -:  357:            }
        -:  358:         }
        -:  359:      }
        -:  360:   }
        -:  361:
        5:  362:   return Status;
        -:  363:
        -:  364:} /* End CFE_EVS_ResetFilter */
        -:  365:
        -:  366:
        -:  367:/*
        -:  368:**             Function Prologue
        -:  369:**
        -:  370:** Function Name:      CFE_EVS_ResetAllFilters
        -:  371:**
        -:  372:** Purpose:  This routine clears all filter counters for the calling application
        -:  373:**
        -:  374:** Assumptions and Notes:
        -:  375:**
        -:  376:*/
        -:  377:int32 CFE_EVS_ResetAllFilters ( void )
        3:  378:{
        3:  379:   int32                  Status = CFE_SUCCESS;
        3:  380:   uint32                 AppID = 0xFFFFFFFF;
        -:  381:   uint32                 i;
        -:  382:
        -:  383:   /* Retreive calling application's ID */
        3:  384:   Status = CFE_ES_GetAppID(&AppID);
        -:  385:
        3:  386:   if(Status == CFE_SUCCESS)
        -:  387:   {
        -:  388:       /* Check validity of AppID and application registration */
        3:  389:       Status = EVS_CheckApplication(AppID);
        -:  390:
        3:  391:       if(Status == CFE_SUCCESS)
        -:  392:       {
        9:  393:          for(i=0; i<CFE_EVS_MAX_EVENT_FILTERS; i++)
        -:  394:          {
        8:  395:             CFE_EVS_GlobalData.EVS_TablePtr[AppID].Address->BinFilters[i].Count = 0;
        -:  396:          }
        -:  397:       }
        -:  398:   }
        -:  399:
        3:  400:   return Status;
        -:  401:
        -:  402:} /* End CFE_EVS_ResetAllFilters */
        -:  403:
        -:  404:
        -:  405:/* End CFE_EVS.C */
