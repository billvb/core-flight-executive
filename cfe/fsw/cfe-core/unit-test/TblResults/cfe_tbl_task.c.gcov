        -:    0:Source:/mnt/hgfs/Proj/cFE/Builds/Trunk/fsw/cfe-core/src/tbl/cfe_tbl_task.c
        -:    0:Graph:cfe_tbl_task.gcno
        -:    0:Data:cfe_tbl_task.gcda
        -:    0:Runs:1
        -:    0:Programs:4
        -:    1:/*
        -:    2:** $Id: cfe_tbl_task.c.gcov 1.8 2009/05/01 16:37:24EDT dkobe Exp  $
        -:    3:**
        -:    4:**      Copyright ï¿½ 2004-2006, United States government as represented by the 
        -:    5:**      administrator of the National Aeronautics Space Administration.  
        -:    6:**      All rights reserved. This software(cFE) was created at NASA's Goddard 
        -:    7:**      Space Flight Center pursuant to government contracts.
        -:    8:**
        -:    9:**      This software may be used only pursuant to a United States government 
        -:   10:**      sponsored project and the United States government may not be charged
        -:   11:**      for use thereof.  
        -:   12:**
        -:   13:** Subsystem: cFE TBL Task
        -:   14:**
        -:   15:** Author: David Kobe (the Hammers Company, Inc.)
        -:   16:**
        -:   17:** Notes:
        -:   18:**
        -:   19:** $Log: cfe_tbl_task.c.gcov  $
        -:   19:** Revision 1.8 2009/05/01 16:37:24EDT dkobe 
        -:   19:** Updated for checking for positive return codes from table validation functions
        -:   20:** Revision 1.2 2008/07/31 15:41:30EDT apcudmore 
        -:   21:** Added execution counter API:
        -:   22:**   -- Added execution counter to ES internal task data
        -:   23:**   -- Added code to increment counter in RunLoop
        -:   24:**   -- Added code to report counter in GetInfo APIs
        -:   25:**   -- Added API to increment counter for child tasks
        -:   26:**   -- Added code to cFE Core apps to increment counters.
        -:   27:** Revision 1.1 2008/04/17 08:05:35EDT ruperera 
        -:   28:** Initial revision
        -:   29:** Member added to project c:/MKSDATA/MKS-REPOSITORY/MKS-CFE-PROJECT/fsw/cfe-core/src/tbl/project.pj
        -:   30:** Revision 1.21 2007/05/15 10:58:04EDT rjmcgraw 
        -:   31:** Exit main loop for CFE_SB_RcvMsg errors
        -:   32:** Revision 1.20 2007/05/09 12:49:49EDT dlkobe 
        -:   33:** Added SysLog message to indicate SB error on Command Pipe
        -:   34:** Revision 1.19 2007/05/04 15:56:22EDT dlkobe 
        -:   35:** Added Delete CDS command
        -:   36:** Revision 1.18 2007/04/30 14:13:44EDT rjmcgraw 
        -:   37:** Standardized task initialization
        -:   38:** Revision 1.17 2007/04/09 14:45:59EDT rjmcgraw 
        -:   39:** Changed names of performance ids to include CFE_
        -:   40:** Revision 1.16 2006/10/31 12:21:43EST dlkobe 
        -:   41:** Removed all references to the TBL_MOD_DUMP_ONLY option command
        -:   42:** Revision 1.15 2006/06/21 12:23:22GMT-05:00 kkaudra 
        -:   43:** Removed cfe_es_perf.h
        -:   44:**
        -:   45:*/
        -:   46:
        -:   47:
        -:   48:/*
        -:   49:** Required header files
        -:   50:*/
        -:   51:#include "cfe.h"
        -:   52:#include "cfe_tbl_internal.h"
        -:   53:#include "cfe_tbl_events.h"
        -:   54:#include "cfe_tbl_msg.h"
        -:   55:#include "cfe_tbl_task_cmds.h"
        -:   56:#include "cfe_tbl_verify.h"
        -:   57:#include <string.h>
        -:   58:
        -:   59:
        -:   60:/*
        -:   61:** Table task global data
        -:   62:*/
        -:   63:CFE_TBL_TaskData_t    CFE_TBL_TaskData;
        -:   64:
        -:   65:
        -:   66:/*
        -:   67:** Table task const data
        -:   68:*/
        -:   69:#define CFE_TBL_BAD_CMD_CODE  (-1) /**< Command Code found in Message does not match any in #CFE_TBL_CmdHandlerTbl */
        -:   70:#define CFE_TBL_BAD_MSG_ID    (-2) /**< Message ID found in Message does not match any in #CFE_TBL_CmdHandlerTbl */
        -:   71:
        -:   72:typedef enum
        -:   73:{
        -:   74:    CFE_TBL_TERM_MSGTYPE=0,   /**< \brief Command Handler Table Terminator Type */
        -:   75:    CFE_TBL_MSG_MSGTYPE,      /**< \brief Message Type (requires Message ID match) */
        -:   76:    CFE_TBL_CMD_MSGTYPE       /**< \brief Command Type (requires Message ID and Command Code match) */
        -:   77:} CFE_TBL_MsgType_t;
        -:   78:
        -:   79:/**
        -:   80:** Data structure of a single record in #CFE_TBL_CmdHandlerTbl
        -:   81:*/
        -:   82:typedef struct {
        -:   83:    uint32                   MsgId;           /**< \brief Acceptable Message ID */
        -:   84:    uint32                   CmdCode;         /**< \brief Acceptable Command Code (if necessary) */
        -:   85:    uint32                   ExpectedLength;  /**< \brief Expected Message Length (in bytes) including message header */
        -:   86:    CFE_TBL_MsgProcFuncPtr_t MsgProcFuncPtr;  /**< \brief Pointer to function to handle message  */
        -:   87:    CFE_TBL_MsgType_t        MsgTypes;        /**< \brief Message Type (i.e. - with/without Cmd Code)   */
        -:   88:} CFE_TBL_CmdHandlerTblRec_t;
        -:   89:
        -:   90:/*
        -:   91:** Local function prototypes
        -:   92:**
        -:   93:** Note: Except for the entry point (CFE_TBL_TaskMain), these
        -:   94:**       functions are not called from any other source module.
        -:   95:*/
        -:   96:/*****************************************************************************/
        -:   97:/**
        -:   98:** \brief Entry Point for cFE Table Services Core Application
        -:   99:**
        -:  100:** \par Description
        -:  101:**        This is the entry point to the cFE Table Services Core Application.
        -:  102:**        This Application provides the ground interface to the cFE Table
        -:  103:**        Services.
        -:  104:** 
        -:  105:** \par Assumptions, External Events, and Notes:
        -:  106:**          None
        -:  107:**
        -:  108:** \retval None
        -:  109:******************************************************************************/
        -:  110:void  CFE_TBL_TaskMain(void);
        -:  111:
        -:  112:/*****************************************************************************/
        -:  113:/**
        -:  114:** \brief cFE Table Services Core Application Initialization
        -:  115:**
        -:  116:** \par Description
        -:  117:**        This function initializes all data associated with the cFE Table
        -:  118:**        Services Core Application.  It is only called when the Application
        -:  119:**        is first started.
        -:  120:** 
        -:  121:** \par Assumptions, External Events, and Notes:
        -:  122:**          None
        -:  123:**
        -:  124:** \return #CFE_SUCCESS  \copydoc CFE_SUCCESS
        -:  125:** \return Any of the return values from #CFE_EVS_Register
        -:  126:** \return Any of the return values from #CFE_SB_CreatePipe
        -:  127:** \return Any of the return values from #CFE_SB_Subscribe
        -:  128:** \return Any of the return values from #CFE_EVS_SendEvent
        -:  129:******************************************************************************/
        -:  130:
        -:  131:int32 CFE_TBL_TaskInit(void);
        -:  132:
        -:  133:/*****************************************************************************/
        -:  134:/**
        -:  135:** \brief Processes command pipe messages
        -:  136:**
        -:  137:** \par Description
        -:  138:**          Processes messages obtained from the command pipe.
        -:  139:** 
        -:  140:** \par Assumptions, External Events, and Notes:
        -:  141:**          None
        -:  142:**
        -:  143:** \param[in] MessagePtr a pointer to the message received from the command pipe
        -:  144:**                                      
        -:  145:** \retval None
        -:  146:******************************************************************************/
        -:  147:
        -:  148:void  CFE_TBL_TaskPipe(CFE_SB_Msg_t *MessagePtr);
        -:  149:
        -:  150:/*****************************************************************************/
        -:  151:/**
        -:  152:** \brief Table Service Application Data Initialization
        -:  153:**
        -:  154:** \par Description
        -:  155:**          Initializes all data necessary for the Table Service Application.
        -:  156:** 
        -:  157:** \par Assumptions, External Events, and Notes:
        -:  158:**          None
        -:  159:**
        -:  160:** \retval None
        -:  161:******************************************************************************/
        -:  162:
        -:  163:void  CFE_TBL_InitData(void);
        -:  164:
        -:  165:/* Utility Functions */
        -:  166:/*****************************************************************************/
        -:  167:/**
        -:  168:** \brief Compares message with #CFE_TBL_CmdHandlerTbl to identify the message
        -:  169:**
        -:  170:** \par Description
        -:  171:**          Searches the Command Handler Table for an entry matching the
        -:  172:**          message ID and, if necessary, the Command Code.  If an entry
        -:  173:**          is not located, an error code is returned.
        -:  174:** 
        -:  175:** \par Assumptions, External Events, and Notes:
        -:  176:**          None
        -:  177:**
        -:  178:** \param[in] MessageID message ID of command message received on command pipe
        -:  179:**
        -:  180:** \param[in] CommandCode command code from command message received on command pipe
        -:  181:**                                      
        -:  182:** \retval #CFE_SUCCESS          \copydoc CFE_SUCCESS
        -:  183:** \retval #CFE_TBL_BAD_CMD_CODE \copydoc CFE_TBL_BAD_CMD_CODE
        -:  184:** \retval #CFE_TBL_BAD_MSG_ID   \copydoc CFE_TBL_BAD_MSG_ID
        -:  185:**
        -:  186:******************************************************************************/
        -:  187:
        -:  188:int16 CFE_TBL_SearchCmdHndlrTbl(CFE_SB_MsgId_t MessageID, uint16 CommandCode);
        -:  189:
        -:  190:/* Constant Data */
        -:  191:
        -:  192:const CFE_TBL_CmdHandlerTblRec_t CFE_TBL_CmdHandlerTbl[] = {
        -:  193:/*        Message ID,    Command Code,                     Msg Size,            Function Ptr,  Msg/Cmd/Terminator */
        -:  194:{CFE_TBL_SEND_HK_MID,                      0,  sizeof(CFE_TBL_NoArgsCmd_t),CFE_TBL_HousekeepingCmd,CFE_TBL_MSG_MSGTYPE},
        -:  195:{    CFE_TBL_CMD_MID,        CFE_TBL_NOOP_CC,  sizeof(CFE_TBL_NoArgsCmd_t),        CFE_TBL_NoopCmd,CFE_TBL_CMD_MSGTYPE},
        -:  196:{    CFE_TBL_CMD_MID,       CFE_TBL_RESET_CC,  sizeof(CFE_TBL_NoArgsCmd_t),       CFE_TBL_ResetCmd,CFE_TBL_CMD_MSGTYPE},
        -:  197:{    CFE_TBL_CMD_MID,        CFE_TBL_LOAD_CC,    sizeof(CFE_TBL_LoadCmd_t),        CFE_TBL_LoadCmd,CFE_TBL_CMD_MSGTYPE},
        -:  198:{    CFE_TBL_CMD_MID,        CFE_TBL_DUMP_CC,    sizeof(CFE_TBL_DumpCmd_t),        CFE_TBL_DumpCmd,CFE_TBL_CMD_MSGTYPE},
        -:  199:{    CFE_TBL_CMD_MID,    CFE_TBL_VALIDATE_CC,sizeof(CFE_TBL_ValidateCmd_t),    CFE_TBL_ValidateCmd,CFE_TBL_CMD_MSGTYPE},
        -:  200:{    CFE_TBL_CMD_MID,    CFE_TBL_ACTIVATE_CC,sizeof(CFE_TBL_ActivateCmd_t),    CFE_TBL_ActivateCmd,CFE_TBL_CMD_MSGTYPE},
        -:  201:{    CFE_TBL_CMD_MID,    CFE_TBL_DUMP_REG_CC, sizeof(CFE_TBL_DumpRegCmd_t),     CFE_TBL_DumpRegCmd,CFE_TBL_CMD_MSGTYPE},
        -:  202:{    CFE_TBL_CMD_MID,     CFE_TBL_TLM_REG_CC,  sizeof(CFE_TBL_TlmRegCmd_t),      CFE_TBL_TlmRegCmd,CFE_TBL_CMD_MSGTYPE},
        -:  203:{    CFE_TBL_CMD_MID,  CFE_TBL_DELETE_CDS_CC,  sizeof(CFE_TBL_DelCDSCmd_t),   CFE_TBL_DeleteCDSCmd,CFE_TBL_CMD_MSGTYPE},
        -:  204:{    CFE_TBL_CMD_MID,  CFE_TBL_ABORT_LOAD_CC, sizeof(CFE_TBL_AbortLdCmd_t),   CFE_TBL_AbortLoadCmd,CFE_TBL_CMD_MSGTYPE},
        -:  205:{                  0,                      0,                            0,                   NULL,CFE_TBL_TERM_MSGTYPE}
        -:  206:};
        -:  207:
        -:  208:
        -:  209:/******************************************************************************/
        -:  210:
        -:  211:void CFE_TBL_TaskMain(void)
        2:  212:{
        -:  213:    int32  Status;
        -:  214:
        2:  215:    CFE_ES_PerfLogEntry(CFE_TBL_MAIN_PERF_ID);
        -:  216:
        2:  217:    Status = CFE_TBL_TaskInit();
        -:  218:    
        2:  219:    if(Status != CFE_SUCCESS)
        -:  220:    {
        1:  221:      CFE_ES_WriteToSysLog("TBL:Application Init Failed,RC=0x%08X\n", Status);      
        1:  222:      CFE_ES_PerfLogExit(CFE_TBL_MAIN_PERF_ID);      
        -:  223:      /* Note: CFE_ES_ExitApp will not return */
        1:  224:      CFE_ES_ExitApp(CFE_ES_CORE_APP_INIT_ERROR);
        -:  225:    }/* end if */
        -:  226:
        -:  227:    /* Main loop */
        6:  228:    while (Status == CFE_SUCCESS)
        -:  229:    {
        -:  230:        /* Increment the Main task Execution Counter */
        2:  231:        CFE_ES_IncrementTaskCounter();
        -:  232:
        2:  233:        CFE_ES_PerfLogExit(CFE_TBL_MAIN_PERF_ID);
        -:  234:
        -:  235:        /* Pend on receipt of packet */
        2:  236:        Status = CFE_SB_RcvMsg( &CFE_TBL_TaskData.MsgPtr,
        -:  237:                                CFE_TBL_TaskData.CmdPipe,
        -:  238:                                CFE_SB_PEND_FOREVER);
        -:  239:
        2:  240:        CFE_ES_PerfLogEntry(CFE_TBL_MAIN_PERF_ID);
        -:  241:
        2:  242:        if (Status == CFE_SUCCESS)
        -:  243:        {
        -:  244:            /* Process cmd pipe msg */
        1:  245:            CFE_TBL_TaskPipe(CFE_TBL_TaskData.MsgPtr);
        -:  246:        }else{
        1:  247:            CFE_ES_WriteToSysLog("TBL:Error reading cmd pipe,RC=0x%08X\n",Status);
        -:  248:        }/* end if */
        -:  249:
        -:  250:    }/* end while */
        -:  251:
        -:  252:    /* while loop exits only if CFE_SB_RcvMsg returns error */
        2:  253:    CFE_ES_ExitApp(CFE_ES_CORE_APP_RUNTIME_ERROR);
        -:  254:
        2:  255:} /* end CFE_TBL_TaskMain() */
        -:  256:
        -:  257:
        -:  258:/******************************************************************************/
        -:  259:
        -:  260:int32 CFE_TBL_TaskInit(void)
        8:  261:{
        8:  262:    int32 Status = CFE_SUCCESS;
        -:  263:
        -:  264:    /*
        -:  265:    ** Register Table Services with ES
        -:  266:    */
        8:  267:    Status = CFE_ES_RegisterApp();
        -:  268:
        8:  269:    if(Status != CFE_SUCCESS)
        -:  270:    {
        1:  271:      CFE_ES_WriteToSysLog("TBL:Call to CFE_ES_RegisterApp Failed:RC=0x%08X\n",Status);
        1:  272:      return Status;
        -:  273:    }/* end if */
        -:  274:    
        -:  275:    /*
        -:  276:    ** Initialize global Table Services data
        -:  277:    */
        7:  278:    CFE_TBL_InitData();
        -:  279:
        -:  280:    /*
        -:  281:    ** Register event filter table
        -:  282:    */
        7:  283:    Status = CFE_EVS_Register(NULL, 0, 0);
        -:  284:
        7:  285:    if(Status != CFE_SUCCESS)
        -:  286:    {
        1:  287:      CFE_ES_WriteToSysLog("TBL:Call to CFE_EVS_Register Failed:RC=0x%08X\n",Status);
        1:  288:      return Status;
        -:  289:    }/* end if */
        -:  290:    
        -:  291:    /*
        -:  292:    ** Create Software Bus message pipe
        -:  293:    */
        6:  294:    Status = CFE_SB_CreatePipe(&CFE_TBL_TaskData.CmdPipe,
        -:  295:                                CFE_TBL_TaskData.PipeDepth,
        -:  296:                                CFE_TBL_TaskData.PipeName);
        6:  297:    if(Status != CFE_SUCCESS)
        -:  298:    {
        1:  299:      CFE_ES_WriteToSysLog("TBL:Error creating cmd pipe:RC=0x%08X\n",Status);
        1:  300:      return Status;
        -:  301:    }/* end if */                                                                
        -:  302:
        -:  303:    /*
        -:  304:    ** Subscribe to Housekeeping request commands
        -:  305:    */
        5:  306:    Status = CFE_SB_Subscribe(CFE_TBL_SEND_HK_MID, CFE_TBL_TaskData.CmdPipe);
        -:  307:
        5:  308:    if(Status != CFE_SUCCESS)
        -:  309:    {
        1:  310:      CFE_ES_WriteToSysLog("TBL:Error subscribing to HK Request:RC=0x%08X\n",Status);
        1:  311:      return Status;
        -:  312:    }/* end if */
        -:  313:
        -:  314:    /*
        -:  315:    ** Subscribe to Table task ground command packets
        -:  316:    */
        4:  317:    Status = CFE_SB_Subscribe(CFE_TBL_CMD_MID, CFE_TBL_TaskData.CmdPipe);
        -:  318:
        4:  319:    if(Status != CFE_SUCCESS)
        -:  320:    {
        1:  321:      CFE_ES_WriteToSysLog("TBL:Error subscribing to gnd cmds:RC=0x%08X\n",Status);
        1:  322:      return Status;
        -:  323:    }/* end if */
        -:  324:    
        -:  325:    /*
        -:  326:    ** Task startup event message
        -:  327:    */
        3:  328:    Status = CFE_EVS_SendEvent(CFE_TBL_INIT_INF_EID, CFE_EVS_INFORMATION, "cFE TBL Initialized");
        -:  329:
        3:  330:    if(Status != CFE_SUCCESS)
        -:  331:    {
        1:  332:      CFE_ES_WriteToSysLog("TBL:Error sending init event:RC=0x%08X\n",Status);
        1:  333:      return Status;
        -:  334:    }/* end if */
        -:  335:
        2:  336:    return CFE_SUCCESS;
        -:  337:
        -:  338:} /* End of CFE_TBL_TaskInit() */
        -:  339:
        -:  340:
        -:  341:/******************************************************************************/
        -:  342:
        -:  343:void CFE_TBL_InitData(void)
        8:  344:{
        -:  345:    /* Initialize Counters */
        8:  346:    CFE_TBL_TaskData.CmdCounter = 0;
        8:  347:    CFE_TBL_TaskData.ErrCounter = 0;
        8:  348:    CFE_TBL_TaskData.SuccessValCtr = 0;
        8:  349:    CFE_TBL_TaskData.FailedValCtr = 0;
        -:  350:
        -:  351:    /* Get the assigned Application ID for the Table Services Task */
        8:  352:    CFE_ES_GetAppID(&CFE_TBL_TaskData.TableTaskAppId);
        -:  353:
        -:  354:    /* Initialize Command Pipe Parameters */
        8:  355:    CFE_TBL_TaskData.PipeDepth = CFE_TBL_TASK_PIPE_DEPTH;
        8:  356:    strncpy(CFE_TBL_TaskData.PipeName, CFE_TBL_TASK_PIPE_NAME, 16);
        -:  357:
        -:  358:    /* Initialize Packet Headers */
        8:  359:    CFE_SB_InitMsg(&CFE_TBL_TaskData.HkPacket,
        -:  360:                   CFE_TBL_HK_TLM_MID,
        -:  361:                   sizeof(CFE_TBL_HkPacket_t),
        -:  362:                   TRUE);
        -:  363:
        8:  364:    CFE_SB_InitMsg(&CFE_TBL_TaskData.TblRegPacket,
        -:  365:                   CFE_TBL_REG_TLM_MID,
        -:  366:                   sizeof(CFE_TBL_TblRegPacket_t),
        -:  367:                   TRUE);
        -:  368:
        8:  369:} /* End of CFE_TBL_InitData() */
        -:  370:
        -:  371:
        -:  372:/******************************************************************************/
        -:  373:
        -:  374:void CFE_TBL_TaskPipe(CFE_SB_Msg_t *MessagePtr)
        9:  375:{
        9:  376:    CFE_SB_MsgId_t       MessageID = CFE_SB_GetMsgId(MessagePtr);
        9:  377:    uint16               CommandCode = CFE_SB_GetCmdCode(MessagePtr);
        -:  378:    int16                CmdIndx;
        -:  379:    uint32               ActualLength;
        9:  380:    CFE_TBL_CmdProcRet_t CmdStatus = CFE_TBL_INC_ERR_CTR; /* Assume a failed command */
        -:  381:
        -:  382:    /* Search the Command Handler Table for a matching message */
        9:  383:    CmdIndx = CFE_TBL_SearchCmdHndlrTbl(MessageID, CommandCode);
        -:  384:
        -:  385:    /* Check to see if a matching command was found */
        9:  386:    if (CmdIndx >= 0)
        -:  387:    {
        -:  388:        /* Verify Message Length before processing */
        2:  389:        ActualLength = CFE_SB_GetTotalMsgLength(MessagePtr);
        2:  390:        if (ActualLength == CFE_TBL_CmdHandlerTbl[CmdIndx].ExpectedLength)
        -:  391:        {
        -:  392:            /* All checks have passed, call the appropriate message handler */
        1:  393:            CmdStatus = (CFE_TBL_CmdHandlerTbl[CmdIndx].MsgProcFuncPtr)(MessagePtr);
        -:  394:        }
        -:  395:        else /* Bad Message Length */
        -:  396:        {
        1:  397:            CFE_EVS_SendEvent( CFE_TBL_LEN_ERR_EID, CFE_EVS_ERROR,
        -:  398:                               "Invalid msg length -- ID = 0x%04X, CC = %d, Len = %d (!= %d)",
        -:  399:                               MessageID, CommandCode, ActualLength,
        -:  400:                               CFE_TBL_CmdHandlerTbl[CmdIndx].ExpectedLength );
        -:  401:        }
        -:  402:
        -:  403:        /* Only update command counters when message has a command code */
        2:  404:        if (CFE_TBL_CmdHandlerTbl[CmdIndx].MsgTypes == CFE_TBL_CMD_MSGTYPE)
        -:  405:        {
        2:  406:            if (CmdStatus == CFE_TBL_INC_CMD_CTR)
        -:  407:            {
        1:  408:                CFE_TBL_TaskData.CmdCounter++;
        -:  409:            }
        1:  410:            else if (CmdStatus == CFE_TBL_INC_ERR_CTR)
        -:  411:            {
        1:  412:                CFE_TBL_TaskData.ErrCounter++;
        -:  413:            }
        -:  414:        }
        -:  415:    }
        -:  416:    else
        -:  417:    {
        -:  418:        /* Determine whether event message should be */
        -:  419:        /* "Bad Command Code" or "Bad Message ID"    */
        7:  420:        if (CmdIndx == CFE_TBL_BAD_CMD_CODE)
        -:  421:        {
        1:  422:            CFE_EVS_SendEvent(CFE_TBL_CC1_ERR_EID, CFE_EVS_ERROR,
        -:  423:                              "Invalid command code -- ID = 0x%04X, CC = %d",
        -:  424:                              MessageID, CommandCode);
        -:  425:
        -:  426:            /* Update the command error counter */
        1:  427:            CFE_TBL_TaskData.ErrCounter++;
        -:  428:        }
        -:  429:        else  /* CmdIndx == CFE_TBL_BAD_MSG_ID */
        -:  430:        {
        6:  431:            CFE_EVS_SendEvent(CFE_TBL_MID_ERR_EID, CFE_EVS_ERROR,
        -:  432:                             "Invalid message ID -- ID = 0x%04X",
        -:  433:                              MessageID);
        -:  434:            /*
        -:  435:            ** Note: we only increment the command error counter when
        -:  436:            **    processing messages with command codes
        -:  437:            */
        -:  438:        }
        -:  439:    }
        -:  440:
        -:  441:    return;
        -:  442:
        -:  443:} /* End of CFE_TBL_TaskPipe() */
        -:  444:
        -:  445:
        -:  446:/******************************************************************************/
        -:  447:
        -:  448:int16 CFE_TBL_SearchCmdHndlrTbl( CFE_SB_MsgId_t MessageID, uint16 CommandCode )
       13:  449:{
       13:  450:    int16     TblIndx = CFE_TBL_BAD_CMD_CODE;
       13:  451:    boolean   FoundMsg = FALSE;
       13:  452:    boolean   FoundMatch = FALSE;
        -:  453:
        -:  454:    do
        -:  455:    {
        -:  456:        /* Point to next entry in Command Handler Table */
      115:  457:        TblIndx++;
        -:  458:
        -:  459:        /* Check to see if we found a matching Message ID */
      115:  460:        if ((CFE_TBL_CmdHandlerTbl[TblIndx].MsgId == MessageID) &&
        -:  461:            (CFE_TBL_CmdHandlerTbl[TblIndx].MsgTypes != CFE_TBL_TERM_MSGTYPE))
        -:  462:        {
        -:  463:            /* Flag any found message IDs so that if there is an error,        */
        -:  464:            /* we can determine if it was a bad message ID or bad command code */
       24:  465:            FoundMsg = TRUE;
        -:  466:
        -:  467:            /* If entry in the Command Handler Table is a command entry, */
        -:  468:            /* then check for a matching command code                    */
       24:  469:            if (CFE_TBL_CmdHandlerTbl[TblIndx].MsgTypes == CFE_TBL_CMD_MSGTYPE)
        -:  470:            {
       23:  471:                if (CFE_TBL_CmdHandlerTbl[TblIndx].CmdCode == CommandCode)
        -:  472:                {
        -:  473:                    /* Found matching message ID and Command Code */
        3:  474:                    FoundMatch = TRUE;
        -:  475:                }
        -:  476:            }
        -:  477:            else /* Message is not a command message with specific command code */
        -:  478:            {
        -:  479:                /* Automatically assume a match when legit */
        -:  480:                /* Message ID is all that is required      */
        1:  481:                FoundMatch = TRUE;
        -:  482:            }
        -:  483:        }
      115:  484:    } while ((!FoundMatch) && (CFE_TBL_CmdHandlerTbl[TblIndx].MsgTypes != CFE_TBL_TERM_MSGTYPE));
        -:  485:
        -:  486:    /* If we failed to find a match, return a negative index */
       13:  487:    if (!FoundMatch)
        -:  488:    {
        -:  489:        /* Determine if the message ID was bad or the command code */
        9:  490:        if (FoundMsg)
        -:  491:        {
        -:  492:            /* A matching message ID was found, so the command code must be bad */
        2:  493:            TblIndx = CFE_TBL_BAD_CMD_CODE;
        -:  494:        }
        -:  495:        else /* No matching message ID was found */
        -:  496:        {
        7:  497:            TblIndx = CFE_TBL_BAD_MSG_ID;
        -:  498:        }
        -:  499:    }
        -:  500:
       13:  501:    return TblIndx;
        -:  502:}   /* End of CFE_TBL_SearchCmdHndlrTbl() */
        -:  503:
        -:  504:
        -:  505:/************************/
        -:  506:/*  End of File Comment */
        -:  507:/************************/
        -:  508:
