        -:    0:Source:/Users/rmcgraw/Projects/cFE/fsw/cfe-core/src/sb/cfe_sb_buf.c
        -:    0:Graph:cfe_sb_buf.gcno
        -:    0:Data:cfe_sb_buf.gcda
        -:    0:Runs:1
        -:    0:Programs:2
        -:    1:/******************************************************************************
        -:    2:** File: cfe_sb_buf.c
        -:    3:**
        -:    4:**      Copyright (c) 2004-2006, United States government as represented by the
        -:    5:**      administrator of the National Aeronautics Space Administration.
        -:    6:**      All rights reserved. This software(cFE) was created at NASA's Goddard
        -:    7:**      Space Flight Center pursuant to government contracts.
        -:    8:**
        -:    9:**      This software may be used only pursuant to a United States government
        -:   10:**      sponsored project and the United States government may not be charged
        -:   11:**      for use thereof.
        -:   12:**
        -:   13:**
        -:   14:** Purpose:
        -:   15:**      This file contains the source code for the SB memory management
        -:   16:**      functions.
        -:   17:**
        -:   18:** Author:   R.McGraw/SSI
        -:   19:**
        -:   20:**
        -:   21:** $Log: cfe_sb_buf.c.gcov  $
        -:   21:** Revision 1.3 2009/05/07 15:22:41EDT rmcgraw 
        -:   21:** DCR7366:1 Unit test results for post 5.2 build
        -:   22:** Revision 1.7 2009/04/08 13:25:26EDT rmcgraw 
        -:   23:** DCR5802:4 Change data type int to int32
        -:   24:** Revision 1.6 2009/02/11 14:19:50EST rmcgraw 
        -:   25:** DCR6269:1 Removed the 'Buf' in mem pool names
        -:   26:** Revision 1.5 2009/02/06 11:29:04EST rmcgraw 
        -:   27:** DCR5801:2 General Cleanup
        -:   28:** Revision 1.4 2009/02/03 11:06:58EST rmcgraw 
        -:   29:** DCR5801:2 Changed destination desciptors from array based to linked list
        -:   30:** Revision 1.3 2009/01/30 11:13:08EST rmcgraw 
        -:   31:** DCR5801:6 Moved semaphore unlock to above GetAppid call in DecrMsgLimCnt
        -:   32:** Revision 1.2 2009/01/23 15:00:16EST rmcgraw 
        -:   33:** DCR5802:1 Removed redundant events in cfe_sb_buf.c
        -:   34:** Revision 1.1 2008/04/17 08:05:31EDT ruperera 
        -:   35:** Initial revision
        -:   36:** Member added to cfe project on tlserver3
        -:   37:** Revision 1.34 2007/09/19 17:03:57EDT rjmcgraw 
        -:   38:** Fixed compiler error
        -:   39:** Revision 1.33 2007/09/19 14:39:25EDT rjmcgraw
        -:   40:** DCR4421 Removed use count error processing
        -:   41:** Revision 1.32 2007/08/17 15:59:51EDT rjmcgraw
        -:   42:** Changes to free semaphore before calling SendEventWithAppId
        -:   43:** Revision 1.31 2007/08/07 12:52:40EDT dlkobe
        -:   44:** Modified CFE_ES_GetPoolBuf API's first parameter to be of type uint32**
        -:   45:** Revision 1.30 2007/07/12 17:05:05EDT rjmcgraw
        -:   46:** DCR4680:1 Replaced calls to CFE_SB_LogEvent with SendEventWithAppid
        -:   47:** Revision 1.29 2007/03/27 08:57:03EST rjmcgraw
        -:   48:** Added #include cfe_sb_events.h
        -:   49:** Revision 1.28 2007/03/22 13:05:45EST rjmcgraw
        -:   50:** DCR246:Replace SB stat Descriptors in use to Peak Buffers In Use
        -:   51:** Revision 1.27 2006/10/16 14:30:43EDT rjmcgraw
        -:   52:** Minor changes to comply with MISRA standard
        -:   53:** Revision 1.26 2006/09/11 16:38:03EDT rjmcgraw
        -:   54:** Added condition to update statistics only if 'put' is successful
        -:   55:** Revision 1.25 2006/09/01 11:07:26EDT kkaudra
        -:   56:** IV&V:Removed cfe_evs.h
        -:   57:**
        -:   58:******************************************************************************/
        -:   59:
        -:   60:/*
        -:   61:**  Include Files
        -:   62:*/
        -:   63:
        -:   64:#include "cfe_sb_priv.h"
        -:   65:#include "cfe_sb_events.h"
        -:   66:#include "osapi.h"
        -:   67:#include "cfe_es.h"
        -:   68:#include "cfe_error.h"
        -:   69:
        -:   70:/*
        -:   71:**  External Declarations
        -:   72:*/
        -:   73:extern cfe_sb_t CFE_SB;
        -:   74:
        -:   75:
        -:   76:/******************************************************************************
        -:   77:**  Function:   CFE_SB_GetBufferFromPool()
        -:   78:**
        -:   79:**  Purpose:
        -:   80:**    Request a buffer from the SB buffer pool. The SB buffer pool is a
        -:   81:**    pre-allocated block of memory of size CFE_SB_BUF_MEMORY_BYTES. It is used
        -:   82:**    by the SB to dynamically allocate memory to hold the message and a buffer
        -:   83:**    descriptor associated with the message during the sending of a message.
        -:   84:**
        -:   85:**  Arguments:
        -:   86:**    msgId        : Message ID
        -:   87:**    size         : Size of the buffer in bytes.
        -:   88:**
        -:   89:**  Return:
        -:   90:**    Pointer to the buffer descriptor for the new buffer, or NULL if the buffer
        -:   91:**    could not be allocated.
        -:   92:*/
        -:   93:
       11:   94:CFE_SB_BufferD_t * CFE_SB_GetBufferFromPool(uint16 MsgId, uint16 Size) {
        -:   95:   int32                stat1;
       11:   96:   uint8               *address = NULL;
       11:   97:   CFE_SB_BufferD_t    *bd = NULL;
        -:   98:
        -:   99:    /* Allocate a new buffer descriptor from the SB memory pool.*/
       11:  100:    stat1 = CFE_ES_GetPoolBuf((uint32 **)&bd, CFE_SB.Mem.PoolHdl,  sizeof(CFE_SB_BufferD_t));
       11:  101:    if(stat1 < 0){
        1:  102:        return NULL;
        -:  103:    }
        -:  104:
        -:  105:    /* Add the size of a buffer descriptor to the memory-in-use ctr and */
        -:  106:    /* adjust the high water mark if needed */
       10:  107:    CFE_SB.StatTlmMsg.MemInUse+=stat1;
       10:  108:    if(CFE_SB.StatTlmMsg.MemInUse > CFE_SB.StatTlmMsg.PeakMemInUse){
       10:  109:       CFE_SB.StatTlmMsg.PeakMemInUse = CFE_SB.StatTlmMsg.MemInUse;
        -:  110:    }/* end if */
        -:  111:
        -:  112:    /* Allocate a new buffer (from the SB memory pool) to hold the message  */
       10:  113:    stat1 = CFE_ES_GetPoolBuf((uint32 **)&address, CFE_SB.Mem.PoolHdl, Size);
       10:  114:    if((stat1 < 0)||(address==NULL)){
        1:  115:        return NULL;
        -:  116:    }
        -:  117:    
        -:  118:    /* if both allocations succeed, increment the number of buffers in use */
        -:  119:    /* and adjust the high water mark if needed */
        9:  120:    CFE_SB.StatTlmMsg.SBBuffersInUse++;
        9:  121:    if(CFE_SB.StatTlmMsg.SBBuffersInUse > CFE_SB.StatTlmMsg.PeakSBBuffersInUse){
        9:  122:       CFE_SB.StatTlmMsg.PeakSBBuffersInUse = CFE_SB.StatTlmMsg.SBBuffersInUse;
        -:  123:    }/* end if */
        -:  124:
        -:  125:    /* Add the size of the actual buffer to the memory-in-use ctr and */
        -:  126:    /* adjust the high water mark if needed */
        9:  127:    CFE_SB.StatTlmMsg.MemInUse+=stat1;
        9:  128:    if(CFE_SB.StatTlmMsg.MemInUse > CFE_SB.StatTlmMsg.PeakMemInUse){
        9:  129:       CFE_SB.StatTlmMsg.PeakMemInUse = CFE_SB.StatTlmMsg.MemInUse;
        -:  130:    }/* end if */
        -:  131:
        -:  132:    /* Initialize the buffer descriptor structure. */
        9:  133:    bd->MsgId     = MsgId;
        9:  134:    bd->UseCount  = 1;
        9:  135:    bd->Size      = Size;
        9:  136:    bd->Buffer    = (void *)address;
        -:  137:
        9:  138:    return bd;
        -:  139:
       11:  140:}/* CFE_SB_GetBufferFromPool */
        -:  141:
        -:  142:
        -:  143:/******************************************************************************
        -:  144:**  Function:   CFE_SB_ReturnBufferToPool()
        -:  145:**
        -:  146:**  Purpose:
        -:  147:**    This function will return two blocks of memory back to the memory pool.
        -:  148:**    One block is the memory used to store the actual message, the other block
        -:  149:**    was used to store the buffer descriptor for the message.
        -:  150:**
        -:  151:**  Arguments:
        -:  152:**    bd     : Pointer to the buffer descriptor.
        -:  153:**
        -:  154:**  Return:
        -:  155:**    SB status
        -:  156:*/
        9:  157:int32 CFE_SB_ReturnBufferToPool(CFE_SB_BufferD_t *bd){
        -:  158:    int32    Stat;
        -:  159:
        -:  160:    /* give the actual buffer back to the buffer pool */
        9:  161:    Stat = CFE_ES_PutPoolBuf(CFE_SB.Mem.PoolHdl, (uint32 *)bd->Buffer);
        9:  162:    if(Stat > 0){
        9:  163:        CFE_SB.StatTlmMsg.SBBuffersInUse--;
        -:  164:        /* Substract the size of the actual buffer from the Memory in use ctr */
        9:  165:        CFE_SB.StatTlmMsg.MemInUse-=Stat;
        -:  166:    }/* end if */
        -:  167:
        -:  168:    /* give the buf descriptor back to the buf descriptor pool */
        9:  169:    Stat = CFE_ES_PutPoolBuf(CFE_SB.Mem.PoolHdl, (uint32 *)bd);
        9:  170:    if(Stat > 0){
        -:  171:        /* Substract the size of a buffer descriptor from the Memory in use ctr */
        9:  172:        CFE_SB.StatTlmMsg.MemInUse-=Stat;
        -:  173:    }/* end if */
        -:  174:
        9:  175:    return CFE_SUCCESS;
        -:  176:
        9:  177:}/* end CFE_SB_ReturnBufferToPool */
        -:  178:
        -:  179:
        -:  180:
        -:  181:/******************************************************************************
        -:  182:**  Function:   CFE_SB_DecrBufUseCnt()
        -:  183:**
        -:  184:**  Purpose:
        -:  185:**    This function will decrement the UseCount of a particular buffer. If the
        -:  186:**    the UseCount is decremented to zero, it will return the buffer to the
        -:  187:**    memory pool.
        -:  188:**
        -:  189:**  Note:
        -:  190:**    UseCount is a variable in the CFE_SB_BufferD_t and is used only to
        -:  191:**    determine when a buffer may be returned to the memory pool.
        -:  192:**
        -:  193:**  Arguments:
        -:  194:**    bd : Pointer to the buffer descriptor.
        -:  195:**
        -:  196:**  Return:
        -:  197:**    CFE_SUCCESS for normal operation.
        -:  198:*/
       14:  199:int32 CFE_SB_DecrBufUseCnt(CFE_SB_BufferD_t *bd){
        -:  200:
        -:  201:    /* range check the UseCount variable */
       14:  202:    if(bd->UseCount > 0){
        -:  203:
       14:  204:        bd->UseCount--;
        -:  205:
       14:  206:        if (bd->UseCount == 0) {
        9:  207:           CFE_SB_ReturnBufferToPool(bd);
        -:  208:        }/* end if */
        -:  209:
        -:  210:    }
        -:  211:
       14:  212:    return CFE_SUCCESS;
        -:  213:
       14:  214:}/* end CFE_SB_DecrBufUseCnt */
        -:  215:
        -:  216:
        -:  217:/******************************************************************************
        -:  218:**  Function:   CFE_SB_DecrMsgLimCnt()
        -:  219:**
        -:  220:**  Purpose:
        -:  221:**    This function decrements the counter that is used to check the
        -:  222:**    MsgIdToPipe Limit.
        -:  223:**
        -:  224:**  Arguments:
        -:  225:**    dest : Pointer to the destination descriptor.
        -:  226:**
        -:  227:**  Return:
        -:  228:**    CFE_SB_MSGCNT_ERR if an error is detected or
        -:  229:**    CFE_SUCCESS for normal operation.
        -:  230:*/
        5:  231:int32 CFE_SB_DecrMsgLimCnt(CFE_SB_DestinationD_t *dest){
        -:  232:
        5:  233:    uint32 AppId = 0;
        -:  234:
        5:  235:    if(dest==NULL){
        3:  236:        return CFE_SB_BAD_ARGUMENT;
        -:  237:    }/* end if */
        -:  238:
        2:  239:    if (dest->BuffCount > 0){
        -:  240:
        1:  241:        dest->BuffCount--;
        -:  242:
        -:  243:    }else{
        -:  244:
        1:  245:        CFE_SB_UnlockSharedData(__FILE__,__LINE__);
        1:  246:        CFE_ES_GetAppID(&AppId);        
        1:  247:        CFE_EVS_SendEventWithAppID(CFE_SB_MSGCNT_ERR1_EID,CFE_EVS_ERROR,CFE_SB.AppId,
        -:  248:              "MsgId-to-Pipe Lim Cntr Err,Cnt %d,Pipe %s,app %s,Lim %d",
        -:  249:              dest->BuffCount,CFE_SB_GetPipeName(dest->PipeId),
        -:  250:              CFE_SB_GetAppTskName(AppId),dest->MsgId2PipeLim);
        1:  251:        CFE_SB_LockSharedData(__FILE__,__LINE__);
        1:  252:        return CFE_SB_MSGCNT_ERR;
        -:  253:
        -:  254:    }/* end if */
        -:  255:
        1:  256:    return CFE_SUCCESS;
        -:  257:
        5:  258:}/* end CFE_SB_DecrMsgLimCnt */
        -:  259:
        -:  260:
        -:  261:
        -:  262:/******************************************************************************
        -:  263:**  Function:   CFE_SB_GetDestinationBlk()
        -:  264:**
        -:  265:**  Purpose:
        -:  266:**    This function gets a destination descriptor from the SB memory pool.
        -:  267:**
        -:  268:**  Arguments:
        -:  269:**    None
        -:  270:**
        -:  271:**  Return:
        -:  272:**    Pointer to the destination descriptor
        -:  273:*/
        -:  274:CFE_SB_DestinationD_t *CFE_SB_GetDestinationBlk(void)
      406:  275:{
        -:  276:    int32 Stat;
      406:  277:    CFE_SB_DestinationD_t *Dest = NULL;
        -:  278:        
        -:  279:    /* Allocate a new destination descriptor from the SB memory pool.*/
      406:  280:    Stat = CFE_ES_GetPoolBuf((uint32 **)&Dest, CFE_SB.Mem.PoolHdl,  sizeof(CFE_SB_DestinationD_t));
      406:  281:    if(Stat < 0){
        2:  282:        return NULL;
        -:  283:    }
        -:  284:    
        -:  285:    /* Add the size of a destination descriptor to the memory-in-use ctr and */
        -:  286:    /* adjust the high water mark if needed */
      404:  287:    CFE_SB.StatTlmMsg.MemInUse+=Stat;
      404:  288:    if(CFE_SB.StatTlmMsg.MemInUse > CFE_SB.StatTlmMsg.PeakMemInUse){
      404:  289:       CFE_SB.StatTlmMsg.PeakMemInUse = CFE_SB.StatTlmMsg.MemInUse;
        -:  290:    }/* end if */
        -:  291:
      404:  292:    return Dest;
        -:  293:
      406:  294:}/* end CFE_SB_GetDestinationBlk */
        -:  295:
        -:  296:
        -:  297:/******************************************************************************
        -:  298:**  Function:   CFE_SB_PutDestinationBlk()
        -:  299:**
        -:  300:**  Purpose:
        -:  301:**    This function returns a destination descriptor to the SB memory pool.
        -:  302:**
        -:  303:**  Arguments:
        -:  304:**    None
        -:  305:**
        -:  306:**  Return:
        -:  307:**    Pointer to the destination descriptor
        -:  308:*/
        -:  309:int32 CFE_SB_PutDestinationBlk(CFE_SB_DestinationD_t *Dest)
      405:  310:{
        -:  311:    int32 Stat;
        -:  312:
      405:  313:    if(Dest==NULL){
        1:  314:        return CFE_SB_BAD_ARGUMENT;
        -:  315:    }/* end if */
        -:  316:    
        -:  317:    /* give the destination block back to the SB memory pool */
      404:  318:    Stat = CFE_ES_PutPoolBuf(CFE_SB.Mem.PoolHdl, (uint32 *)Dest);
      404:  319:    if(Stat > 0){
        -:  320:        /* Substract the size of the destination block from the Memory in use ctr */
      404:  321:        CFE_SB.StatTlmMsg.MemInUse-=Stat;
        -:  322:    }/* end if */
        -:  323:
      404:  324:    return CFE_SUCCESS;
        -:  325:
      405:  326:}/* end CFE_SB_PutDestinationBlk */
        -:  327:
        -:  328:
        -:  329:/*****************************************************************************/
