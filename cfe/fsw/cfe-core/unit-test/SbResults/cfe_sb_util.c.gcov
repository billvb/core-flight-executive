        -:    0:Source:/home/sstrege/cFE650/cfe/fsw/cfe-core/src/sb/cfe_sb_util.c
        -:    0:Graph:cfe_sb_util.gcno
        -:    0:Data:cfe_sb_util.gcda
        -:    0:Runs:1
        -:    0:Programs:6
        -:    1:/******************************************************************************
        -:    2:** File: cfe_sb_util.c
        -:    3:**
        -:    4:**      Copyright (c) 2004-2012, United States government as represented by the
        -:    5:**      administrator of the National Aeronautics Space Administration.
        -:    6:**      All rights reserved. This software(cFE) was created at NASA's Goddard
        -:    7:**      Space Flight Center pursuant to government contracts.
        -:    8:**
        -:    9:**      This is governed by the NASA Open Source Agreement and may be used,
        -:   10:**      distributed and modified only pursuant to the terms of that agreement.
        -:   11:**
        -:   12:**
        -:   13:**
        -:   14:** Purpose:
        -:   15:**      This file contains 'access' macros and functions for reading and
        -:   16:**      writing message header fields.
        -:   17:**
        -:   18:** Author:   R.McGraw/SSI
        -:   19:**
        -:   20:** $Log: cfe_sb_util.c  $
        -:   21:** Revision 1.8 2014/07/10 09:24:08GMT-05:00 rmcgraw 
        -:   22:** DCR9772:1 Changes from C. Monaco & W.M Reid from APL for endianess neutrality
        -:   23:** Revision 1.7 2014/06/06 15:18:37EDT rmcgraw
        -:   24:** DCR21559 - Changed CFE_SB_MsgHdrSize to use macro instead of writing msgid directly
        -:   25:** Revision 1.6 2012/09/27 17:16:04EDT aschoeni
        -:   26:** Fixed 32_32_M_20 get function to shift by 12 instead of masking
        -:   27:** Revision 1.5 2012/01/13 12:15:13EST acudmore
        -:   28:** Changed license text to reflect open source
        -:   29:** Revision 1.4 2011/02/03 15:25:37EST lwalling
        -:   30:** Modified Get/Set time functions to support CFE_SB_PACKET_TIME_FORMAT selection
        -:   31:** Revision 1.3 2010/10/25 13:54:10EDT aschoeni
        -:   32:** Removed unused value from SetUserDataLength
        -:   33:** Revision 1.2 2010/10/04 15:21:13EDT jmdagost
        -:   34:** Cleaned up copyright symbol.
        -:   35:** Revision 1.1 2008/04/17 08:05:32EDT ruperera
        -:   36:** Initial revision
        -:   37:** Member added to project c:/MKSDATA/MKS-REPOSITORY/MKS-CFE-PROJECT/fsw/cfe-core/src/sb/project.pj
        -:   38:** Revision 1.10 2006/10/16 14:31:00EDT rjmcgraw
        -:   39:** Minor changes to comply with MISRA standard
        -:   40:** Revision 1.9 2006/06/12 19:26:06GMT rjmcgraw
        -:   41:** Added legal statement
        -:   42:** Revision 1.8 2006/06/05 15:43:50EDT rjmcgraw
        -:   43:** Comment changes in reference to DCR398
        -:   44:** Revision 1.7 2006/04/28 18:35:14GMT rjmcgraw
        -:   45:** Corrected problems with checksum utils when no sec hdr present
        -:   46:** Revision 1.6 2006/04/28 18:02:20GMT rjmcgraw
        -:   47:** Corrected problems with Set/GetCmdCode for cmd pkts wo sec hdr
        -:   48:** Revision 1.5 2006/04/27 18:45:10GMT rjmcgraw
        -:   49:** Corrected problems with Set/GetMsgTime when no sec hdr is present in tlm pkts
        -:   50:**
        -:   51:******************************************************************************/
        -:   52:
        -:   53:
        -:   54:/*
        -:   55:** Include Files
        -:   56:*/
        -:   57:
        -:   58:#include "cfe_sb.h"
        -:   59:#include "ccsds.h"
        -:   60:#include "osapi.h"
        -:   61:#include "cfe_error.h"
        -:   62:
        -:   63:
        -:   64:
        -:   65:/******************************************************************************
        -:   66:**  Function:  CFE_SB_InitMsg()
        -:   67:**
        -:   68:**  Purpose:
        -:   69:**    Initialize the header fields of a message
        -:   70:**
        -:   71:**  Arguments:
        -:   72:**    MsgPtr  - Pointer to the header of a message.
        -:   73:**    MsgId   - MsgId to use for the message.
        -:   74:**    Length  - Length of the message in bytes.
        -:   75:**    Clear   - Indicates whether to clear the entire message:
        -:   76:**                TRUE = fill sequence count and packet data with zeros
        -:   77:**                FALSE = leave sequence count and packet data unchanged
        -:   78:**  Return:
        -:   79:**    (none)
        -:   80:*/
        -:   81:void CFE_SB_InitMsg(void           *MsgPtr,
        -:   82:                    CFE_SB_MsgId_t MsgId,
        -:   83:                    uint16         Length,
        -:   84:                    boolean        Clear )
      243:   85:{
        -:   86:#ifdef MESSAGE_FORMAT_IS_CCSDS
        -:   87:
      243:   88:    CCSDS_InitPkt ((CCSDS_PriHdr_t *)MsgPtr,(uint16)MsgId,Length,Clear);
        -:   89:
        -:   90:#endif
      243:   91:} /* end CFE_SB_InitMsg */
        -:   92:
        -:   93:
        -:   94:
        -:   95:/******************************************************************************
        -:   96:**  Function:  CFE_SB_MsgHdrSize()
        -:   97:**
        -:   98:**  Purpose:
        -:   99:**    Get the size of a message header.
        -:  100:**
        -:  101:**  Arguments:
        -:  102:**    MsgPtr - Pointer to a CFE_SB_Msg_t
        -:  103:**
        -:  104:**  Return:
        -:  105:**     Size of Message Header.
        -:  106:*/
        -:  107:uint16 CFE_SB_MsgHdrSize(CFE_SB_MsgId_t MsgId)
   524296:  108:{
        -:  109:#ifdef MESSAGE_FORMAT_IS_CCSDS
        -:  110:
        -:  111:    uint16 size;
        -:  112:    CCSDS_PriHdr_t  CCSDSPriHdr;
        -:  113:
   524296:  114:    CCSDS_WR_SID(CCSDSPriHdr,MsgId);
        -:  115:
        -:  116:    /* if secondary hdr is not present... */
   524296:  117:    if(CCSDS_RD_SHDR(CCSDSPriHdr) == 0){
        -:  118:
   262148:  119:        size = sizeof(CCSDS_PriHdr_t);
        -:  120:
   262148:  121:    }else if(CCSDS_RD_TYPE(CCSDSPriHdr) == CCSDS_CMD){
        -:  122:
   131074:  123:        size = CFE_SB_CMD_HDR_SIZE;
        -:  124:
        -:  125:    }else{
        -:  126:
   131074:  127:        size = CFE_SB_TLM_HDR_SIZE;
        -:  128:    }
        -:  129:
   524296:  130:    return size;
        -:  131:
        -:  132:#endif
        -:  133:}/* end CFE_SB_MsgHdrSize */
        -:  134:
        -:  135:
        -:  136:/******************************************************************************
        -:  137:**  Function:  CFE_SB_GetUserData()
        -:  138:**
        -:  139:**  Purpose:
        -:  140:**    Get a pointer to the user data portion of a message.
        -:  141:**
        -:  142:**  Arguments:
        -:  143:**    MsgPtr - Pointer to a CFE_SB_Msg_t
        -:  144:**
        -:  145:**  Return:
        -:  146:**    Pointer to the first byte after the headers
        -:  147:*/
        -:  148:void *CFE_SB_GetUserData(CFE_SB_MsgPtr_t MsgPtr)
        4:  149:{
        -:  150:#ifdef MESSAGE_FORMAT_IS_CCSDS
        -:  151:    uint8           *BytePtr;
        -:  152:    CFE_SB_MsgId_t  MsgId;
        -:  153:    uint16          HdrSize;
        -:  154:
        4:  155:    BytePtr = (uint8 *)MsgPtr;
        4:  156:    MsgId = CCSDS_RD_SID(MsgPtr->Hdr);
        4:  157:    HdrSize = CFE_SB_MsgHdrSize(MsgId);
        -:  158:
        4:  159:    return (BytePtr + HdrSize);
        -:  160:#endif
        -:  161:}/* end CFE_SB_GetUserData */
        -:  162:
        -:  163:
        -:  164:/******************************************************************************
        -:  165:**  Function:  CFE_SB_GetMsgId()
        -:  166:**
        -:  167:**  Purpose:
        -:  168:**    Get the message ID of a message.
        -:  169:**
        -:  170:**  Arguments:
        -:  171:**    MsgPtr - Pointer to a CFE_SB_Msg_t
        -:  172:**
        -:  173:**  Return:
        -:  174:**    The Message Id in the message.
        -:  175:*/
        -:  176:CFE_SB_MsgId_t CFE_SB_GetMsgId(CFE_SB_MsgPtr_t MsgPtr)
    65614:  177:{
        -:  178:#ifdef MESSAGE_FORMAT_IS_CCSDS
        -:  179:
    65614:  180:    return CCSDS_RD_SID(MsgPtr->Hdr);
        -:  181:
        -:  182:#endif
        -:  183:}/* end CFE_SB_GetMsgId */
        -:  184:
        -:  185:
        -:  186:/******************************************************************************
        -:  187:**  Function:  CFE_SB_SetMsgId()
        -:  188:**
        -:  189:**  Purpose:
        -:  190:**    Set the message Id of a message.
        -:  191:**
        -:  192:**  Arguments:
        -:  193:**    MsgPtr - Pointer to a CFE_SB_Msg_t
        -:  194:**    MsgId  - Message Id to be written
        -:  195:**
        -:  196:**  Return:
        -:  197:**    (none)
        -:  198:*/
        -:  199:void CFE_SB_SetMsgId(CFE_SB_MsgPtr_t MsgPtr,
        -:  200:                     CFE_SB_MsgId_t MsgId)
    65562:  201:{
        -:  202:#ifdef MESSAGE_FORMAT_IS_CCSDS
        -:  203:
    65562:  204:    CCSDS_WR_SID(MsgPtr->Hdr,MsgId);
        -:  205:
        -:  206:#endif
    65562:  207:}/* end CFE_SB_SetMsgId */
        -:  208:
        -:  209:
        -:  210:/******************************************************************************
        -:  211:**  Function:  CFE_SB_GetUserDataLength()
        -:  212:**
        -:  213:**  Purpose:
        -:  214:**    Get the length of the user data of a message (total size - hdrs).
        -:  215:**
        -:  216:**  Arguments:
        -:  217:**    MsgPtr - Pointer to a CFE_SB_Msg_t
        -:  218:**
        -:  219:**  Return:
        -:  220:**    Size of the message minus the headers
        -:  221:*/
        -:  222:uint16 CFE_SB_GetUserDataLength(CFE_SB_MsgPtr_t MsgPtr)
   262144:  223:{
        -:  224:#ifdef MESSAGE_FORMAT_IS_CCSDS
        -:  225:    uint16 TotalMsgSize;
        -:  226:    uint16 HdrSize;
        -:  227:
        -:  228:    CFE_SB_MsgId_t MsgId;
   262144:  229:    MsgId = CCSDS_RD_SID(MsgPtr->Hdr);
   262144:  230:    TotalMsgSize = CFE_SB_GetTotalMsgLength(MsgPtr);
   262144:  231:    HdrSize = CFE_SB_MsgHdrSize(MsgId);
        -:  232:
   262144:  233:    return (TotalMsgSize - HdrSize);
        -:  234:#endif
        -:  235:}/* end CFE_SB_GetUserDataLength */
        -:  236:
        -:  237:
        -:  238:/******************************************************************************
        -:  239:**  Function:  CFE_SB_SetUserDataLength()
        -:  240:**
        -:  241:**  Purpose:
        -:  242:**    Set the length field in the hdr, given the user data length.
        -:  243:**
        -:  244:**  Arguments:
        -:  245:**    MsgPtr     - Pointer to a CFE_SB_Msg_t
        -:  246:**    DataLength - Length of the user data
        -:  247:**
        -:  248:**  Return:
        -:  249:**    (none)
        -:  250:*/
        -:  251:void CFE_SB_SetUserDataLength(CFE_SB_MsgPtr_t MsgPtr,uint16 DataLength)
   262144:  252:{
        -:  253:#ifdef MESSAGE_FORMAT_IS_CCSDS
        -:  254:
        -:  255:    uint32 TotalMsgSize, HdrSize;
        -:  256:
        -:  257:    CFE_SB_MsgId_t MsgId;
   262144:  258:    MsgId = CCSDS_RD_SID(MsgPtr->Hdr);
   262144:  259:    HdrSize = CFE_SB_MsgHdrSize(MsgId);
   262144:  260:    TotalMsgSize = HdrSize + DataLength;
   262144:  261:    CCSDS_WR_LEN(MsgPtr->Hdr,TotalMsgSize);
        -:  262:
        -:  263:#endif
   262144:  264:}/* end CFE_SB_SetUserDataLength */
        -:  265:
        -:  266:
        -:  267:/******************************************************************************
        -:  268:**  Function:  CFE_SB_GetTotalMsgLength()
        -:  269:**
        -:  270:**  Purpose:
        -:  271:**    Get the total length of the message.
        -:  272:**
        -:  273:**  Arguments:
        -:  274:**    MsgPtr - Pointer to a CFE_SB_Msg_t
        -:  275:**
        -:  276:**  Return:
        -:  277:**    Total Length of the message
        -:  278:*/
        -:  279:uint16 CFE_SB_GetTotalMsgLength(CFE_SB_MsgPtr_t MsgPtr)
   524330:  280:{
        -:  281:#ifdef MESSAGE_FORMAT_IS_CCSDS
        -:  282:
   524330:  283:    return CCSDS_RD_LEN(MsgPtr->Hdr);
        -:  284:
        -:  285:#endif
        -:  286:}/* end CFE_SB_GetTotalMsgLength */
        -:  287:
        -:  288:
        -:  289:/******************************************************************************
        -:  290:**  Function:  CFE_SB_SetTotalMsgLength()
        -:  291:**
        -:  292:**  Purpose:
        -:  293:**    Set the length field, given the total length of the message.
        -:  294:**
        -:  295:**  Arguments:
        -:  296:**    MsgPtr      - Pointer to a CFE_SB_Msg_t
        -:  297:**    TotalLength - Total Length of the message
        -:  298:**
        -:  299:**  Return:
        -:  300:**    (none)
        -:  301:*/
        -:  302:void CFE_SB_SetTotalMsgLength(CFE_SB_MsgPtr_t MsgPtr,uint16 TotalLength)
   262144:  303:{
        -:  304:#ifdef MESSAGE_FORMAT_IS_CCSDS
        -:  305:
   262144:  306:    CCSDS_WR_LEN(MsgPtr->Hdr,TotalLength);
        -:  307:
        -:  308:#endif
   262144:  309:}/* end CFE_SB_SetTotalMsgLength */
        -:  310:
        -:  311:
        -:  312:/******************************************************************************
        -:  313:**  Function:  CFE_SB_GetMsgTime()
        -:  314:**
        -:  315:**  Purpose:
        -:  316:**    Get the time field from a message.
        -:  317:**
        -:  318:**  Arguments:
        -:  319:**    MsgPtr - Pointer to a CFE_SB_Msg_t
        -:  320:**
        -:  321:**  Return:
        -:  322:**    Time field from message or
        -:  323:**    Time value of zero for msgs that do not have a Time field in header
        -:  324:*/
        -:  325:CFE_TIME_SysTime_t CFE_SB_GetMsgTime(CFE_SB_MsgPtr_t MsgPtr)
        6:  326:{
        -:  327:    CFE_TIME_SysTime_t TimeFromMsg;
        6:  328:    uint32 LocalSecs32 = 0;
        6:  329:    uint32 LocalSubs32 = 0;
        -:  330:
        -:  331:    #ifdef MESSAGE_FORMAT_IS_CCSDS
        -:  332:
        -:  333:    #if (CFE_SB_PACKET_TIME_FORMAT == CFE_SB_TIME_32_16_SUBS)
        -:  334:    uint16 LocalSubs16;
        -:  335:    #endif
        -:  336:
        -:  337:    CFE_SB_TlmHdr_t *TlmHdrPtr;
        -:  338:
        -:  339:    /* if msg type is a command or msg has no secondary hdr, time = 0 */
        6:  340:    if ((CCSDS_RD_TYPE(MsgPtr->Hdr) != CCSDS_CMD) && (CCSDS_RD_SHDR(MsgPtr->Hdr) != 0)) {
        -:  341:
        -:  342:        /* copy time data to/from packets to eliminate alignment issues */
        3:  343:        TlmHdrPtr = (CFE_SB_TlmHdr_t *)MsgPtr;
        -:  344:
        -:  345:        #if (CFE_SB_PACKET_TIME_FORMAT == CFE_SB_TIME_32_16_SUBS)
        -:  346:
        3:  347:        CFE_PSP_MemCpy(&LocalSecs32, &TlmHdrPtr->Sec.Time[0], 4);
        3:  348:        CFE_PSP_MemCpy(&LocalSubs16, &TlmHdrPtr->Sec.Time[4], 2);
        -:  349:        /* convert packet data into CFE_TIME_SysTime_t format */
        3:  350:        LocalSubs32 = ((uint32) LocalSubs16) << 16;
        -:  351:
        -:  352:        #elif (CFE_SB_PACKET_TIME_FORMAT == CFE_SB_TIME_32_32_SUBS)
        -:  353:
        -:  354:        CFE_PSP_MemCpy(&LocalSecs32, &TlmHdrPtr->Sec.Time[0], 4);
        -:  355:        CFE_PSP_MemCpy(&LocalSubs32, &TlmHdrPtr->Sec.Time[4], 4);
        -:  356:        /* no conversion necessary -- packet format = CFE_TIME_SysTime_t format */
        -:  357:
        -:  358:        #elif (CFE_SB_PACKET_TIME_FORMAT == CFE_SB_TIME_32_32_M_20)
        -:  359:
        -:  360:        CFE_PSP_MemCpy(&LocalSecs32, &TlmHdrPtr->Sec.Time[0], 4);
        -:  361:        CFE_PSP_MemCpy(&LocalSubs32, &TlmHdrPtr->Sec.Time[4], 4);
        -:  362:        /* convert packet data into CFE_TIME_SysTime_t format */
        -:  363:        LocalSubs32 = CFE_TIME_Micro2SubSecs((LocalSubs32 >> 12));
        -:  364:
        -:  365:        #endif
        -:  366:    }
        -:  367:
        -:  368:    #endif
        -:  369:
        -:  370:    /* return the packet time converted to CFE_TIME_SysTime_t format */
        6:  371:    TimeFromMsg.Seconds    = LocalSecs32;
        6:  372:    TimeFromMsg.Subseconds = LocalSubs32;
        -:  373:
        6:  374:    return TimeFromMsg;
        -:  375:
        -:  376:}/* end CFE_SB_GetMsgTime */
        -:  377:
        -:  378:
        -:  379:/******************************************************************************
        -:  380:**  Function:  CFE_SB_SetMsgTime()
        -:  381:**
        -:  382:**  Purpose:
        -:  383:**    Set the time field from a message.
        -:  384:**
        -:  385:**  Arguments:
        -:  386:**    MsgPtr  - Pointer to a CFE_SB_Msg_t
        -:  387:**    NewTime - Time to write in message
        -:  388:**
        -:  389:**  Return:
        -:  390:**    CFE_SUCCESS for no errors
        -:  391:**    CFE_SB_WRONG_MSG_TYPE if msg does not have a header field for time.
        -:  392:*/
        -:  393:int32 CFE_SB_SetMsgTime(CFE_SB_MsgPtr_t MsgPtr, CFE_TIME_SysTime_t NewTime)
        9:  394:{
        9:  395:    int32 Result = CFE_SB_WRONG_MSG_TYPE;
        -:  396:
        -:  397:    #ifdef MESSAGE_FORMAT_IS_CCSDS
        -:  398:
        -:  399:    CFE_SB_TlmHdr_t *TlmHdrPtr;
        -:  400:
        -:  401:    /* declare format specific vars */
        -:  402:    #if (CFE_SB_PACKET_TIME_FORMAT == CFE_SB_TIME_32_16_SUBS)
        -:  403:    uint16 LocalSubs16;
        -:  404:    #elif (CFE_SB_PACKET_TIME_FORMAT == CFE_SB_TIME_32_32_M_20)
        -:  405:    uint32 LocalSubs32;
        -:  406:    #endif
        -:  407:
        -:  408:    /* cannot set time if msg type is a command or msg has no secondary hdr */
        9:  409:    if ((CCSDS_RD_TYPE(MsgPtr->Hdr) != CCSDS_CMD) && (CCSDS_RD_SHDR(MsgPtr->Hdr) != 0)) {
        -:  410:
        -:  411:        /* copy time data to/from packets to eliminate alignment issues */
        6:  412:        TlmHdrPtr = (CFE_SB_TlmHdr_t *) MsgPtr;
        -:  413:
        -:  414:        #if (CFE_SB_PACKET_TIME_FORMAT == CFE_SB_TIME_32_16_SUBS)
        -:  415:
        -:  416:        /* convert time from CFE_TIME_SysTime_t format to packet format */
        6:  417:        LocalSubs16 = (uint16) (NewTime.Subseconds >> 16);
        6:  418:        CFE_PSP_MemCpy(&TlmHdrPtr->Sec.Time[0], &NewTime.Seconds, 4);
        6:  419:        CFE_PSP_MemCpy(&TlmHdrPtr->Sec.Time[4], &LocalSubs16, 2);
        6:  420:        Result = CFE_SUCCESS;
        -:  421:
        -:  422:        #elif (CFE_SB_PACKET_TIME_FORMAT == CFE_SB_TIME_32_32_SUBS)
        -:  423:
        -:  424:        /* no conversion necessary -- packet format = CFE_TIME_SysTime_t format */
        -:  425:        CFE_PSP_MemCpy(&TlmHdrPtr->Sec.Time[0], &NewTime.Seconds, 4);
        -:  426:        CFE_PSP_MemCpy(&TlmHdrPtr->Sec.Time[4], &NewTime.Subseconds, 4);
        -:  427:        Result = CFE_SUCCESS;
        -:  428:
        -:  429:        #elif (CFE_SB_PACKET_TIME_FORMAT == CFE_SB_TIME_32_32_M_20)
        -:  430:
        -:  431:        /* convert time from CFE_TIME_SysTime_t format to packet format */
        -:  432:        LocalSubs32 = CFE_TIME_Sub2MicroSecs(NewTime.Subseconds) << 12;
        -:  433:        CFE_PSP_MemCpy(&TlmHdrPtr->Sec.Time[0], &NewTime.Seconds, 4);
        -:  434:        CFE_PSP_MemCpy(&TlmHdrPtr->Sec.Time[4], &LocalSubs32, 4);
        -:  435:        Result = CFE_SUCCESS;
        -:  436:
        -:  437:        #endif
        -:  438:    }
        -:  439:
        -:  440:    #endif
        -:  441:
        9:  442:    return Result;
        -:  443:
        -:  444:}/* end CFE_SB_SetMsgTime */
        -:  445:
        -:  446:
        -:  447:/******************************************************************************
        -:  448:**  Function:  CFE_SB_TimeStampMsg()
        -:  449:**
        -:  450:**  Purpose:
        -:  451:**    Set the time field to the current time.
        -:  452:**
        -:  453:**  Arguments:
        -:  454:**    MsgPtr - Pointer to a CFE_SB_Msg_t
        -:  455:**
        -:  456:**  Return:
        -:  457:**    (none)
        -:  458:*/
        -:  459:void CFE_SB_TimeStampMsg(CFE_SB_MsgPtr_t MsgPtr)
        5:  460:{
        5:  461:    CFE_SB_SetMsgTime(MsgPtr,CFE_TIME_GetTime());
        -:  462:
        5:  463:}/* end CFE_SB_TimeStampMsg */
        -:  464:
        -:  465:
        -:  466:/******************************************************************************
        -:  467:**  Function:  CFE_SB_GetCmdCode()
        -:  468:**
        -:  469:**  Purpose:
        -:  470:**    Get the opcode field of message.
        -:  471:**
        -:  472:**  Arguments:
        -:  473:**    MsgPtr - Pointer to a CFE_SB_Msg_t
        -:  474:**
        -:  475:**  Return:
        -:  476:**    CmdCode from the message (CCSDS Function Code)
        -:  477:*/
        -:  478:uint16 CFE_SB_GetCmdCode(CFE_SB_MsgPtr_t MsgPtr)
     1050:  479:{
        -:  480:#ifdef MESSAGE_FORMAT_IS_CCSDS
        -:  481:
        -:  482:    CFE_SB_CmdHdr_t     *CmdHdrPtr;
        -:  483:
        -:  484:    /* if msg type is telemetry or there is no secondary hdr, return 0 */
     1050:  485:    if((CCSDS_RD_TYPE(MsgPtr->Hdr) == CCSDS_TLM)||(CCSDS_RD_SHDR(MsgPtr->Hdr) == 0)){
      768:  486:        return 0;
        -:  487:    }/* end if */
        -:  488:
        -:  489:    /* Cast the input pointer to a Cmd Msg pointer */
      282:  490:    CmdHdrPtr = (CFE_SB_CmdHdr_t *)MsgPtr;
        -:  491:
      282:  492:    return CCSDS_RD_FC(CmdHdrPtr->Sec);
        -:  493:
        -:  494:#endif
        -:  495:}/* end CFE_SB_GetCmdCode */
        -:  496:
        -:  497:
        -:  498:/******************************************************************************
        -:  499:**  Function:  CFE_SB_SetCmdCode()
        -:  500:**
        -:  501:**  Purpose:
        -:  502:**    Set the opcode field of message.
        -:  503:**
        -:  504:**  Arguments:
        -:  505:**    MsgPtr - Pointer to a CFE_SB_Msg_t
        -:  506:**    CmdCode - Command code for the message (CCSDS Function Code)
        -:  507:**
        -:  508:**  Return:
        -:  509:**    (none)
        -:  510:*/
        -:  511:int32 CFE_SB_SetCmdCode(CFE_SB_MsgPtr_t MsgPtr,
        -:  512:                      uint16 CmdCode)
     1048:  513:{
        -:  514:#ifdef MESSAGE_FORMAT_IS_CCSDS
        -:  515:
        -:  516:    CFE_SB_CmdHdr_t     *CmdHdrPtr;
        -:  517:
        -:  518:    /* if msg type is telemetry or there is no secondary hdr... */
     1048:  519:    if((CCSDS_RD_TYPE(MsgPtr->Hdr) == CCSDS_TLM)||(CCSDS_RD_SHDR(MsgPtr->Hdr) == 0)){
      768:  520:        return CFE_SB_WRONG_MSG_TYPE;
        -:  521:    }/* end if */
        -:  522:
        -:  523:    /* Cast the input pointer to a Cmd Msg pointer */
      280:  524:    CmdHdrPtr = (CFE_SB_CmdHdr_t *)MsgPtr;
        -:  525:
      280:  526:    CCSDS_WR_FC(CmdHdrPtr->Sec,CmdCode);
        -:  527:
      280:  528:    return CFE_SUCCESS;
        -:  529:
        -:  530:#endif
        -:  531:
        -:  532:}/* end CFE_SB_SetCmdCode */
        -:  533:
        -:  534:
        -:  535:/******************************************************************************
        -:  536:**  Function:  CFE_SB_GetChecksum()
        -:  537:**
        -:  538:**  Purpose:
        -:  539:**    Get the checksum field of message.
        -:  540:**
        -:  541:**  Arguments:
        -:  542:**    MsgPtr - Pointer to a CFE_SB_Msg_t
        -:  543:**
        -:  544:**  Return:
        -:  545:**
        -:  546:*/
        -:  547:uint16 CFE_SB_GetChecksum(CFE_SB_MsgPtr_t MsgPtr)
        4:  548:{
        -:  549:#ifdef MESSAGE_FORMAT_IS_CCSDS
        -:  550:
        -:  551:    CFE_SB_CmdHdr_t     *CmdHdrPtr;
        -:  552:
        -:  553:    /* if msg type is telemetry or there is no secondary hdr... */
        4:  554:    if((CCSDS_RD_TYPE(MsgPtr->Hdr) == CCSDS_TLM)||(CCSDS_RD_SHDR(MsgPtr->Hdr) == 0)){
        3:  555:        return 0;
        -:  556:    }/* end if */
        -:  557:
        -:  558:    /* cast the input pointer to a Cmd Msg pointer */
        1:  559:    CmdHdrPtr = (CFE_SB_CmdHdr_t *)MsgPtr;
        -:  560:
        1:  561:    return CCSDS_RD_CHECKSUM(CmdHdrPtr->Sec);
        -:  562:
        -:  563:#endif
        -:  564:}/* end CFE_SB_GetChecksum */
        -:  565:
        -:  566:
        -:  567:/******************************************************************************
        -:  568:**  Function:  CFE_SB_GenerateChecksum()
        -:  569:**
        -:  570:**  Purpose:
        -:  571:**    Calculate and Set the checksum field of message.
        -:  572:**
        -:  573:**  Arguments:
        -:  574:**    MsgPtr - Pointer to a CFE_SB_Msg_t
        -:  575:**
        -:  576:**  Note: If any header fields are changed after this call, the checksum will
        -:  577:**        no longer be valid.
        -:  578:**        Also, the packet length field dictates the number of iterations
        -:  579:**        used in the checksum algorithm and therefore must be properly set
        -:  580:**        before calling this function.
        -:  581:**
        -:  582:**  Return:
        -:  583:**    (none)
        -:  584:*/
        -:  585:void CFE_SB_GenerateChecksum(CFE_SB_MsgPtr_t MsgPtr)
        4:  586:{
        -:  587:#ifdef MESSAGE_FORMAT_IS_CCSDS
        -:  588:
        -:  589:    CCSDS_CmdPkt_t    *CmdPktPtr;
        -:  590:
        -:  591:    /* if msg type is telemetry or there is no secondary hdr... */
        4:  592:    if((CCSDS_RD_TYPE(MsgPtr->Hdr) == CCSDS_TLM)||(CCSDS_RD_SHDR(MsgPtr->Hdr) == 0)){
        3:  593:        return;
        -:  594:    }/* end if */
        -:  595:
        1:  596:    CmdPktPtr = (CCSDS_CmdPkt_t *)MsgPtr;
        -:  597:
        1:  598:    CCSDS_LoadCheckSum(CmdPktPtr);
        -:  599:
        -:  600:#endif
        -:  601:}/* end CFE_SB_GenerateChecksum */
        -:  602:
        -:  603:
        -:  604:/******************************************************************************
        -:  605:**  Function:  CFE_SB_ValidateChecksum()
        -:  606:**
        -:  607:**  Purpose:
        -:  608:**    Validate the checksum field of message.
        -:  609:**
        -:  610:**  Arguments:
        -:  611:**    MsgPtr - Pointer to a CFE_SB_Msg_t
        -:  612:**
        -:  613:**  Return:
        -:  614:**    TRUE if checksum of packet is valid; FALSE if not.
        -:  615:*/
        -:  616:boolean CFE_SB_ValidateChecksum(CFE_SB_MsgPtr_t MsgPtr)
        8:  617:{
        -:  618:#ifdef MESSAGE_FORMAT_IS_CCSDS
        -:  619:
        -:  620:    CCSDS_CmdPkt_t    *CmdPktPtr;
        -:  621:
        -:  622:    /* if msg type is telemetry or there is no secondary hdr... */
        8:  623:    if((CCSDS_RD_TYPE(MsgPtr->Hdr) == CCSDS_TLM)||(CCSDS_RD_SHDR(MsgPtr->Hdr) == 0)){
        5:  624:        return FALSE;
        -:  625:    }/* end if */
        -:  626:
        3:  627:    CmdPktPtr = (CCSDS_CmdPkt_t *)MsgPtr;
        -:  628:
        3:  629:    return CCSDS_ValidCheckSum (CmdPktPtr);
        -:  630:
        -:  631:#endif
        -:  632:}/* end CFE_SB_ValidateChecksum */
        -:  633:
        -:  634:
        -:  635:/******************************************************************************
        -:  636:**  Function:  CFE_SB_MessageStringGet()
        -:  637:**
        -:  638:**  See function prototype for full description
        -:  639:**
        -:  640:**  UNIT TESTING NOTE:
        -:  641:**    During unit testing, the "stub" version of this function must
        -:  642:**    also copy the string or all functions that depend on this will break.
        -:  643:**
        -:  644:**    Therefore this function is essentially duplicated in the UT code
        -:  645:**
        -:  646:*/
        -:  647:int32 CFE_SB_MessageStringGet(char *DestStringPtr, const char *SourceStringPtr, const char *DefaultString, uint32 DestMaxSize, uint32 SourceMaxSize)
       12:  648:{
        -:  649:    int32 Result;
        -:  650:
        -:  651:    /*
        -:  652:     * Error in caller if DestMaxSize == 0.
        -:  653:     * Cannot terminate the string, since there is no place for the NUL
        -:  654:     * In this case, do nothing
        -:  655:     */
       12:  656:    if (DestMaxSize == 0)
        -:  657:    {
        1:  658:        Result = CFE_SB_BAD_ARGUMENT;
        -:  659:    }
        -:  660:    else
        -:  661:    {
       11:  662:        Result = 0;
        -:  663:
        -:  664:        /*
        -:  665:         * Check if should use the default, which is if
        -:  666:         * the source string has zero length (first char is NUL).
        -:  667:         */
       11:  668:        if (DefaultString != NULL && (SourceMaxSize == 0 || *SourceStringPtr == 0))
        -:  669:        {
        4:  670:            SourceStringPtr = DefaultString;
        4:  671:            SourceMaxSize = DestMaxSize;
        -:  672:        }
        -:  673:
        -:  674:        /* Reserve 1 character for the required NUL */
       11:  675:        --DestMaxSize;
        -:  676:
      153:  677:        while (SourceMaxSize > 0 && *SourceStringPtr != 0 && DestMaxSize > 0)
        -:  678:        {
      131:  679:            *DestStringPtr = *SourceStringPtr;
      131:  680:            ++DestStringPtr;
      131:  681:            ++SourceStringPtr;
      131:  682:            --SourceMaxSize;
      131:  683:            --DestMaxSize;
        -:  684:
      131:  685:            ++Result;
        -:  686:        }
        -:  687:
        -:  688:        /* Put the NUL in the last character */
       11:  689:        *DestStringPtr = 0;
        -:  690:    }
        -:  691:
       12:  692:    return Result;
        -:  693:}
        -:  694:
        -:  695:
        -:  696:/******************************************************************************
        -:  697:**  Function:  CFE_SB_MessageStringSet()
        -:  698:**
        -:  699:**  See function prototype for full description
        -:  700:**
        -:  701:**  UNIT TESTING NOTE:
        -:  702:**    During unit testing, the "stub" version of this function must
        -:  703:**    also copy the string or all functions that depend on this will break.
        -:  704:**
        -:  705:**    Therefore this function is essentially duplicated in the UT code
        -:  706:**
        -:  707:*/
        -:  708:int32 CFE_SB_MessageStringSet(char *DestStringPtr, const char *SourceStringPtr, uint32 DestMaxSize, uint32 SourceMaxSize)
        3:  709:{
        -:  710:    int32 Result;
        -:  711:
        3:  712:    Result = 0;
        -:  713:
       19:  714:    while (SourceMaxSize > 0 && *SourceStringPtr != 0 && DestMaxSize > 0)
        -:  715:    {
       13:  716:        *DestStringPtr = *SourceStringPtr;
       13:  717:        ++DestStringPtr;
       13:  718:        ++SourceStringPtr;
       13:  719:        ++Result;
       13:  720:        --DestMaxSize;
       13:  721:        --SourceMaxSize;
        -:  722:    }
        -:  723:
        -:  724:    /*
        -:  725:     * Pad the remaining space with NUL chars,
        -:  726:     * but this should NOT be included in the final size
        -:  727:     */
       39:  728:    while (DestMaxSize > 0)
        -:  729:    {
        -:  730:        /* Put the NUL in the last character */
       33:  731:        *DestStringPtr = 0;
       33:  732:        ++DestStringPtr;
       33:  733:        --DestMaxSize;
        -:  734:    }
        -:  735:
        3:  736:    return Result;
        -:  737:}
