        -:    0:Source:/Users/rmcgraw/Projects/cFE/fsw/cfe-core/src/sb/cfe_sb_priv.c
        -:    0:Graph:cfe_sb_priv.gcno
        -:    0:Data:cfe_sb_priv.gcda
        -:    0:Runs:1
        -:    0:Programs:4
        -:    1:/******************************************************************************
        -:    2:** File: cfe_sb_priv.c
        -:    3:**
        -:    4:**      Copyright (c) 2004-2006, United States government as represented by the
        -:    5:**      administrator of the National Aeronautics Space Administration.
        -:    6:**      All rights reserved. This software(cFE) was created at NASA's Goddard
        -:    7:**      Space Flight Center pursuant to government contracts.
        -:    8:**
        -:    9:**      This software may be used only pursuant to a United States government
        -:   10:**      sponsored project and the United States government may not be charged
        -:   11:**      for use thereof.
        -:   12:**
        -:   13:**
        -:   14:** Purpose:
        -:   15:**   This header file contains prototypes for private functions and type
        -:   16:**   definitions for cFE internal use.
        -:   17:**
        -:   18:** Author:   R.McGraw/SSI
        -:   19:**
        -:   20:** Notes:
        -:   21:**
        -:   22:** $Log: cfe_sb_priv.c.gcov  $
        -:   22:** Revision 1.3 2009/05/07 15:22:43EDT rmcgraw 
        -:   22:** DCR7366:1 Unit test results for post 5.2 build
        -:   23:** Revision 1.6 2009/04/06 10:21:09EDT rmcgraw 
        -:   24:** DCR5801:2 Fixed problem with list, unsubscribing to all, then subscribing again
        -:   25:** Revision 1.5 2009/03/31 09:25:22EDT rmcgraw 
        -:   26:** DCR5801:2 Fixed problem with removing a node in linked list
        -:   27:** Revision 1.4 2009/02/06 11:29:05EST rmcgraw 
        -:   28:** DCR5801:2 General Cleanup
        -:   29:** Revision 1.3 2009/02/03 11:06:59EST rmcgraw 
        -:   30:** DCR5801:2 Changed destination descriptors from array based to linked list
        -:   31:** Revision 1.2 2009/01/30 10:36:37EST rmcgraw 
        -:   32:** DCR5801:1 Removed function CFE_SB_GetNumberOfSubscribers
        -:   33:** Revision 1.1 2008/04/17 08:05:31EDT ruperera 
        -:   34:** Initial revision
        -:   35:** Member added to cfe project on tlserver3
        -:   36:** Revision 1.40 2007/09/13 09:39:58EDT rjmcgraw 
        -:   37:** DCR4861 New function def for CFE_SB_RequestToSendEvent
        -:   38:** Revision 1.39 2007/07/12 16:59:38EDT rjmcgraw 
        -:   39:** DCR4680:1 Removed SB event log related items
        -:   40:** Revision 1.38 2007/05/21 14:34:40EDT rjmcgraw 
        -:   41:** Fixed compiler warnings in CFE_SB_GetAppTskName
        -:   42:** Revision 1.37 2007/03/28 14:22:02EST rjmcgraw 
        -:   43:** DCR2654:displaying app.tsk name in events
        -:   44:** Revision 1.36 2007/03/19 14:38:03EST rjmcgraw 
        -:   45:** Removed duplicate pipename check, it exists in OS_QueueCreate
        -:   46:** Revision 1.35 2007/03/16 15:29:29EST rjmcgraw 
        -:   47:** Added code for duplicate pipe name check
        -:   48:** Revision 1.34 2007/03/16 10:06:18EST rjmcgraw 
        -:   49:** Changed DeletePipe call to DeletePipeWithAppId in cleanup function
        -:   50:** Revision 1.33 2007/03/13 14:10:19EST rjmcgraw 
        -:   51:** Added CFE_SB_CleanUpApp
        -:   52:** Revision 1.32 2006/10/16 14:30:56EDT rjmcgraw 
        -:   53:** Minor changes to comply with MISRA standard
        -:   54:** Revision 1.31 2006/09/01 11:09:51EDT kkaudra 
        -:   55:** IV&V:Removed cfe_evs.h,cfe_fs.h,cfe_sbp.h
        -:   56:**
        -:   57:******************************************************************************/
        -:   58:
        -:   59:/*
        -:   60:** Include Files
        -:   61:*/
        -:   62:
        -:   63:#include "common_types.h"
        -:   64:#include "osapi.h"
        -:   65:#include "cfe_sb_priv.h"
        -:   66:#include "cfe_sb.h"
        -:   67:#include "ccsds.h"
        -:   68:#include "cfe_error.h"
        -:   69:#include "cfe_es.h"
        -:   70:#include <string.h>
        -:   71:
        -:   72:
        -:   73:/*
        -:   74:** External Globals
        -:   75:*/
        -:   76:extern cfe_sb_t         CFE_SB;
        -:   77:
        -:   78:
        -:   79:/******************************************************************************
        -:   80:**  Function:  CFE_SB_CleanUpApp()
        -:   81:**
        -:   82:**  Purpose:
        -:   83:**
        -:   84:**  Arguments:
        -:   85:**
        -:   86:**  Return:
        -:   87:**    None
        -:   88:*/
        1:   89:int32 CFE_SB_CleanUpApp(uint32 AppId){
        -:   90:
        -:   91:  uint32 i;
        -:   92:
        -:   93:  /* loop through the pipe table looking for pipes owned by AppId */
       65:   94:  for(i=0;i<CFE_SB_MAX_PIPES;i++){
       64:   95:    if((CFE_SB.PipeTbl[i].InUse == CFE_SB_IN_USE)&&
        -:   96:       (CFE_SB.PipeTbl[i].AppId == AppId))
        -:   97:    {
        1:   98:      CFE_SB_DeletePipeWithAppId(CFE_SB.PipeTbl[i].PipeId,AppId);
        -:   99:    }/* end if */
        -:  100:  }/* end for */
        -:  101:  
        1:  102:  return CFE_SUCCESS;
        -:  103:       
        1:  104:}/* end CFE_SB_CleanUpApp */
        -:  105:
        -:  106:
        -:  107:/******************************************************************************
        -:  108:**  Function:  CFE_SB_GetAvailPipeIdx()
        -:  109:**
        -:  110:**  Purpose:
        -:  111:**    SB internal function to get the next available Pipe descriptor. Typically
        -:  112:**    called when a pipe is being created.
        -:  113:**
        -:  114:**  Arguments:
        -:  115:**    None
        -:  116:**
        -:  117:**  Return:
        -:  118:**    Returns the index of an empty pipe descriptor (which is also the PipeId)
        -:  119:**    or CFE_SB_INVALID_PIPE if there are no pipe descriptors available.
        -:  120:*/
      175:  121:CFE_SB_PipeId_t CFE_SB_GetAvailPipeIdx(void){
        -:  122:
        -:  123:    uint8 i;
        -:  124:
        -:  125:    /* search for next available pipe entry */
     2429:  126:    for(i=0;i<CFE_SB_MAX_PIPES;i++){
        -:  127:
     2428:  128:        if(CFE_SB.PipeTbl[i].InUse == CFE_SB_NOT_IN_USE){
      174:  129:            return i;
        -:  130:        }/* end if */
        -:  131:
        -:  132:    }/* end for */
        -:  133:
        1:  134:    return CFE_SB_INVALID_PIPE;
        -:  135:
      175:  136:}/* end CFE_SB_GetAvailPipeIdx */
        -:  137:
        -:  138:
        -:  139:/******************************************************************************
        -:  140:**  Function:  CFE_SB_GetAvailRoutingIdx()
        -:  141:**
        -:  142:**  Purpose:
        -:  143:**    SB internal function to get the next available Routing Table element
        -:  144:**    (CFE_SB_RouteEntry_t). Typically called when an application subscribes
        -:  145:**    to a message.
        -:  146:**
        -:  147:**  Arguments:
        -:  148:**    None
        -:  149:**
        -:  150:**  Return:
        -:  151:**    Returns the index of an empty Routing Table element or
        -:  152:**    CFE_SB_NO_ROUTING_IDX if there are no more elements available.
        -:  153:*/
      375:  154:uint16 CFE_SB_GetAvailRoutingIdx(void){
        -:  155:
        -:  156:    uint16 i;
        -:  157:
        -:  158:    /* search for next available routing table entry */
    34318:  159:    for(i=0;i<CFE_SB_MAX_MSG_IDS;i++){
        -:  160:
    34317:  161:        if(CFE_SB.RoutingTbl[i].MsgId == CFE_SB_INVALID_MSG_ID){
      374:  162:            return i;
        -:  163:        }/* end if */
        -:  164:
        -:  165:    }/* end for */
        -:  166:
        -:  167:    /* error event indicating no more entries available */
        1:  168:    return CFE_SB_NO_ROUTING_IDX;
        -:  169:
      375:  170:}/* end CFE_SB_GetAvailRoutingIdx */
        -:  171:
        -:  172:
        -:  173:/******************************************************************************
        -:  174:**  Function:  CFE_SB_GetPipeIdx()
        -:  175:**
        -:  176:**  Purpose:
        -:  177:**    SB internal function to get the pipe table index for the given pipe id.
        -:  178:**
        -:  179:**  Arguments:
        -:  180:**    PipeId
        -:  181:**
        -:  182:**  Return:
        -:  183:**    Returns the pipe table index of the given pipe id or CFE_SB_INVALID_PIPE if
        -:  184:*     there was not an entry for the given pipe id.
        -:  185:*/
      991:  186:uint8 CFE_SB_GetPipeIdx(CFE_SB_PipeId_t PipeId){
        -:  187:
        -:  188:    uint8  i;
        -:  189:
        -:  190:    /* search the pipe table for the for the given pipe id */
     4850:  191:    for(i=0;i<CFE_SB_MAX_PIPES;i++){
        -:  192:
     4845:  193:        if((CFE_SB.PipeTbl[i].PipeId == PipeId)&&(CFE_SB.PipeTbl[i].InUse == 1)){
      986:  194:            return i;
        -:  195:        }/* end if */
        -:  196:
        -:  197:    }/* end for */
        -:  198:
        5:  199:    return CFE_SB_INVALID_PIPE;
        -:  200:
      991:  201:}/* end CFE_SB_GetPipeIdx */
        -:  202:
        -:  203:
        -:  204:/******************************************************************************
        -:  205:**  Function:  CFE_SB_LockSharedData()
        -:  206:**
        -:  207:**  Purpose:
        -:  208:**    SB internal function to handle a semaphore take failure for the Shared
        -:  209:**    Data Mutex
        -:  210:**
        -:  211:**  Arguments:
        -:  212:**    Filename   - the filename containing the code that generated the error.
        -:  213:**    LineNumber - the line number of the code that generated the error.
        -:  214:**
        -:  215:**  Return:
        -:  216:**    None
        -:  217:*/
     2132:  218:void CFE_SB_LockSharedData(char *Filename, int32 LineNumber){
        -:  219:
        -:  220:    int32   Status;
     2132:  221:    uint32  AppId = 0;
        -:  222:
     2132:  223:    Status = OS_MutSemTake(CFE_SB.SharedDataMutexId);
     2132:  224:    if (Status != OS_SUCCESS) {
        -:  225:
        1:  226:        CFE_ES_GetAppID(&AppId);
        -:  227:
        1:  228:        CFE_ES_WriteToSysLog("SB SharedData Mutex Take Err Stat=0x%x,App=%d,File=%s,Line=%d",
        -:  229:                 Status,AppId,Filename,LineNumber);
        -:  230:
        -:  231:    }/* end if */
        -:  232:
        -:  233:    return;
        -:  234:
     2132:  235:}/* end CFE_SB_LockSharedData */
        -:  236:
        -:  237:
        -:  238:
        -:  239:/******************************************************************************
        -:  240:**  Function:  CFE_SB_UnlockSharedData()
        -:  241:**
        -:  242:**  Purpose:
        -:  243:**    SB internal function to handle a semaphore give failure  for the Shared
        -:  244:**    Data Mutex
        -:  245:**
        -:  246:**  Arguments:
        -:  247:**    Filename   - the filename containing the code that generated the error.
        -:  248:**    LineNumber - the line number of the code that generated the error.
        -:  249:**
        -:  250:**  Return:
        -:  251:**    None
        -:  252:*/
     2132:  253:void CFE_SB_UnlockSharedData(char *Filename, int32 LineNumber){
        -:  254:
        -:  255:   int32   Status;
     2132:  256:   uint32  AppId = 0;
        -:  257:
     2132:  258:    Status = OS_MutSemGive(CFE_SB.SharedDataMutexId);
     2132:  259:    if (Status != OS_SUCCESS) {
        -:  260:
        1:  261:        CFE_ES_GetAppID(&AppId);
        -:  262:
        1:  263:        CFE_ES_WriteToSysLog("SB SharedData Mutex Give Err Stat=0x%x,App=%d,File=%s,Line=%d",
        -:  264:                                Status,AppId,Filename,LineNumber);
        -:  265:
        -:  266:    }/* end if */
        -:  267:
        -:  268:    return;
        -:  269:
     2132:  270:}/* end CFE_SB_UnlockSharedData */
        -:  271:
        -:  272:
        -:  273:/******************************************************************************
        -:  274:**  Function:  CFE_SB_GetPipePtr()
        -:  275:**
        -:  276:**  Purpose:
        -:  277:**    SB internal function to get a pointer to the pipe descriptor associated
        -:  278:**    with the given pipe id.
        -:  279:**
        -:  280:**  Arguments:
        -:  281:**    PipeId
        -:  282:**
        -:  283:**  Return:
        -:  284:**    Pointer to the descriptor for the pipe.  If the pipe ID is not valid,
        -:  285:**    a NULL pointer is returned.
        -:  286:*/
        -:  287:
      181:  288:CFE_SB_PipeD_t *CFE_SB_GetPipePtr(CFE_SB_PipeId_t PipeId) {
        -:  289:
        -:  290:   /*
        -:  291:   ** Verify that the pipeId is in the valid range and being used.
        -:  292:   ** If so, return the pointer to the pipe descriptor.
        -:  293:   */
        -:  294:
      181:  295:    if(CFE_SB_ValidatePipeId(PipeId) != CFE_SUCCESS){
        1:  296:        return NULL;
        -:  297:    }else{
      180:  298:        return &CFE_SB.PipeTbl[PipeId];
        -:  299:    }/* end if */
        -:  300:
      181:  301:}/* end CFE_SB_GetPipePtr */
        -:  302:
        -:  303:
        -:  304:
        -:  305:/******************************************************************************
        -:  306:**  Function:  CFE_SB_GetDestPtr()
        -:  307:**
        -:  308:**  Purpose:
        -:  309:**    SB internal function to get a pointer to the destination descriptor
        -:  310:**    associated with the given message id/pipe id combination.
        -:  311:**
        -:  312:**  Arguments:
        -:  313:**    MsgId  : ID of the message
        -:  314:**    PipeId : Pipe ID for the destination.
        -:  315:**
        -:  316:**  Return:
        -:  317:**    Pointer to the destination descriptor that corresponds to the msg/pipe
        -:  318:**    combination. If the destination does not exist, return NULL.
        -:  319:*/
        -:  320:CFE_SB_DestinationD_t  *CFE_SB_GetDestPtr(CFE_SB_MsgId_t MsgId,
       12:  321:                                          CFE_SB_PipeId_t PipeId){
        -:  322:
        -:  323:    uint16                  Idx;
        -:  324:    CFE_SB_DestinationD_t   *DestPtr;
        -:  325:
       12:  326:    Idx = CFE_SB_GetRoutingTblIdx(MsgId);
        -:  327:
       12:  328:    if(Idx==CFE_SB_AVAILABLE){
        3:  329:        return NULL;
        -:  330:    }/* end if */
        -:  331:
        9:  332:    DestPtr = CFE_SB.RoutingTbl[Idx].ListHeadPtr;
        -:  333:
       23:  334:    while(DestPtr != NULL){
        -:  335:    
       11:  336:        if(DestPtr -> PipeId == PipeId){
        6:  337:            return DestPtr;
        -:  338:        }/* end if */
        -:  339:        
        5:  340:        DestPtr = DestPtr->Next;
        -:  341:        
        -:  342:    }/* end while */    
        -:  343:            
        3:  344:    return NULL;
        -:  345:
       12:  346:}/* end CFE_SB_GetDestPtr */
        -:  347:
        -:  348:
        -:  349:
        -:  350:/******************************************************************************
        -:  351:**  Function:  CFE_SB_GetRoutingTblIdx()
        -:  352:**
        -:  353:**  Purpose:
        -:  354:**    SB internal function to get the index of the routing table element
        -:  355:**    associated with the given message id.
        -:  356:**
        -:  357:**  Arguments:
        -:  358:**    MsgId  : ID of the message
        -:  359:**    PipeId : Pipe ID for the destination.
        -:  360:**
        -:  361:**  Return:
        -:  362:**    Will return the index of the routing table element for the given message ID
        -:  363:**    or 0xFFFF if message does not exist.
        -:  364:*/
     1254:  365:uint16 CFE_SB_GetRoutingTblIdx(CFE_SB_MsgId_t MsgId){
        -:  366:
        -:  367:#ifdef MESSAGE_FORMAT_IS_CCSDS
        -:  368:
        -:  369:    /* mask out the ccsds version number to   */
        -:  370:    /* ensure we don't read beyond end of array */
     1254:  371:    MsgId &= 0x1FFF;
        -:  372:
     1254:  373:    return CFE_SB.MsgMap[MsgId];
        -:  374:#else
        -:  375:    return 0;
        -:  376:#endif
        -:  377:
     1254:  378:}/* end CFE_SB_GetRoutingTblIdx */
        -:  379:
        -:  380:
        -:  381:
        -:  382:/******************************************************************************
        -:  383:**  Function:  CFE_SB_SetRoutingTblIdx()
        -:  384:**
        -:  385:**  Purpose:
        -:  386:**    SB internal function to set a value in the message map. The "Value" is
        -:  387:**    the routing table index of the given message ID. The message map is used
        -:  388:**    for quick routing table index lookups of a given message ID. The cost of
        -:  389:**    this quick lookup is 8K bytes of memory(for CCSDS).
        -:  390:**
        -:  391:**  Arguments:
        -:  392:**    MsgId  : ID of the message
        -:  393:**    Value  : value to set.
        -:  394:**
        -:  395:**  Return:
        -:  396:**    Will return CFE_SUCCESS or CFE_INVALID_MSGID if MsgId is invalid
        -:  397:*/
      746:  398:int32 CFE_SB_SetRoutingTblIdx(CFE_SB_MsgId_t MsgId,uint16 Value){
        -:  399:
        -:  400:#ifdef MESSAGE_FORMAT_IS_CCSDS
        -:  401:
        -:  402:    /* mask out the ccsds version number to   */
        -:  403:    /* ensure we don't write beyond end of array */
      746:  404:    MsgId &= 0x1FFF;
        -:  405:
      746:  406:    CFE_SB.MsgMap[MsgId] = Value;
        -:  407:
        -:  408:#endif
        -:  409:
      746:  410:    return CFE_SUCCESS;
        -:  411:
      746:  412:}/* end CFE_SB_SetRoutingTblIdx */
        -:  413:
        -:  414:
        -:  415:/******************************************************************************
        -:  416:**  Function:  CFE_SB_GetPipeName()
        -:  417:**
        -:  418:**  Purpose:
        -:  419:**    SB internal function to get the string of the pipe name of the given
        -:  420:**    Pipe ID.
        -:  421:**
        -:  422:**  Arguments:
        -:  423:**    MsgId  : ID of the message
        -:  424:**
        -:  425:**  Return:
        -:  426:**    Will return a pointer to the PipeName array in the pipe table if the the pipeid
        -:  427:**    is in range. Otherwise this function returns a pointer to the 
        -:  428:**    PipeName4ErrCase[0], which is initialized with a null terminator.
        -:  429:** 
        -:  430:*/
      591:  431:char *CFE_SB_GetPipeName(CFE_SB_PipeId_t PipeId){
        -:  432:
        -:  433:    static char PipeName4ErrCase[1] = {'\0'};
        -:  434:        
      591:  435:    if(PipeId >= CFE_SB_MAX_PIPES){
        1:  436:        return &PipeName4ErrCase[0];
        -:  437:    }else{
      590:  438:        return &CFE_SB.PipeTbl[PipeId].PipeName[0];
        -:  439:    }/* end if */
        -:  440:
      591:  441:}/* end CFE_SB_GetPipeName */
        -:  442:
        -:  443:
        -:  444:
        -:  445:/******************************************************************************
        -:  446:**  Function:  CFE_SB_DuplicateSubscribeCheck()
        -:  447:**
        -:  448:**  Purpose:
        -:  449:**    SB internal function to check for a duplicate subscription.
        -:  450:**
        -:  451:**  Arguments:
        -:  452:**    MsgId  : ID of the message
        -:  453:**    PipeId : ID of the pipe
        -:  454:**
        -:  455:**  Return:
        -:  456:**    Will return CFE_SB_DUPLICATE if the given MsgId/PipeId subscription
        -:  457:**    exists in SB routing tables, otherwise will return CFE_SB_NO_DUPLICATE.
        -:  458:*/
        -:  459:int32 CFE_SB_DuplicateSubscribeCheck(CFE_SB_MsgId_t MsgId,
      409:  460:                                       CFE_SB_PipeId_t PipeId){
        -:  461:
        -:  462:    uint16                  Idx;
        -:  463:    CFE_SB_DestinationD_t   *DestPtr;
        -:  464:
      409:  465:    Idx = CFE_SB_GetRoutingTblIdx(MsgId);
        -:  466:
      409:  467:    if(Idx==CFE_SB_AVAILABLE){
      375:  468:        return CFE_SB_NO_DUPLICATE;
        -:  469:    }/* end if */
        -:  470:
       34:  471:    DestPtr = CFE_SB.RoutingTbl[Idx].ListHeadPtr;
        -:  472:
      226:  473:    while(DestPtr != NULL){
        -:  474:    
      159:  475:        if(DestPtr -> PipeId == PipeId){
        1:  476:            return CFE_SB_DUPLICATE;
        -:  477:        }/* end if */
        -:  478:        
      158:  479:        DestPtr = DestPtr->Next;
        -:  480:        
        -:  481:    }/* end while */    
        -:  482:            
       33:  483:    return CFE_SB_NO_DUPLICATE;
        -:  484:
      409:  485:}/* end CFE_SB_DuplicateSubscribeCheck */
        -:  486:
        -:  487:
        -:  488:
        -:  489:/******************************************************************************
        -:  490:**  Function:  CFE_SB_SetMsgSeqCnt()
        -:  491:**
        -:  492:**  Purpose:
        -:  493:**    SB internal function to set the sequence count of a message to a
        -:  494:**    particular value.
        -:  495:**
        -:  496:**  Arguments:
        -:  497:**    MsgPtr  : pointer to the message
        -:  498:**    Count   : sets the sequence count to this value
        -:  499:**
        -:  500:**  Return:
        -:  501:**    None
        -:  502:*/
        9:  503:void CFE_SB_SetMsgSeqCnt(CFE_SB_MsgPtr_t MsgPtr,uint32 Count){
        -:  504:
        -:  505:#ifdef MESSAGE_FORMAT_IS_CCSDS
        9:  506:    CCSDS_WR_SEQ(MsgPtr->Hdr,Count);
        -:  507:#endif
        -:  508:
        -:  509:}/* end CFE_SB_SetMsgSeqCnt */
        -:  510:
        -:  511:
        -:  512:/******************************************************************************
        -:  513:**  Function:  CFE_SB_ValidateMsgId()
        -:  514:**
        -:  515:**  Purpose:
        -:  516:**    SB internal function to validate a given MsgId.
        -:  517:**
        -:  518:**  Arguments:
        -:  519:**
        -:  520:**  Return:
        -:  521:**    None
        -:  522:*/
      848:  523:int32 CFE_SB_ValidateMsgId(CFE_SB_MsgId_t MsgId){
        -:  524:
        -:  525:    /* ensure the ccsds version number in MsgId is 0 */
      848:  526:    if((MsgId > CFE_SB_HIGHEST_VALID_MSGID)||
        -:  527:       (MsgId == CFE_SB_INVALID_MSG_ID))
        -:  528:    {
        5:  529:        return CFE_SB_FAILED;
        -:  530:    }else{
      843:  531:        return CFE_SUCCESS;
        -:  532:    }/* end if */
        -:  533:
      848:  534:}/* end CFE_SB_ValidateMsgId */
        -:  535:
        -:  536:
        -:  537:/******************************************************************************
        -:  538:**  Function:  CFE_SB_ValidatePipeId()
        -:  539:**
        -:  540:**  Purpose:
        -:  541:**    This function checks that the pipe id does not have an index larger than the 
        -:  542:**    array and that the pipe is in use.
        -:  543:**
        -:  544:**  Arguments:
        -:  545:**
        -:  546:**  Return:
        -:  547:**    None
        -:  548:*/
      767:  549:int32 CFE_SB_ValidatePipeId(CFE_SB_PipeId_t PipeId){
        -:  550:
      767:  551:    if((PipeId >= CFE_SB_MAX_PIPES)||
        -:  552:       (CFE_SB.PipeTbl[PipeId].InUse == CFE_SB_NOT_IN_USE))
        -:  553:    {
        8:  554:        return CFE_SB_FAILED;
        -:  555:    }else{
      759:  556:        return CFE_SUCCESS;
        -:  557:    }/* end if */
        -:  558:
      767:  559:}/* end CFE_SB_ValidatePipeId */
        -:  560:
        -:  561:
        -:  562:/******************************************************************************
        -:  563:**  Function:  CFE_SB_GetAppTskName()
        -:  564:**
        -:  565:**  Purpose:
        -:  566:**    This function returns a pointer to the app.tsk name string
        -:  567:**
        -:  568:**  Arguments:
        -:  569:**    TaskId - the task id of the app.task name desired
        -:  570:**
        -:  571:**  Return:
        -:  572:**    Pointer to App.Tsk Name
        -:  573:**
        -:  574:**  Note: With taskId, Parent App name and Child Task name can be queried from ES
        -:  575:**
        -:  576:*/
     1204:  577:char *CFE_SB_GetAppTskName(uint32 TaskId){
        -:  578:
        -:  579:    CFE_ES_TaskInfo_t  TaskInfo;
     1204:  580:    CFE_ES_TaskInfo_t  *ptr = &TaskInfo;
        -:  581:    char               AppName[OS_MAX_API_NAME];
        -:  582:    char               TskName[OS_MAX_API_NAME];       
        -:  583:    static char        FullName[(OS_MAX_API_NAME * 2)];/* +1 is not needed for the
        -:  584:                       dot because 1 of the 2 null terminators will be eliminated */
        -:  585:
     1204:  586:    CFE_ES_GetTaskInfo(ptr, TaskId);
        -:  587:
        -:  588:    /* if app name and task name are the same... */
     1204:  589:    if(strncmp((char *)ptr->AppName,(char *)ptr->TaskName,OS_MAX_API_NAME)==0){
        -:  590:
      602:  591:      strncpy(FullName,(char *)ptr->AppName,OS_MAX_API_NAME);
        -:  592:      
        -:  593:    }else{
        -:  594:
        -:  595:      /* AppName and TskName buffers and strncpy are needed to limit string sizes */
      602:  596:      strncpy(AppName,(char *)ptr->AppName,OS_MAX_API_NAME - 2);
      602:  597:      strncpy(TskName,(char *)ptr->TaskName,OS_MAX_API_NAME - 2);
        -:  598:        
      602:  599:      sprintf(FullName,"%s.%s",AppName,TskName);
        -:  600:           
        -:  601:    }/* end if */
        -:  602:
     1204:  603:    FullName[(OS_MAX_API_NAME * 2) - 1] = '\0';
        -:  604:
     1204:  605:    return FullName;
        -:  606:
     1204:  607:}/* end CFE_SB_GetAppTskName */
        -:  608:
        -:  609:
        -:  610:/******************************************************************************
        -:  611:**  Function:  CFE_SB_GetPktType()
        -:  612:**
        -:  613:**  Purpose:
        -:  614:**    For CCSDS packets, this function returns the state of the cmd/tlm bit(12).
        -:  615:**    For cmd pkts, the state is 1. For tlm pkts, the state is 0.
        -:  616:**
        -:  617:**  Arguments:
        -:  618:**
        -:  619:**  Return:
        -:  620:**    None
        -:  621:*/
        9:  622:int32 CFE_SB_GetPktType(CFE_SB_MsgId_t MsgId){
        -:  623:
        -:  624:#ifdef MESSAGE_FORMAT_IS_CCSDS
        -:  625:
        9:  626:        return CFE_TST(MsgId,12);
        -:  627:
        -:  628:#endif
        -:  629:
        9:  630:}/* end CFE_SB_GetPktType */
        -:  631:
        -:  632:
        -:  633:/******************************************************************************
        -:  634:**  Function:  CFE_SB_RequestToSendEvent()
        -:  635:**
        -:  636:**  Purpose:
        -:  637:**    This function will test the given bit for the given task. If the bit is set
        -:  638:**    this function will return CFE_SB_DENIED. If bit is not set, this function set 
        -:  639:**    the bit and return CFE_SB_GRANTED. This will prevent recursive events from 
        -:  640:**    occurring.
        -:  641:**
        -:  642:**  Arguments:
        -:  643:**
        -:  644:**  Return:
        -:  645:**    If the bit is set this function will return CFE_SB_DENIED. 
        -:  646:**    If bit is not set, this function set the bit and return CFE_SB_GRANTED.
        -:  647:*/
       15:  648:uint32 CFE_SB_RequestToSendEvent(uint32 TaskId, uint32 Bit){
        -:  649:
        -:  650:    /* if bit is set... */
       15:  651:    if(CFE_TST(CFE_SB.StopRecurseFlags[TaskId],Bit)==TRUE)
        -:  652:    {
        -:  653:      
        1:  654:      return CFE_SB_DENIED;
        -:  655:    
        -:  656:    }else{
        -:  657:      
       14:  658:      CFE_SET(CFE_SB.StopRecurseFlags[TaskId],Bit);
       14:  659:      return CFE_SB_GRANTED;
        -:  660:    
        -:  661:    }/* end if */
        -:  662:    
       15:  663:}/* end CFE_SB_RequestToSendEvent */
        -:  664:
        -:  665:
        -:  666:/******************************************************************************
        -:  667:**  Function:  CFE_SB_AddDest()
        -:  668:**
        -:  669:**  Purpose:
        -:  670:**      This function will add the given node to the head of the list.
        -:  671:**
        -:  672:**  Arguments:
        -:  673:**      RtgTblIdx - Routing table index
        -:  674:**      Dest - Pointer to the destination block to add to the list
        -:  675:**
        -:  676:**  Return:
        -:  677:**
        -:  678:*/
      404:  679:int32 CFE_SB_AddDest(uint16 RtgTblIdx, CFE_SB_DestinationD_t *NewNode){
        -:  680:
        -:  681:    CFE_SB_DestinationD_t *WBS;/* Will Be Second (WBS) node */  
        -:  682:    
        -:  683:    /* if first node in list */
      404:  684:    if(CFE_SB.RoutingTbl[RtgTblIdx].ListHeadPtr == NULL){
        -:  685:    
        -:  686:        /* initialize the new node */
      372:  687:        NewNode->Next = NULL;   
      372:  688:        NewNode->Prev = NULL; 
        -:  689:        
        -:  690:        /* insert the new node */
      372:  691:        CFE_SB.RoutingTbl[RtgTblIdx].ListHeadPtr = NewNode;
        -:  692:        
        -:  693:    }else{
        -:  694:    
       32:  695:        WBS = CFE_SB.RoutingTbl[RtgTblIdx].ListHeadPtr;
        -:  696:    
        -:  697:        /* initialize the new node */
       32:  698:        NewNode->Next = WBS;   
       32:  699:        NewNode->Prev = NULL;
        -:  700:        
        -:  701:        /* insert the new node */
       32:  702:        WBS -> Prev = NewNode;    
       32:  703:        CFE_SB.RoutingTbl[RtgTblIdx].ListHeadPtr = NewNode;
        -:  704:        
        -:  705:    }/* end if */
        -:  706:    
      404:  707:    return CFE_SUCCESS;
        -:  708:
      404:  709:}/* CFE_SB_AddDest */
        -:  710:
        -:  711:
        -:  712:
        -:  713:/******************************************************************************
        -:  714:**  Function:  CFE_SB_RemoveDest()
        -:  715:**
        -:  716:**  Purpose:
        -:  717:**      This function will remove the given node from the list.
        -:  718:**      This function assumes there is at least one node in the list.
        -:  719:**
        -:  720:**  Arguments:
        -:  721:**      RtgTblIdx - Routing table index
        -:  722:**      Dest - Pointer to the destination block to remove from the list
        -:  723:**
        -:  724:**  Return:
        -:  725:**
        -:  726:*/
      404:  727:int32 CFE_SB_RemoveDest(uint16 RtgTblIdx, CFE_SB_DestinationD_t *NodeToRemove){
        -:  728:
        -:  729:    CFE_SB_DestinationD_t *PrevNode;
        -:  730:    CFE_SB_DestinationD_t *NextNode;
        -:  731:    
        -:  732:    /* if this is the only node in the list */
      776:  733:    if((NodeToRemove->Prev == NULL) && (NodeToRemove->Next == NULL)){
        -:  734:    
      372:  735:        CFE_SB.RoutingTbl[RtgTblIdx].ListHeadPtr = NULL;
        -:  736:        
        -:  737:    /* if first node in the list and list has more than one */
       32:  738:    }else if(NodeToRemove->Prev == NULL){
        -:  739:        
        1:  740:        NextNode = NodeToRemove->Next;
        -:  741:        
        1:  742:        NextNode -> Prev = NULL;
        -:  743:        
        1:  744:        CFE_SB.RoutingTbl[RtgTblIdx].ListHeadPtr = NextNode;
        -:  745:        
        -:  746:    /* if last node in the list and list has more than one */
       31:  747:    }else if(NodeToRemove->Next == NULL){
        -:  748:    
       30:  749:        PrevNode = NodeToRemove->Prev;
        -:  750:        
       30:  751:        PrevNode -> Next = NULL;
        -:  752:        
        -:  753:    /* NodeToRemove has node(s) before and node(s) after */
        -:  754:    }else{
        -:  755:    
        1:  756:        PrevNode = NodeToRemove->Prev;
        1:  757:        NextNode = NodeToRemove->Next;
        -:  758:        
        1:  759:        PrevNode -> Next = NextNode;
        1:  760:        NextNode -> Prev = PrevNode;
        -:  761:        
        -:  762:    }/* end if */
        -:  763:        
        -:  764:    
        -:  765:    /* initialize the node before returning it to the heap */
      404:  766:    NodeToRemove -> Next = NULL;
      404:  767:    NodeToRemove -> Prev = NULL;        
        -:  768:    
      404:  769:    return CFE_SUCCESS;
        -:  770:
      404:  771:}/* CFE_SB_RemoveDest */
        -:  772:
        -:  773:
        -:  774:/*****************************************************************************/
        -:  775:
