        -:    0:Source:/home/jdagostino/CProj/CFS/MKS/cfs-mission/cfe/fsw/cfe-core/src/es/cfe_es_start.c
        -:    0:Graph:cfe_es_start.gcno
        -:    0:Data:cfe_es_start.gcda
        -:    0:Runs:1
        -:    0:Programs:10
        -:    1:/*
        -:    2:**  File: 
        -:    3:**  cfe_es_start.c
        -:    4:**
        -:    5:**
        -:    6:**
        -:    7:**      Copyright (c) 2004-2006, United States government as represented by the 
        -:    8:**      administrator of the National Aeronautics Space Administration.  
        -:    9:**      All rights reserved. This software(cFE) was created at NASA's Goddard 
        -:   10:**      Space Flight Center pursuant to government contracts.
        -:   11:**
        -:   12:**      This software may be used only pursuant to a United States government 
        -:   13:**      sponsored project and the United States government may not be charged
        -:   14:**      for use thereof. 
        -:   15:**
        -:   16:**
        -:   17:**  Purpose:
        -:   18:**  This file contains the Main entrypoint and startup code for the cFE core.
        -:   19:**  The entry point is called by the board support package for the OS. When the
        -:   20:**  entry point is finished, the cFE should be fully initialized and running.
        -:   21:**
        -:   22:**  References:
        -:   23:**     Flight Software Branch C Coding Standard Version 1.0a
        -:   24:**     cFE Flight Software Application Developers Guide
        -:   25:**
        -:   26:**  $Log: cfe_es_start.c.gcov  $
        -:   26:**  Revision 1.3 2010/11/04 17:46:39EDT jmdagost 
        -:   26:**  Updated unit test results.
        -:   27:**  Revision 1.8 2010/11/04 14:05:56EDT acudmore 
        -:   28:**  Added ram disk mount path configuration option.
        -:   29:**  Revision 1.7 2010/09/21 15:52:17EDT jmdagost 
        -:   30:**  Replaced syslog argument RetStatus with BlocksFree.
        -:   31:**  Revision 1.6 2009/07/30 16:06:55EDT acudmore 
        -:   32:**  Fixed check for blocks free in RAM disk ( > vs >= )
        -:   33:**  Revision 1.5 2009/07/28 16:33:19EDT jmdagost 
        -:   34:**  Replaced 3 references to filename with references to function name.
        -:   35:**  Revision 1.4 2009/06/10 09:09:01EDT acudmore 
        -:   36:**  Converted OS_Mem* and OS_BSP* API to CFE_PSP_* API
        -:   37:**  Revision 1.3 2008/07/30 14:53:30EDT apcudmore 
        -:   38:**  Updated init code for startup sync support.
        -:   39:**  Revision 1.2 2008/06/20 15:40:32EDT apcudmore 
        -:   40:**  Added support for OSAL based module loader
        -:   41:**   - Removed calls and references to the BSP based module loader
        -:   42:**  Revision 1.1 2008/04/17 08:05:08EDT ruperera 
        -:   43:**  Initial revision
        -:   44:**  Member added to project c:/MKSDATA/MKS-REPOSITORY/MKS-CFE-PROJECT/fsw/cfe-core/src/es/project.pj
        -:   45:**  Revision 1.46 2007/09/21 15:40:20EDT David Kobe (dlkobe) 
        -:   46:**  Modified pointer type definitions to eliminate Linux gcc compile warnings
        -:   47:**  Revision 1.45 2007/05/31 10:13:56EDT apcudmore 
        -:   48:**  Fixed Syslog message text for Volatile Disk initialization
        -:   49:**  Revision 1.44 2007/05/30 10:26:06EDT apcudmore 
        -:   50:**  Added Exception handler support:
        -:   51:**   - BSP routine to attach processor exceptions
        -:   52:**   - context datatype and size define
        -:   53:**   - added default exception init for each app+task
        -:   54:**  Revision 1.43 2007/05/25 14:20:10EDT apcudmore 
        -:   55:**  Fixed compiler warnings
        -:   56:**  Revision 1.42 2007/05/25 10:38:12EDT apcudmore 
        -:   57:**  Added OS_rmfs call to remove file system before reformatting it.
        -:   58:**  Revision 1.41 2007/05/25 10:02:42EDT apcudmore 
        -:   59:**  Fixed Typo and Moved WriteToSysLog call
        -:   60:**  Revision 1.40 2007/05/24 15:09:23EDT apcudmore 
        -:   61:**  App-Decompression updates:
        -:   62:**    - Added verify macros for PERCENT_FREE config parameter
        -:   63:**    - Updated comments in config files
        -:   64:**    - Updated logic to turn off check if RAM_DISK_PERCENT_FREE is 0
        -:   65:**  Revision 1.39 2007/05/24 10:57:48EDT apcudmore 
        -:   66:**  Application Decompression Support:
        -:   67:**   - Added configuration parameter for Percent of space free in Volatile disk on a P.R.
        -:   68:**   - Added logic to check for amount of free space and reformat RAM disk if needed on a P.R.
        -:   69:**   - Fixed warnings in decompression code.
        -:   70:**  Revision 1.38 2007/05/22 14:56:55EDT apcudmore 
        -:   71:**  cFE Non-Volatile Disk/Startup File changes:
        -:   72:**    - cFE startup now passes in startup file path/name
        -:   73:**    - cFE startup code does not init non-volatile disk ( BSP does )
        -:   74:**    - BSPs now can map cFE paths without making the OS_initfs/OS_mount calls
        -:   75:**    - MCP750 vxWorks6.2 BSP inits/mounts CF disk
        -:   76:**    - Desktop ports pass in the same startup file path/name as before
        -:   77:**  Revision 1.37 2007/05/07 15:56:32EDT apcudmore 
        -:   78:**  Removed all ES startup semaphore code
        -:   79:**  Removed all ES startup delays.
        -:   80:**  Startup sync problems ( seem to be ) eliminated by protecting the ES global data tables with a mutex.
        -:   81:**  Revision 1.36 2007/05/04 15:58:36EDT apcudmore 
        -:   82:**  Implemented ES shared data protection. Eliminates Startup syncronization problem.
        -:   83:**  Revision 1.35 2007/04/13 16:28:52EDT apcudmore 
        -:   84:**  Changed function prototype to return int32 status on the ES Object table functions. 
        -:   85:**  ES will now call OS_BSPPanic when the function returns something other than CFE_SUCCESS
        -:   86:**  Revision 1.34 2007/04/10 13:50:46EDT rjmcgraw 
        -:   87:**  Renamed function setupAnalyzerVariables to SetupPerfVariables
        -:   88:**  Revision 1.33 2007/03/29 13:29:16EST apcudmore 
        -:   89:**  Updated global variables and housekeeping to count:
        -:   90:**  - Registered Core Apps
        -:   91:**  - Registered External Apps
        -:   92:**  - ALL Tasks 
        -:   93:**  Revision 1.32 2007/03/22 10:26:23EST apcudmore 
        -:   94:**  Implemented all code walkthrough items related to ES Application logic, commands, 
        -:   95:**  and telemetry.
        -:   96:**  Revision 1.31 2007/03/13 14:32:37EST apcudmore 
        -:   97:**  Fixed ES Startup code walkthrough items.
        -:   98:*/
        -:   99:
        -:  100:/*
        -:  101:** Includes
        -:  102:*/
        -:  103:
        -:  104:#include "cfe.h"
        -:  105:#include "cfe_platform_cfg.h"
        -:  106:#include "cfe_es.h"
        -:  107:#include "cfe_es_global.h"       
        -:  108:#include "cfe_es_start.h" 
        -:  109:#include "cfe_es_apps.h"
        -:  110:#include "cfe_es_log.h"
        -:  111:#include "cfe_psp.h"
        -:  112:
        -:  113:#include <stdio.h>
        -:  114:#include <string.h>
        -:  115:
        -:  116:/***************************************************************************/
        -:  117:
        -:  118:/*
        -:  119:** Defines for this module
        -:  120:*/
        -:  121:
        -:  122:/* 
        -:  123:** Number of msecs to delay before exiting cFE. Allows LogMsg to get through 
        -:  124:*/
        -:  125:#define CFE_ES_PANIC_DELAY  500
        -:  126:
        -:  127:
        -:  128:/*
        -:  129:** Global data for the ES startup code and Runtime library
        -:  130:*/
        -:  131:CFE_ES_Global_t     CFE_ES_Global;
        -:  132:
        -:  133:/*
        -:  134:** Pointer to the Reset data that is preserved on a processor reset
        -:  135:*/
        -:  136:CFE_ES_ResetData_t  *CFE_ES_ResetDataPtr;
        -:  137:
        -:  138:
        -:  139:/***************************************************************************/
        -:  140:
        -:  141:/*
        -:  142:** Code
        -:  143:*/
        -:  144:
        -:  145:/*
        -:  146:** Name: CFE_ES_Main
        -:  147:** Purpose: This is the entry point to the cFE application code.
        -:  148:**
        -:  149:*/
        -:  150:void CFE_ES_Main(uint32 StartType, uint32 StartSubtype, uint32 ModeId, uint8 *StartFilePath )
        3:  151:{
        -:  152:   int   i;
        -:  153:   int32 ReturnCode;
        -:  154:
        -:  155:   /*
        -:  156:   ** Initialize the Reset variables. This call is required
        -:  157:   ** Before most of the ES functions can be used including the 
        -:  158:   ** ES System log.
        -:  159:   */
        3:  160:   CFE_ES_SetupResetVariables(StartType, StartSubtype, ModeId);
        -:  161:
        -:  162:   /*
        -:  163:   ** Initialize the Logic Perf variables
        -:  164:   ** Because this is in the ES Reset area, it must be called after
        -:  165:   ** CFE_ES_SetupResetVariables.
        -:  166:   */
        3:  167:   CFE_ES_SetupPerfVariables(StartType);
        -:  168:
        -:  169:   /*
        -:  170:   ** Announce the startup
        -:  171:   */
        3:  172:   CFE_ES_WriteToSysLog("ES Startup: CFE_ES_Main started\n");
        -:  173:
        -:  174:   /*
        -:  175:   ** Create and Mount the filesystems needed
        -:  176:   */
        3:  177:   CFE_ES_InitializeFileSystems(StartType);
        -:  178:   
        -:  179:   /*
        -:  180:   ** Install exception Handlers ( Placeholder )
        -:  181:   */
        3:  182:   CFE_PSP_AttachExceptions();
        -:  183:
        -:  184:   /*
        -:  185:   ** Initialize the ES Application Table
        -:  186:   ** to mark all entries as unused.
        -:  187:   */
       99:  188:   for ( i = 0; i < CFE_ES_MAX_APPLICATIONS; i++ )
        -:  189:   {
       96:  190:      CFE_ES_Global.AppTable[i].RecordUsed = FALSE;
        -:  191:   }
        -:  192:   
        -:  193:   /*
        -:  194:   ** Initialize the ES Task Table
        -:  195:   ** to mark all entries as unused.
        -:  196:   */
      195:  197:   for ( i = 0; i < OS_MAX_TASKS; i++ )
        -:  198:   {
      192:  199:      CFE_ES_Global.TaskTable[i].RecordUsed = FALSE;
        -:  200:   }
        -:  201:
        -:  202:   /*
        -:  203:   ** Create the ES Shared Data Mutex
        -:  204:   */
        3:  205:   ReturnCode = OS_MutSemCreate(&(CFE_ES_Global.SharedDataMutex), "ES_DATA_MUTEX", 0 );
        3:  206:   if(ReturnCode != OS_SUCCESS)
        -:  207:   {
        1:  208:      CFE_ES_WriteToSysLog("ES Startup: Error: ES Shared Data Mutex could not be created. RC=0x%08X\n",
        -:  209:                            ReturnCode);
        -:  210:         
        -:  211:      /*
        -:  212:      ** Delay to allow the message to be read
        -:  213:      */
        1:  214:      OS_TaskDelay(CFE_ES_PANIC_DELAY);
        -:  215:      
        -:  216:      /* 
        -:  217:      ** cFE Cannot continue to start up. 
        -:  218:      */
        1:  219:      CFE_PSP_Panic(CFE_PSP_PANIC_STARTUP_SEM);
        -:  220:         
        -:  221:   } /* end if */
        -:  222:
        -:  223:   /*
        -:  224:   ** Create the ES Startup Sync Semaphore
        -:  225:   */
        3:  226:   ReturnCode = OS_BinSemCreate(&(CFE_ES_Global.StartupSyncSemaphore),"ES_SYNC_SEM", 0, 0 );
        3:  227:   if(ReturnCode != OS_SUCCESS)
        -:  228:   {
        1:  229:      CFE_ES_WriteToSysLog("ES Startup: Error: ES Startup Sync Semaphore could not be created. RC=0x%08X\n",
        -:  230:                            ReturnCode);
        -:  231:         
        -:  232:      /*
        -:  233:      ** Delay to allow the message to be read
        -:  234:      */
        1:  235:      OS_TaskDelay(CFE_ES_PANIC_DELAY);
        -:  236:      
        -:  237:      /* 
        -:  238:      ** cFE Cannot continue to start up. 
        -:  239:      */
        1:  240:      CFE_PSP_Panic(CFE_PSP_PANIC_STARTUP_SEM);
        -:  241:         
        -:  242:   } /* end if */
        -:  243:
        -:  244:
        -:  245:   /*
        -:  246:   ** Create the tasks, OS objects, and initialize hardware
        -:  247:   */
        3:  248:   CFE_ES_CreateObjects();
        -:  249:
        -:  250:   /*
        -:  251:   ** Before the Applications are loaded, set up the state
        -:  252:   ** variables that allow the startup syncronization to work.
        -:  253:   ** This depends on a couple of things:
        -:  254:   **  1. The fact that the cFE applications all use the CFE_ES_RunLoop Call
        -:  255:   **  2. The StartupSyncSemaphore has been created ( see above )
        -:  256:   **  3. The App(s) that wish to wait calls CFE_ES_WaitForStartupSync
        -:  257:   */
        3:  258:   CFE_ES_Global.AppStartupCounter = 0;
        3:  259:   CFE_ES_Global.StartupFileComplete = FALSE;
        3:  260:   CFE_ES_Global.StartupSemaphoreReleased = FALSE;
        -:  261:   
        -:  262:   /*
        -:  263:   ** Start the cFE Applications from the disk using the file
        -:  264:   ** specified in the CFE_ES_NONVOL_STARTUP_FILE or CFE_ES_VOLATILE_STARTUP_FILE 
        -:  265:   ** ( defined in the cfe_platform_cfg.h file )
        -:  266:   */   
        3:  267:   CFE_ES_StartApplications(StartType, StartFilePath );
        -:  268:
        -:  269:   /*
        -:  270:   ** Indicate that the startup file is complete. This avoids
        -:  271:   ** certain race conditions.
        -:  272:   */
        3:  273:   CFE_ES_Global.StartupFileComplete = TRUE;
        -:  274:   
        -:  275:
        -:  276:   /*
        -:  277:   ** Startup is complete
        -:  278:   */
        3:  279:   CFE_ES_WriteToSysLog("ES Startup: CFE Core Startup Complete\n");
        3:  280:}
        -:  281:
        -:  282:/*
        -:  283:** Name: CFE_ES_SetupResetVariables
        -:  284:**
        -:  285:** Purpose: This function initializes the ES reset variables depending on the reset type.
        -:  286:**          It will also initiate a power on reset when too many processor resets
        -:  287:**           have happened.
        -:  288:**
        -:  289:*/
        -:  290:void CFE_ES_SetupResetVariables(uint32 StartType, uint32 StartSubtype, uint32 BootSource )
       10:  291:{
        -:  292:
        -:  293:   int32  status;
        -:  294:   uint32 resetAreaSize;
        -:  295:   
        -:  296:   /*
        -:  297:   ** Get the pointer to the Reset area from the BSP
        -:  298:   */
       10:  299:   status = CFE_PSP_GetResetArea (&(CFE_ES_ResetDataPtr), &(resetAreaSize));
        -:  300:      
        -:  301:   /*
        -:  302:   ** Make sure the status is OK or size is big enough
        -:  303:   */
       10:  304:   if ( status == OS_ERROR )
        -:  305:   {
        -:  306:      /*
        -:  307:      ** Cannot use the ES System log without the Reset Area
        -:  308:      */
        1:  309:      OS_printf("ES Startup: CFE_PSP_GetResetArea call Failed!\n");
        -:  310:      
        -:  311:      /*
        -:  312:      ** Delay to allow the message to be read
        -:  313:      */
        1:  314:      OS_TaskDelay(CFE_ES_PANIC_DELAY);
        -:  315:      
        -:  316:      /* 
        -:  317:      ** cFE Cannot continue to start up. 
        -:  318:      */
        1:  319:      CFE_PSP_Panic(CFE_PSP_PANIC_MEMORY_ALLOC);
        -:  320:      
        -:  321:   }
        9:  322:   else if ( resetAreaSize < sizeof(CFE_ES_ResetData_t))
        -:  323:   {
        -:  324:      /*
        -:  325:      ** Cannot use the ES system log without the Reset Area
        -:  326:      */
        1:  327:      OS_printf("ES Startup: Error: ES Reset area not big enough. Needed: %d, Given: %d.\n",
        -:  328:              sizeof(CFE_ES_ResetData_t),
        -:  329:              resetAreaSize);      
        -:  330:      /*
        -:  331:      ** Delay to allow the message to be read
        -:  332:      */
        1:  333:      OS_TaskDelay(CFE_ES_PANIC_DELAY);
        -:  334:      
        -:  335:      /* 
        -:  336:      ** cFE Cannot continue to start up. 
        -:  337:      */
        1:  338:      CFE_PSP_Panic(CFE_PSP_PANIC_MEMORY_ALLOC);
        -:  339:      
        -:  340:   }
        -:  341:
        -:  342:   /*
        -:  343:   ** Determine how the system was started. The choices are:
        -:  344:   **   CFE_ES_POWER_ON_RESET, or CFE_ES_PROCESSOR_RESET
        -:  345:   ** The subtypes include:
        -:  346:   **   CFE_ES_POWER_CYCLE, CFE_ES_PUSH_BUTTON, CFE_ES_HW_SPECIAL_COMMAND,
        -:  347:   **   CFE_ES_HW_WATCHDOG, CFE_ES_RESET_COMMAND, or CFE_ES_EXCEPTION.
        -:  348:   */
       10:  349:   if ( StartType == CFE_ES_POWERON_RESET )
        -:  350:   {
        -:  351:      /*
        -:  352:      ** Record the reset type and subtype
        -:  353:      */
        3:  354:      CFE_ES_ResetDataPtr->ResetVars.ResetSubtype = StartSubtype;
        3:  355:      CFE_ES_ResetDataPtr->ResetVars.ResetType = CFE_ES_POWERON_RESET;
        -:  356:
        -:  357:      /*
        -:  358:      ** Always log the power-on reset. 
        -:  359:      */
        3:  360:      status =  CFE_ES_WriteToERLog(CFE_ES_CORE_LOG_ENTRY, CFE_ES_POWERON_RESET, StartSubtype,
        -:  361:                                    "ES Startup: POWER ON Reset", NULL,0 );
        -:  362:
        -:  363:      /*
        -:  364:      ** Initialize all reset counters.
        -:  365:      */
        3:  366:      CFE_ES_ResetDataPtr->ResetVars.ProcessorResetCount = 0;
        3:  367:      CFE_ES_ResetDataPtr->ResetVars.MaxProcessorResetCount = CFE_ES_MAX_PROCESSOR_RESETS;
        3:  368:      CFE_ES_Global.DebugVars.DebugFlag = 0;
        -:  369:      
        -:  370:   }
        7:  371:   else if ( StartType == CFE_ES_PROCESSOR_RESET )
        -:  372:   {
        -:  373:      /*
        -:  374:      ** If a Processor reset was not commanded, it must be a watchdog reset.
        -:  375:      ** Log the reset before updating any reset variables.
        -:  376:      */
        7:  377:      if ( CFE_ES_ResetDataPtr->ResetVars.ES_CausedReset != TRUE )
        -:  378:      {
        -:  379:
        6:  380:         CFE_ES_ResetDataPtr->ResetVars.ResetType = CFE_ES_PROCESSOR_RESET;
        6:  381:         CFE_ES_ResetDataPtr->ResetVars.ResetSubtype = CFE_ES_HW_WATCHDOG;
        6:  382:         CFE_ES_ResetDataPtr->ResetVars.ProcessorResetCount++;
        -:  383:         
        -:  384:         /*
        -:  385:         ** Log the watchdog reset 
        -:  386:         */
        6:  387:         status =  CFE_ES_WriteToERLog(CFE_ES_CORE_LOG_ENTRY, CFE_ES_PROCESSOR_RESET, StartSubtype,
        -:  388:                                       "ES Startup: PROCESSOR RESET due to Watchdog.", NULL,0 );
        -:  389:
        -:  390:         /*
        -:  391:         ** When coming up from a Processor reset that was not caused by ES, check to see 
        -:  392:         ** if the maximum number has been exceeded
        -:  393:         */
        6:  394:         if ( CFE_ES_ResetDataPtr->ResetVars.ProcessorResetCount >= 
        -:  395:              CFE_ES_ResetDataPtr->ResetVars.MaxProcessorResetCount )
        -:  396:         {
        -:  397:         
        2:  398:             CFE_ES_WriteToSysLog("ES Startup: CFE ES Power On Reset Due to Max Processor Resets.\n");
        -:  399:
        -:  400:             /*
        -:  401:             ** Log the reset in the ER Log. The log will be wiped out, but it's good to have
        -:  402:             ** the entry just in case something fails.
        -:  403:             */
        2:  404:             status =  CFE_ES_WriteToERLog(CFE_ES_CORE_LOG_ENTRY, CFE_ES_POWERON_RESET, StartSubtype,
        -:  405:                                       "ES Startup: POWER ON RESET due to Maximum Processor Resets in ES Startup.", NULL,0 );
        -:  406:        
        -:  407:             /*
        -:  408:             ** Call the BSP reset routine 
        -:  409:             */
        2:  410:             CFE_PSP_Restart(CFE_ES_POWERON_RESET);
        -:  411:             
        -:  412:             /*
        -:  413:             ** Should not return here.
        -:  414:             */
        2:  415:             CFE_ES_WriteToSysLog("ES Startup: Error: CFE_PSP_Restart returned.\n");
        -:  416:             
        -:  417:         } /* end if */
        -:  418:         
        -:  419:      }
        -:  420:      /*
        -:  421:      ** If a processor reset was commanded, the reset has already been logged.
        -:  422:      ** Update the reset variables only.
        -:  423:      ** The logic for detecting maximum resets is done on the command side
        -:  424:      ** on the "way down", or when the command is executed.
        -:  425:      */
        -:  426:      else
        -:  427:      {
        1:  428:         CFE_ES_ResetDataPtr->ResetVars.ResetType    = CFE_ES_PROCESSOR_RESET;
        1:  429:         CFE_ES_ResetDataPtr->ResetVars.ResetSubtype = StartSubtype;
        -:  430:      }
        -:  431:
        -:  432:      /*
        -:  433:      ** Initialize processor reset counters.
        -:  434:      */
        7:  435:      CFE_ES_Global.DebugVars.DebugFlag = 0;
        -:  436:   }
        -:  437:   
        -:  438:   /*
        -:  439:   ** Clear the commanded reset flag, in case a watchdog happens.
        -:  440:   */
       10:  441:   CFE_ES_ResetDataPtr->ResetVars.ES_CausedReset = FALSE;
       10:  442:   CFE_ES_ResetDataPtr->ResetVars.BootSource   = BootSource;
        -:  443:      
       10:  444:}
        -:  445:
        -:  446:/*
        -:  447:** Name: CFE_ES_InitializeFileSystems
        -:  448:**
        -:  449:** Purpose: This function initializes the file systems used in the cFE core.
        -:  450:**
        -:  451:*/
        -:  452:void CFE_ES_InitializeFileSystems(uint32 start_type)
       12:  453:{
        -:  454:   int32   RetStatus;
        -:  455:   uint32 *RamDiskMemoryAddress;
        -:  456:   uint32  RamDiskMemorySize;
        -:  457:   int32   BlocksFree;
        -:  458:   int32   PercentFree;
        -:  459: 
        -:  460:   /* 
        -:  461:   ** Get the memory area for the RAM disk 
        -:  462:   */
       12:  463:   RetStatus = CFE_PSP_GetVolatileDiskMem(&(RamDiskMemoryAddress), &(RamDiskMemorySize));
        -:  464:
       12:  465:   if ( RetStatus != OS_FS_SUCCESS )
        -:  466:   {
        1:  467:      CFE_ES_WriteToSysLog("ES Startup: Cannot Get Memory for Volatile Disk. EC = 0x%08X\n",RetStatus);
        -:  468:
        -:  469:      /*
        -:  470:      ** Delay to allow the message to be read
        -:  471:      */
        1:  472:      OS_TaskDelay(CFE_ES_PANIC_DELAY);
        -:  473:      
        -:  474:      /* 
        -:  475:      ** cFE Cannot continue to start up.  
        -:  476:      */
        1:  477:      CFE_PSP_Panic(CFE_PSP_PANIC_VOLATILE_DISK);
        -:  478:
        -:  479:   }      
        -:  480:   
        -:  481:   /*
        -:  482:   ** Next, either format, or just initialize the RAM disk depending on
        -:  483:   ** the reset type
        -:  484:   */
       12:  485:   if ( start_type == CFE_ES_POWERON_RESET )
        -:  486:   {
        4:  487:      RetStatus = OS_mkfs((void *)RamDiskMemoryAddress, "/ramdev0", "RAM", CFE_ES_RAM_DISK_SECTOR_SIZE, CFE_ES_RAM_DISK_NUM_SECTORS );
        4:  488:      if ( RetStatus != OS_FS_SUCCESS )
        -:  489:      {
        1:  490:         CFE_ES_WriteToSysLog("ES Startup: Error Creating Volatile(RAM) Volume. EC = 0x%08X\n",RetStatus);
        -:  491:
        -:  492:         /*
        -:  493:         ** Delay to allow the message to be read
        -:  494:         */
        1:  495:         OS_TaskDelay(CFE_ES_PANIC_DELAY);
        -:  496:      
        -:  497:         /* 
        -:  498:         ** cFE Cannot continue to start up.  
        -:  499:         */
        1:  500:         CFE_PSP_Panic(CFE_PSP_PANIC_VOLATILE_DISK);
        -:  501:      }
        -:  502:   }
        -:  503:   else
        -:  504:   {
        8:  505:      RetStatus = OS_initfs((void *)RamDiskMemoryAddress, "/ramdev0", "RAM", CFE_ES_RAM_DISK_SECTOR_SIZE, CFE_ES_RAM_DISK_NUM_SECTORS );
        8:  506:      if ( RetStatus != OS_FS_SUCCESS )
        -:  507:      {
        2:  508:         CFE_ES_WriteToSysLog("ES Startup: Error Initializing Volatile(RAM) Volume. EC = 0x%08X\n",RetStatus);
        2:  509:         CFE_ES_WriteToSysLog("ES Startup: Formatting Volatile(RAM) Volume.\n");
        -:  510:         
        2:  511:         RetStatus = OS_mkfs((void *)RamDiskMemoryAddress, "/ramdev0", "RAM", CFE_ES_RAM_DISK_SECTOR_SIZE, CFE_ES_RAM_DISK_NUM_SECTORS );
        2:  512:         if ( RetStatus != OS_SUCCESS )
        -:  513:         {
        2:  514:            CFE_ES_WriteToSysLog("ES Startup: Error Creating Volatile(RAM) Volume. EC = 0x%08X\n",RetStatus);
        -:  515:
        -:  516:            /*
        -:  517:            ** Delay to allow the message to be read
        -:  518:            */
        2:  519:            OS_TaskDelay(CFE_ES_PANIC_DELAY);
        -:  520:      
        -:  521:            /* 
        -:  522:            ** cFE Cannot continue to start up.  
        -:  523:            */
        2:  524:            CFE_PSP_Panic(CFE_PSP_PANIC_VOLATILE_DISK);
        -:  525:         }
        -:  526:         
        -:  527:      }
        -:  528:   }
        -:  529:
        -:  530:   /*
        -:  531:   ** Now, mount the RAM disk
        -:  532:   */
       12:  533:   RetStatus = OS_mount("/ramdev0", CFE_ES_RAM_DISK_MOUNT_STRING);
       12:  534:   if ( RetStatus != OS_FS_SUCCESS )
        -:  535:   {
        5:  536:      CFE_ES_WriteToSysLog("ES Startup: Error Mounting Volatile(RAM) Volume. EC = 0x%08X\n",RetStatus);
        -:  537:      /*
        -:  538:      ** Delay to allow the message to be read
        -:  539:      */
        5:  540:      OS_TaskDelay(CFE_ES_PANIC_DELAY);
        -:  541:      
        -:  542:      /* 
        -:  543:      ** cFE Cannot continue to start up.  
        -:  544:      */
        5:  545:      CFE_PSP_Panic(CFE_PSP_PANIC_VOLATILE_DISK);
        -:  546:   }
        -:  547:
        -:  548:
        -:  549:   /*
        -:  550:   ** During a Processor reset, if the RAM disk has less than a defined 
        -:  551:   ** amount of free space, reformat and re-mount it.
        -:  552:   ** The parameter being checked is CFE_ES_RAM_DISK_PERCENT_RESERVED
        -:  553:   ** Note: When CFE_ES_RAM_DISK_PERCENT_RESERVED is set to 0, this feature is 
        -:  554:   **       disabled.
        -:  555:   */
       12:  556:   if ((start_type == CFE_ES_PROCESSOR_RESET) && (CFE_ES_RAM_DISK_PERCENT_RESERVED > 0))
        -:  557:   {
        -:  558:      /*
        -:  559:      ** See how many blocks are free in the RAM disk
        -:  560:      */
        7:  561:      BlocksFree = OS_fsBlocksFree(CFE_ES_RAM_DISK_MOUNT_STRING);   
        7:  562:      if ( BlocksFree >= 0 )
        -:  563:      {
        -:  564:         /*
        -:  565:         ** Need a sanity check for the desktop systems.
        -:  566:         ** Because the desktop ports map the volatile disk to the host 
        -:  567:         ** hard disk, it will report more free blocks than the defined number
        -:  568:         ** of sectors ( blocks ). Therefore it must be truncated.
        -:  569:         */
        6:  570:         if ( BlocksFree > CFE_ES_RAM_DISK_NUM_SECTORS )
        -:  571:         {
        1:  572:             BlocksFree = CFE_ES_RAM_DISK_NUM_SECTORS - 1;
        -:  573:         }
        -:  574:         
        -:  575:         /*
        -:  576:         ** Determine if the disk is too full 
        -:  577:         */
        6:  578:         BlocksFree = BlocksFree * 100;
        6:  579:         PercentFree = BlocksFree / CFE_ES_RAM_DISK_NUM_SECTORS;
        6:  580:         CFE_ES_WriteToSysLog("Volatile Disk has %d Percent free space.\n",PercentFree);
        -:  581:
        6:  582:         if ( PercentFree < CFE_ES_RAM_DISK_PERCENT_RESERVED )
        -:  583:         {
        5:  584:            CFE_ES_WriteToSysLog("ES Startup: Insufficent Free Space on Volatile Disk, Reformatting.\n");
        -:  585:          
        -:  586:            /*
        -:  587:            ** First, unmount the disk
        -:  588:            */
        5:  589:            RetStatus = OS_unmount(CFE_ES_RAM_DISK_MOUNT_STRING);
        5:  590:            if ( RetStatus == OS_FS_SUCCESS )
        -:  591:            {
        -:  592:
        -:  593:               /*
        -:  594:               ** Remove the file system from the OSAL
        -:  595:               */
        4:  596:               RetStatus = OS_rmfs("/ramdev0");
        4:  597:               if ( RetStatus == OS_FS_SUCCESS )
        -:  598:               {
        -:  599:               
        -:  600:                  /*
        -:  601:                  ** Next, make a new file system on the disk
        -:  602:                  */
        3:  603:                  RetStatus = OS_mkfs((void *)RamDiskMemoryAddress, "/ramdev0", 
        -:  604:                                      "RAM", CFE_ES_RAM_DISK_SECTOR_SIZE, 
        -:  605:                                       CFE_ES_RAM_DISK_NUM_SECTORS );
        3:  606:                  if ( RetStatus == OS_FS_SUCCESS )
        -:  607:                  {
        -:  608:                     /*
        -:  609:                     ** Last, remount the disk
        -:  610:                     */
        1:  611:                     RetStatus = OS_mount("/ramdev0", CFE_ES_RAM_DISK_MOUNT_STRING);
        1:  612:                     if ( RetStatus != OS_FS_SUCCESS )
        -:  613:                     {
        1:  614:                        CFE_ES_WriteToSysLog("ES Startup: Error Re-Mounting Volatile(RAM) Volume. EC = 0x%08X\n",RetStatus);
        -:  615:                        /*
        -:  616:                        ** Delay to allow the message to be read
        -:  617:                        */
        1:  618:                        OS_TaskDelay(CFE_ES_PANIC_DELAY);
        -:  619:                     
        -:  620:                        /* 
        -:  621:                        ** cFE Cannot continue to start up.  
        -:  622:                        */
        1:  623:                        CFE_PSP_Panic(CFE_PSP_PANIC_VOLATILE_DISK);
        -:  624:                     
        -:  625:                     } /* end if mount */
        -:  626:                  }
        -:  627:                  else
        -:  628:                  {
        -:  629:
        2:  630:                     CFE_ES_WriteToSysLog("ES Startup: Error Re-Formating Volatile(RAM) Volume. EC = 0x%08X\n",RetStatus);
        -:  631:                     /*
        -:  632:                     ** Delay to allow the message to be read
        -:  633:                     */
        2:  634:                     OS_TaskDelay(CFE_ES_PANIC_DELAY);
        -:  635:      
        -:  636:                     /* 
        -:  637:                     ** cFE Cannot continue to start up.  
        -:  638:                     */
        2:  639:                     CFE_PSP_Panic(CFE_PSP_PANIC_VOLATILE_DISK);
        -:  640:                                 
        -:  641:                  } /* end if mkfs */
        -:  642:
        -:  643:              }
        -:  644:              else /* could not Remove File system */
        -:  645:              {
        -:  646:
        1:  647:                  CFE_ES_WriteToSysLog("ES Startup: Error Removing Volatile(RAM) Volume. EC = 0x%08X\n",RetStatus);
        -:  648:                  /*
        -:  649:                  ** Delay to allow the message to be read
        -:  650:                  */
        1:  651:                  OS_TaskDelay(CFE_ES_PANIC_DELAY);
        -:  652:      
        -:  653:                  /* 
        -:  654:                  ** cFE Cannot continue to start up.  
        -:  655:                  */
        1:  656:                  CFE_PSP_Panic(CFE_PSP_PANIC_VOLATILE_DISK);
        -:  657:
        -:  658:              } /* end if OS_rmfs */
        -:  659:
        -:  660:            }
        -:  661:            else /* could not un-mount disk */
        -:  662:            {
        1:  663:               CFE_ES_WriteToSysLog("ES Startup: Error Un-Mounting Volatile(RAM) Volume. EC = 0x%08X\n",RetStatus);
        -:  664:               /*
        -:  665:               ** Delay to allow the message to be read
        -:  666:               */
        1:  667:               OS_TaskDelay(CFE_ES_PANIC_DELAY);
        -:  668:               
        -:  669:               /* 
        -:  670:               ** cFE Cannot continue to start up.  
        -:  671:               */
        1:  672:               CFE_PSP_Panic(CFE_PSP_PANIC_VOLATILE_DISK);            
        -:  673:            }
        -:  674:            
        -:  675:         } /* end if enough free space */
        -:  676:         
        -:  677:      }
        -:  678:      else  /* could not determine free blocks */
        -:  679:      {         
        -:  680:         /* Log error message -- note that BlocksFree returns the error code in this case */
        1:  681:         CFE_ES_WriteToSysLog("ES Startup: Error Determining Blocks Free on Volume. EC = 0x%08X\n",BlocksFree);
        -:  682:
        -:  683:         /*
        -:  684:         ** Delay to allow the message to be read
        -:  685:         */
        1:  686:         OS_TaskDelay(CFE_ES_PANIC_DELAY);
        -:  687:
        -:  688:         /* 
        -:  689:         ** cFE Cannot continue to start up.  
        -:  690:         */
        1:  691:         CFE_PSP_Panic(CFE_PSP_PANIC_VOLATILE_DISK);
        -:  692:         
        -:  693:      } /* end if BlocksFree */
        -:  694:   
        -:  695:   } /* end if processor reset */
        -:  696:     
       12:  697:} /* end function */
        -:  698:
        -:  699:/*-------------------------------------------------------------------------
        -:  700:**
        -:  701:**                  Functional Prolog
        -:  702:**
        -:  703:**   Name: CFE_ES_CreateObjects
        -:  704:**
        -:  705:**   Purpose: This function reads the es_object_table and performs all of the
        -:  706:**            application layer initialization.
        -:  707:**----------------------------------------------------------------------------
        -:  708:*/
        -:  709:void  CFE_ES_CreateObjects(void)
        8:  710:{
        -:  711:    int32     ReturnCode;
        -:  712:    boolean   AppSlotFound;
        -:  713:    int16     i;
        -:  714:    int16     j;
        -:  715:
        8:  716:    CFE_ES_WriteToSysLog("ES Startup: Starting Object Creation calls.\n");
        -:  717:
      248:  718:    for ( i = 0; i < CFE_ES_OBJECT_TABLE_SIZE; i++ )
        -:  719:    {
      240:  720:        switch ( CFE_ES_ObjectTable[i].ObjectType )
        -:  721:        {
        -:  722:            case CFE_ES_DRIVER_TASK:
        -:  723:            case CFE_ES_CORE_TASK:
        -:  724:
        -:  725:            /*
        -:  726:            ** Allocate an ES AppTable entry
        -:  727:            */
       40:  728:            AppSlotFound = FALSE;
      635:  729:            for ( j = 0; j < CFE_ES_MAX_APPLICATIONS; j++ )
        -:  730:            {
      620:  731:               if ( CFE_ES_Global.AppTable[j].RecordUsed == FALSE )
        -:  732:               {
       25:  733:                  AppSlotFound = TRUE;
       25:  734:                  break;
        -:  735:               }
        -:  736:            }
        -:  737:
        -:  738:            /*
        -:  739:            ** If a slot was found, create the application
        -:  740:            */
       40:  741:            if ( AppSlotFound == TRUE )
        -:  742:            {
        -:  743:            
       25:  744:               CFE_ES_LockSharedData(__func__,__LINE__);
        -:  745:
        -:  746:               /*
        -:  747:               ** Allocate and populate the ES_AppTable entry
        -:  748:               */
       25:  749:               CFE_PSP_MemSet ( (void *)&(CFE_ES_Global.AppTable[j]), 0, sizeof(CFE_ES_AppRecord_t));
       25:  750:               CFE_ES_Global.AppTable[j].RecordUsed = TRUE;
       25:  751:               CFE_ES_Global.AppTable[j].Type = CFE_ES_APP_TYPE_CORE;
        -:  752:               
        -:  753:               /*
        -:  754:               ** Fill out the parameters in the AppStartParams sub-structure
        -:  755:               */         
       25:  756:               strncpy((char *)CFE_ES_Global.AppTable[j].StartParams.Name, (char *)CFE_ES_ObjectTable[i].ObjectName, OS_MAX_API_NAME);
       25:  757:               CFE_ES_Global.AppTable[j].StartParams.Name[OS_MAX_API_NAME - 1] = '\0';
        -:  758:               /* EntryPoint field is not valid here for base apps */
        -:  759:               /* FileName is not valid for base apps, either */
       25:  760:               CFE_ES_Global.AppTable[j].StartParams.StackSize = CFE_ES_ObjectTable[i].ObjectSize;
       25:  761:               CFE_ES_Global.AppTable[j].StartParams.StartAddress = (uint32)CFE_ES_ObjectTable[i].FuncPtrUnion.FunctionPtr;
       25:  762:               CFE_ES_Global.AppTable[j].StartParams.ExceptionAction = CFE_ES_APP_EXCEPTION_PROC_RESTART;
       25:  763:               CFE_ES_Global.AppTable[j].StartParams.Priority = CFE_ES_ObjectTable[i].ObjectPriority;
        -:  764:               
        -:  765:               
        -:  766:               /*
        -:  767:               ** Fill out the Task Info
        -:  768:               */
       25:  769:               strncpy((char *)CFE_ES_Global.AppTable[j].TaskInfo.MainTaskName, (char *)CFE_ES_ObjectTable[i].ObjectName, OS_MAX_API_NAME);
       25:  770:               CFE_ES_Global.AppTable[j].TaskInfo.MainTaskName[OS_MAX_API_NAME - 1] = '\0';
       25:  771:               CFE_ES_Global.AppTable[j].TaskInfo.NumOfChildTasks = 0;
        -:  772:               
        -:  773:               /*
        -:  774:               ** Since this is a Core app, the AppStateRecord does not need to be filled out.
        -:  775:               */
        -:  776:               
        -:  777:               
        -:  778:               /*
        -:  779:               ** Create the task
        -:  780:               */
       25:  781:               ReturnCode = OS_TaskCreate(&CFE_ES_Global.AppTable[j].TaskInfo.MainTaskId, /* task id */
        -:  782:                                  CFE_ES_ObjectTable[i].ObjectName,              /* task name */
        -:  783:                                  CFE_ES_ObjectTable[i].FuncPtrUnion.VoidPtr,    /* task function pointer */
        -:  784:                                  NULL,                                          /* stack pointer */
        -:  785:                                  CFE_ES_ObjectTable[i].ObjectSize,              /* stack size */
        -:  786:                                  CFE_ES_ObjectTable[i].ObjectPriority,          /* task priority */
        -:  787:                                  OS_FP_ENABLED);                                /* task options */
        -:  788:
       25:  789:               if(ReturnCode != OS_SUCCESS)
        -:  790:               {
        5:  791:                  CFE_ES_Global.AppTable[j].RecordUsed = FALSE;
        5:  792:                  CFE_ES_WriteToSysLog("ES Startup: OS_TaskCreate error creating core App: %s: EC = 0x%08X\n",
        -:  793:                                        CFE_ES_ObjectTable[i].ObjectName, ReturnCode);
        -:  794:      
        -:  795:                                        
        5:  796:                  CFE_ES_UnlockSharedData(__func__,__LINE__);
        -:  797:
        -:  798:                  /*
        -:  799:                  ** Delay to allow the message to be read
        -:  800:                  */
        5:  801:                  OS_TaskDelay(CFE_ES_PANIC_DELAY);
        -:  802:      
        -:  803:                  /* 
        -:  804:                  ** cFE Cannot continue to start up.  
        -:  805:                  */
        5:  806:                  CFE_PSP_Panic(CFE_PSP_PANIC_CORE_APP);
        -:  807:                                              
        -:  808:               }
        -:  809:               else
        -:  810:               {
       20:  811:                  CFE_ES_ObjectTable[i].ObjectKey = CFE_ES_Global.AppTable[j].TaskInfo.MainTaskId;
        -:  812:
        -:  813:                  /*
        -:  814:                  ** Allocate and populate the CFE_ES_Global.TaskTable entry
        -:  815:                  */
       20:  816:                  if ( CFE_ES_Global.TaskTable[CFE_ES_Global.AppTable[j].TaskInfo.MainTaskId].RecordUsed == TRUE )
        -:  817:                  {
       17:  818:                     CFE_ES_WriteToSysLog("ES Startup: CFE_ES_Global.TaskTable record used error for App: %s, continuing.\n",
        -:  819:                                           CFE_ES_ObjectTable[i].ObjectName);
        -:  820:                  }
        -:  821:                  else
        -:  822:                  {
        3:  823:                     CFE_ES_Global.TaskTable[CFE_ES_Global.AppTable[j].TaskInfo.MainTaskId].RecordUsed = TRUE;
        -:  824:                  }
       20:  825:                  CFE_ES_Global.TaskTable[CFE_ES_Global.AppTable[j].TaskInfo.MainTaskId].AppId = j;
       20:  826:                  CFE_ES_Global.TaskTable[CFE_ES_Global.AppTable[j].TaskInfo.MainTaskId].TaskId = CFE_ES_Global.AppTable[j].TaskInfo.MainTaskId;
       20:  827:                  strncpy((char *)CFE_ES_Global.TaskTable[CFE_ES_Global.AppTable[j].TaskInfo.MainTaskId].TaskName, (char *)CFE_ES_Global.AppTable[j].TaskInfo.MainTaskName, OS_MAX_API_NAME);
       20:  828:                  CFE_ES_Global.TaskTable[CFE_ES_Global.AppTable[j].TaskInfo.MainTaskId].TaskName[OS_MAX_API_NAME - 1] = '\0';
        -:  829:
       20:  830:                  CFE_ES_WriteToSysLog("ES Startup: Core App: %s created. App ID: %d\n",
        -:  831:                                       CFE_ES_ObjectTable[i].ObjectName,j);
        -:  832:                                       
        -:  833:                  /*
        -:  834:                  ** Increment the registered App and Registered External Task variables.
        -:  835:                  */
       20:  836:                  CFE_ES_Global.RegisteredTasks++;
       20:  837:                  CFE_ES_Global.RegisteredCoreApps++;
        -:  838:                  
       20:  839:                  CFE_ES_UnlockSharedData(__func__,__LINE__);
        -:  840:                                                                                                      
        -:  841:               }
        -:  842:            }
        -:  843:            else /* appSlot not found -- This should never happen!*/
        -:  844:            {
       15:  845:               CFE_ES_WriteToSysLog("ES Startup: Error, No free application slots available for CORE App!\n");
        -:  846:               /*
        -:  847:               ** Delay to allow the message to be read
        -:  848:               */
       15:  849:               OS_TaskDelay(CFE_ES_PANIC_DELAY);
        -:  850:      
        -:  851:               /* 
        -:  852:               ** cFE Cannot continue to start up.  
        -:  853:               */
       15:  854:               CFE_PSP_Panic(CFE_PSP_PANIC_CORE_APP);
        -:  855:            
        -:  856:            }
       40:  857:            break;
        -:  858:
        -:  859:            case CFE_ES_FUNCTION_CALL: /*----------------------------------------------------------*/
        -:  860:
       50:  861:               if ( CFE_ES_ObjectTable[i].FuncPtrUnion.FunctionPtr != NULL )
        -:  862:               {
       48:  863:                  CFE_ES_WriteToSysLog("ES Startup: Calling %s\n",CFE_ES_ObjectTable[i].ObjectName);
        -:  864:                  /*
        -:  865:                  ** Call the function
        -:  866:                  */
       48:  867:                  ReturnCode = (*CFE_ES_ObjectTable[i].FuncPtrUnion.FunctionPtr)();
       48:  868:                  if(ReturnCode != CFE_SUCCESS)
        -:  869:                  {
        8:  870:                     CFE_ES_WriteToSysLog("ES Startup: Error returned when calling function: %s: EC = 0x%08X\n",
        -:  871:                                           CFE_ES_ObjectTable[i].ObjectName, ReturnCode);
        -:  872:                                        
        -:  873:                     /*
        -:  874:                     ** Delay to allow the message to be read
        -:  875:                     */
        8:  876:                     OS_TaskDelay(CFE_ES_PANIC_DELAY);
        -:  877:      
        -:  878:                     /* 
        -:  879:                     ** cFE Cannot continue to start up.  
        -:  880:                     */
        8:  881:                     CFE_PSP_Panic(CFE_PSP_PANIC_CORE_APP);
        -:  882:                                              
        -:  883:                  } /* end if */
        -:  884:                  
        -:  885:               }
        -:  886:               else
        -:  887:               {
        2:  888:                  CFE_ES_WriteToSysLog("ES Startup: bad function pointer ( table entry = %d).\n",i);
        -:  889:               }
        -:  890:               break;
        -:  891:
        -:  892:            case CFE_ES_NULL_ENTRY: /*-------------------------------------------------------*/
        -:  893:               break;
        -:  894:            default:
        -:  895:               break;
        -:  896:       } /* end switch */
        -:  897:
        -:  898:    } /* end for */
        -:  899:
        8:  900:    CFE_ES_WriteToSysLog("ES Startup: Finished ES CreateObject table entries.\n");
        8:  901:}
