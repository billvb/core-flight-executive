        -:    0:Source:/home/wmoleski/CFS/mission_2014/cfe/fsw/cfe-core/src/es/cfe_es_task.c
        -:    0:Graph:cfe_es_task.gcno
        -:    0:Data:cfe_es_task.gcda
        -:    0:Runs:1
        -:    0:Programs:11
        -:    1:/*
        -:    2:**  File:
        -:    3:**  cfe_es_task.c
        -:    4:**  $Id: cfe_es_task.c.gcov 1.6 2015/06/24 12:19:36EDT wmoleski Exp  $
        -:    5:**
        -:    6:**      Copyright (c) 2004-2012, United States government as represented by the
        -:    7:**      administrator of the National Aeronautics Space Administration.
        -:    8:**      All rights reserved. This software(cFE) was created at NASA's Goddard
        -:    9:**      Space Flight Center pursuant to government contracts.
        -:   10:**
        -:   11:**      This is governed by the NASA Open Source Agreement and may be used,
        -:   12:**      distributed and modified only pursuant to the terms of that agreement.
        -:   13:**
        -:   14:**  Purpose:
        -:   15:**  cFE Executive Services (ES) task
        -:   16:**
        -:   17:**  References:
        -:   18:**     Flight Software Branch C Coding Standard Version 1.0a
        -:   19:**     cFE Flight Software Application Developers Guide
        -:   20:**
        -:   21:**  Notes:
        -:   22:**
        -:   23:** $Log: cfe_es_task.c.gcov  $
        -:   23:** Revision 1.6 2015/06/24 12:19:36EDT wmoleski 
        -:   23:** Checking in the unit-test results for cFE 6.4.2.0
        -:   24:** Revision 1.16 2014/07/07 10:56:17GMT-05:00 acudmore 
        -:   25:** Added comment to note that Mempool info has an unused parameter
        -:   26:** Revision 1.15 2012/01/18 16:27:14GMT-05:00 jmdagost 
        -:   27:** Modified init and no-op event messages to include OSAL revision and mission revision numbers, also added
        -:   28:** those numbers to the ES HK tlm pkt.
        -:   29:** Revision 1.14 2012/01/13 11:50:05EST acudmore 
        -:   30:** Changed license text to reflect open source
        -:   31:** Revision 1.13 2012/01/10 13:35:47EST lwalling 
        -:   32:** Add output filename to shell command packet structure
        -:   33:** Revision 1.12 2011/11/30 14:11:19EST jmdagost 
        -:   34:** Corrected CFE_MISSION_REV to CFE_PSP_MISSION_REV, as it should be.
        -:   35:** Revision 1.11 2010/11/23 15:30:54EST jmdagost 
        -:   36:** Added cFE Mission Rev to init message and telemetry, added PSP Mission Rev to init message.
        -:   37:** Revision 1.10 2009/08/04 13:34:05EDT aschoeni 
        -:   38:** Added heap information to ES telemetry
        -:   39:** Revision 1.9 2009/07/28 16:40:19EDT jmdagost 
        -:   40:** Replaced reference to ComputeChecksum with CalculateCRC.
        -:   41:** Revision 1.8 2009/06/10 09:09:02EDT acudmore 
        -:   42:** Converted OS_Mem* and OS_BSP* API to CFE_PSP_* API
        -:   43:** Revision 1.7 2009/06/04 16:45:36EDT rmcgraw 
        -:   44:** Fixed compiler error in version event
        -:   45:** Revision 1.6 2009/06/04 11:00:29EDT rmcgraw 
        -:   46:** DCR8290:1 Added PSP Version to event
        -:   47:** Revision 1.5 2008/07/31 15:41:36EDT apcudmore 
        -:   48:** Added execution counter API:
        -:   49:**   -- Added execution counter to ES internal task data
        -:   50:**   -- Added code to increment counter in RunLoop
        -:   51:**   -- Added code to report counter in GetInfo APIs
        -:   52:**   -- Added API to increment counter for child tasks
        -:   53:**   -- Added code to cFE Core apps to increment counters.
        -:   54:** Revision 1.4 2008/07/28 14:11:29EDT apcudmore 
        -:   55:** Changed cFE Kernel Text segment checksum to cFE Core checksum in housekeeping.
        -:   56:** Revision 1.3 2008/06/26 15:41:52EDT apcudmore 
        -:   57:** Added public CFE_ES_GetAppInfo API.
        -:   58:** Moved the old API to CFE_ES_GetAppInfoInternal
        -:   59:** -- May merge these two in the near future.
        -:   60:** Revision 1.2 2008/06/20 15:40:29EDT apcudmore 
        -:   61:** Added support for OSAL based module loader
        -:   62:**  - Removed calls and references to the BSP based module loader
        -:   63:** Revision 1.1 2008/04/17 08:05:09EDT ruperera 
        -:   64:** Member added to tlserver3 project /MKS-CFE-PROJECT/fsw/cfe-core/src/es
        -:   65:** Revision 1.107 2008/01/24 09:06:21EST njyanchik 
        -:   66:** Removed comments
        -:   67:** Revision 1.106 2008/01/24 08:54:07EST njyanchik 
        -:   68:** I added this:
        -:   69:** 
        -:   70:**         CFE_ES_ResetDataPtr->ERLogEntries = 0;
        -:   71:** 
        -:   72:** to CFE_ES_ClearERlogCmd so that the number of entries are cleared.
        -:   73:** Revision 1.105 2007/09/25 10:04:31EDT apcudmore 
        -:   74:** Created new config parameter for default filename for Query All Tasks cmd.
        -:   75:** Revision 1.104 2007/09/20 10:52:58EDT apcudmore 
        -:   76:** Added Query All Tasks command, file definition, events, error codes etc.
        -:   77:** Revision 1.103 2007/09/18 16:39:10EDT apcudmore 
        -:   78:** Updated ES invalid command length event message to make it clear.
        -:   79:** Revision 1.102 2007/08/31 10:57:10EDT rjmcgraw 
        -:   80:** Changes to eliminate perl script
        -:   81:** Revision 1.101 2007/06/01 11:01:12EDT dlkobe 
        -:   82:** Corrected unassigned Pool Handle in Mem Pool Stats Telemetry Packet
        -:   83:** Revision 1.100 2007/05/25 11:55:42EDT apcudmore 
        -:   84:** Error Handling updates
        -:   85:**    - CFE_ES_GetAppInfo returns void
        -:   86:**    - added app ID range check in RestartApp
        -:   87:**  
        -:   88:** Revision 1.99 2007/05/15 11:11:12EDT rjmcgraw 
        -:   89:** Changed syslog msgs to be consistent with other tasks
        -:   90:** Revision 1.98 2007/05/14 15:58:45EDT apcudmore 
        -:   91:** Added runtime error detection back in to the ES main task.
        -:   92:** Revision 1.97 2007/05/14 15:43:46EDT apcudmore 
        -:   93:** Cleaned up events and disabled debug code for application restart.
        -:   94:** Revision 1.95 2007/05/11 10:30:13EDT rjmcgraw 
        -:   95:** DCR2987:4 Added return checking on init event and version event
        -:   96:** Revision 1.94 2007/05/09 12:41:02EDT dlkobe 
        -:   97:** Added processing for Dump CDS Registry Command
        -:   98:** Revision 1.92 2007/05/07 11:59:37EDT apcudmore 
        -:   99:** Removed SB Pipe error telemetry point
        -:  100:** Handle SB error with sys log message
        -:  101:** Revision 1.91 2007/05/04 20:22:23EDT dlkobe 
        -:  102:** Corrected prototype errors and added missing event message IDs
        -:  103:** Revision 1.90 2007/05/04 20:07:52EDT dlkobe 
        -:  104:** Added command to telemeter memory pool statistics
        -:  105:** Revision 1.89 2007/05/04 15:52:40EDT dlkobe 
        -:  106:** Modified CFE_ES_DeleteCDSCmd to make use of new CFE_ES_DeleteCDS function
        -:  107:** Revision 1.88 2007/05/03 14:34:59EDT dlkobe 
        -:  108:** Added test to prevent Delete CDS command from deleting a Critical Table Image from CDS
        -:  109:** Revision 1.87 2007/04/28 15:57:00EDT dlkobe 
        -:  110:** Added "cfe_es_cds.h" includes to resolve sudden errors.
        -:  111:** Revision 1.86 2007/04/27 15:55:15EDT rjmcgraw 
        -:  112:** DCR2987 Moved call to CFE_ES_RegisterApp into TaskInit and checked return for err
        -:  113:** Revision 1.85 2007/04/27 15:41:13EDT rjmcgraw 
        -:  114:** DCR2987:4 Standardize task init error code
        -:  115:** Revision 1.84 2007/04/25 11:57:05EDT apcudmore 
        -:  116:** Implemented "Back End" of Application Restart and Delete.
        -:  117:** Changes include all ES Cleanup code to delete App and Task Resources.
        -:  118:** Revision 1.83 2007/04/17 11:00:27EDT rjmcgraw 
        -:  119:** Copy DataToWrite into ES HK Pkt
        -:  120:** Revision 1.82 2007/04/13 16:26:00EDT apcudmore 
        -:  121:** Updated how ES scans its App table. It will now scan after processing a 
        -:  122:** ground/external command.
        -:  123:** Revision 1.81 2007/04/12 13:40:58EDT apcudmore 
        -:  124:** Added system log messages to ES init failures.
        -:  125:** Revision 1.80 2007/04/12 10:37:18EDT apcudmore 
        -:  126:** Added support for ES task to call CFE_ES_ExitApp on initialization and 
        -:  127:** runtime failure.
        -:  128:**
        -:  129:*/
        -:  130:
        -:  131:
        -:  132:/*
        -:  133:** Includes
        -:  134:*/
        -:  135:#include "cfe.h"
        -:  136:#include "cfe_platform_cfg.h"
        -:  137:#include "cfe_version.h"
        -:  138:#include "cfe_es_global.h"
        -:  139:#include "cfe_es_apps.h"
        -:  140:#include "cfe_es_events.h"
        -:  141:#include "cfe_es_verify.h"
        -:  142:#include "cfe_es_task.h"
        -:  143:#include "cfe_es_shell.h"
        -:  144:#include "cfe_es_log.h"
        -:  145:#include "cfe_es_cds.h"
        -:  146:#include "cfe_fs.h"
        -:  147:#include "cfe_psp.h"
        -:  148:
        -:  149:#include <string.h>
        -:  150:
        -:  151:/*
        -:  152:** Defines
        -:  153:*/
        -:  154:
        -:  155:/* 
        -:  156:** This define should be put in the OS API headers -- Right now it matches what the OS API uses 
        -:  157:*/
        -:  158:#define OS_MAX_PRIORITY 255 
        -:  159:
        -:  160:/*
        -:  161:** Executive Services (ES) task global data.
        -:  162:*/
        -:  163:CFE_ES_TaskData_t CFE_ES_TaskData;
        -:  164:extern CFE_ES_PerfLogDump_t    CFE_ES_PerfLogDumpStatus;
        -:  165:
        -:  166:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  167:/*                                                                 */
        -:  168:/* CFE_ES_TaskMain() -- Task entry point and main process loop     */
        -:  169:/*                                                                 */
        -:  170:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  171:
        -:  172:void CFE_ES_TaskMain(void)
        2:  173:{
        -:  174:    int32   Status;
        2:  175:    uint32  TimeOut = CFE_ES_APP_SCAN_RATE;
        2:  176:    uint32  AppRunStatus = CFE_ES_APP_RUN;
        -:  177:
        -:  178:    
        -:  179:    /*
        -:  180:    ** Performance Time Stamp Entry
        -:  181:    */
        2:  182:    CFE_ES_PerfLogEntry(CFE_ES_MAIN_PERF_ID);
        -:  183:
        -:  184:    /*
        -:  185:    ** Perform task specific initialization.
        -:  186:    */
        2:  187:    Status = CFE_ES_TaskInit();
        2:  188:    if ( Status != CFE_SUCCESS )
        -:  189:    {
        -:  190:       /*
        -:  191:       ** Create a syslog entry
        -:  192:       */
        1:  193:       CFE_ES_WriteToSysLog("ES:Application Init Failed,RC=0x%08X\n", Status);
        -:  194:      
        -:  195:
        -:  196:       /*
        -:  197:       ** Allow Core App to Exit 
        -:  198:       */
        1:  199:       AppRunStatus = CFE_ES_CORE_APP_INIT_ERROR;
        -:  200:       
        -:  201:    } /* end if */
        -:  202:
        -:  203:    /*
        -:  204:     * Wait for other apps to start.
        -:  205:     * It is important that the core apps are present before this starts receiving
        -:  206:     * messages from the command pipe, as some of those handlers might depend on
        -:  207:     * the other core apps.
        -:  208:     */
        2:  209:    CFE_ES_WaitForStartupSync(CFE_CORE_MAX_STARTUP_MSEC);
        -:  210:
        -:  211:    /*
        -:  212:    ** Main process loop
        -:  213:    */
        7:  214:    while (AppRunStatus == CFE_ES_APP_RUN)
        -:  215:    {
        -:  216:        /*
        -:  217:        ** Increment the main task execution counter
        -:  218:        **  This is normally done in the CFE_ES_RunLoop call, but
        -:  219:        **  currently CFE Child tasks and the cFE core tasks do not
        -:  220:        **  use the RunLoop call.
        -:  221:        */
        3:  222:        CFE_ES_IncrementTaskCounter();
        -:  223:        
        -:  224:        /*
        -:  225:        ** Performance Time Stamp Exit
        -:  226:        */
        3:  227:        CFE_ES_PerfLogExit(CFE_ES_MAIN_PERF_ID);
        -:  228:
        -:  229:        /*
        -:  230:        ** Wait for the next Software Bus message.
        -:  231:        */
        3:  232:        Status = CFE_SB_RcvMsg(&CFE_ES_TaskData.MsgPtr,
        -:  233:                                  CFE_ES_TaskData.CmdPipe,
        -:  234:                                  TimeOut);
        -:  235:
        -:  236:        /*
        -:  237:        ** Performance Time Stamp Entry
        -:  238:        */
        3:  239:        CFE_ES_PerfLogEntry(CFE_ES_MAIN_PERF_ID);
        -:  240:
        -:  241:        /*
        -:  242:        ** Scan the App table for Application Deletion requests
        -:  243:        */
        3:  244:        if ( Status == CFE_SB_TIME_OUT )
        -:  245:        {
        1:  246:           CFE_ES_ScanAppTable();
        -:  247:        }
        2:  248:        else if (Status == CFE_SUCCESS)
        -:  249:        {
        -:  250:           /*
        -:  251:           ** Process Software Bus message.
        -:  252:           */
        1:  253:           CFE_ES_TaskPipe(CFE_ES_TaskData.MsgPtr);
        -:  254:           
        -:  255:           /*
        -:  256:           ** Scan the App Table for changes after processing a command
        -:  257:           */
        1:  258:           CFE_ES_ScanAppTable();
        -:  259:        }
        -:  260:        else
        -:  261:        {
        -:  262:            /*
        -:  263:            ** SB Error: Write a SysLog Message 
        -:  264:            */
        1:  265:            CFE_ES_WriteToSysLog("ES:Error reading cmd pipe,RC=0x%08X\n",Status);
        -:  266:
        -:  267:            /*
        -:  268:            ** Allow Core App to Exit 
        -:  269:            */
        1:  270:            AppRunStatus = CFE_ES_CORE_APP_RUNTIME_ERROR;
        -:  271:
        -:  272:        }  /* end if */
        -:  273:        
        -:  274:    } /* end while */    
        -:  275:    
        -:  276:    /*
        -:  277:    ** Performance Time Stamp Exit
        -:  278:    */
        2:  279:    CFE_ES_PerfLogExit(CFE_ES_MAIN_PERF_ID);
        -:  280:       
        -:  281:    /*
        -:  282:    ** Exit the application, CFE_ES_ExitApp will not return.
        -:  283:    */
        2:  284:    CFE_ES_ExitApp(AppRunStatus);
        -:  285:
        2:  286:} /* End of CFE_ES_TaskMain() */
        -:  287:
        -:  288:
        -:  289:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  290:/*                                                                 */
        -:  291:/* CFE_ES_TaskInit() -- ES task initialization                     */
        -:  292:/*                                                                 */
        -:  293:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  294:
        -:  295:int32 CFE_ES_TaskInit(void)
       11:  296:{
        -:  297:    int32   Status;
        -:  298:    uint32  SizeofCfeSegment;
        -:  299:    uint32 *PtrToCfeSegment;
        -:  300:
        -:  301:    /*
        -:  302:    ** Register the Application
        -:  303:    */
       11:  304:    Status = CFE_ES_RegisterApp();
       11:  305:    if ( Status != CFE_SUCCESS )
        -:  306:    {
        2:  307:        CFE_ES_WriteToSysLog("ES:Call to CFE_ES_RegisterApp Failed, RC = 0x%08X\n", Status);
        2:  308:        return(Status);
        -:  309:    }    
        -:  310:
        -:  311:    /*
        -:  312:    ** Initialize task command execution counters
        -:  313:    */
        9:  314:    CFE_ES_TaskData.CmdCounter = 0;
        9:  315:    CFE_ES_TaskData.ErrCounter = 0;
        -:  316:
        -:  317:    /*
        -:  318:    ** Initialize task configuration data
        -:  319:    */
        9:  320:    strcpy(CFE_ES_TaskData.PipeName, "ES_CMD_PIPE");
        9:  321:    CFE_ES_TaskData.PipeDepth = 12;
        -:  322:
        9:  323:    CFE_ES_TaskData.LimitHK   = 2;
        9:  324:    CFE_ES_TaskData.LimitCmd  = 4;
        -:  325:    
        -:  326:    /*
        -:  327:    ** Initialize systemlog to default mode
        -:  328:    */
        9:  329:    CFE_ES_ResetDataPtr->SystemLogMode = CFE_ES_DEFAULT_SYSLOG_MODE;
        -:  330:
        -:  331:    /*
        -:  332:    ** Register event filter table.
        -:  333:    */
        9:  334:    Status = CFE_EVS_Register(NULL,0,CFE_EVS_BINARY_FILTER);
        9:  335:    if ( Status != CFE_SUCCESS )
        -:  336:    {
        1:  337:        CFE_ES_WriteToSysLog("ES:Call to CFE_EVS_Register Failed, RC = 0x%08X\n", Status);
        1:  338:        return(Status);
        -:  339:    }
        -:  340:
        -:  341:    /*
        -:  342:    ** Initialize housekeeping packet (clear user data area)
        -:  343:    */
        8:  344:    CFE_SB_InitMsg(&CFE_ES_TaskData.HkPacket, CFE_ES_HK_TLM_MID, sizeof(CFE_ES_HkPacket_t), TRUE);
        -:  345:
        -:  346:    /*
        -:  347:    ** Initialize shell output packet (clear user data area)
        -:  348:    */
        8:  349:    CFE_SB_InitMsg(&CFE_ES_TaskData.ShellPacket, CFE_ES_SHELL_TLM_MID, sizeof(CFE_ES_ShellPacket_t), TRUE);
        -:  350:
        -:  351:    /*
        -:  352:    ** Initialize single application telemetry packet
        -:  353:    */
        8:  354:    CFE_SB_InitMsg(&CFE_ES_TaskData.OneAppPacket, CFE_ES_APP_TLM_MID, sizeof(CFE_ES_OneAppTlm_t), TRUE);
        -:  355:
        -:  356:    /*
        -:  357:    ** Initialize memory pool statistics telemetry packet
        -:  358:    */
        8:  359:    CFE_SB_InitMsg(&CFE_ES_TaskData.MemStatsPacket, CFE_ES_MEMSTATS_TLM_MID, 
        -:  360:                   sizeof(CFE_ES_PoolStatsTlm_t), TRUE);
        -:  361:
        -:  362:    /*
        -:  363:    ** Create Software Bus message pipe
        -:  364:    */
        8:  365:    Status = CFE_SB_CreatePipe(&CFE_ES_TaskData.CmdPipe, CFE_ES_TaskData.PipeDepth, CFE_ES_TaskData.PipeName);
        8:  366:    if ( Status != CFE_SUCCESS )
        -:  367:    {
        1:  368:        CFE_ES_WriteToSysLog("ES:Cannot Create SB Pipe, RC = 0x%08X\n", Status);
        1:  369:        return(Status);
        -:  370:    }
        -:  371:    
        -:  372:    /*
        -:  373:    ** Subscribe to Housekeeping request commands
        -:  374:    */
        7:  375:    Status = CFE_SB_SubscribeEx(CFE_ES_SEND_HK_MID, CFE_ES_TaskData.CmdPipe,
        -:  376:                                CFE_SB_Default_Qos, CFE_ES_TaskData.LimitHK);
        7:  377:    if ( Status != CFE_SUCCESS )
        -:  378:    {
        1:  379:        CFE_ES_WriteToSysLog("ES:Cannot Subscribe to HK packet, RC = 0x%08X\n", Status);
        1:  380:        return(Status);
        -:  381:    }
        -:  382:
        -:  383:    /*
        -:  384:    ** Subscribe to ES task ground command packets
        -:  385:    */
        6:  386:    Status = CFE_SB_SubscribeEx(CFE_ES_CMD_MID, CFE_ES_TaskData.CmdPipe,
        -:  387:                       CFE_SB_Default_Qos, CFE_ES_TaskData.LimitCmd);
        6:  388:    if ( Status != CFE_SUCCESS )
        -:  389:    {
        1:  390:        CFE_ES_WriteToSysLog("ES:Cannot Subscribe to ES ground commands, RC = 0x%08X\n", Status);
        1:  391:        return(Status);
        -:  392:    }
        -:  393:
        -:  394:    /*
        -:  395:    ** Compute the CRC for the cfe core code segment and place
        -:  396:    ** in ES Housekeeping pkt.   
        -:  397:    */
        5:  398:    Status = CFE_PSP_GetCFETextSegmentInfo( &(PtrToCfeSegment), &SizeofCfeSegment);
        -:  399:   
        5:  400:    if ( Status == OS_SUCCESS ) 
        -:  401:    { 
        4:  402:       CFE_ES_TaskData.HkPacket.CFECoreChecksum = CFE_ES_CalculateCRC(
        -:  403:                                  (void *)(PtrToCfeSegment), SizeofCfeSegment, 0, CFE_ES_DEFAULT_CRC);
        -:  404:    }
        -:  405:    else
        -:  406:    {
        1:  407:       CFE_ES_TaskData.HkPacket.CFECoreChecksum = 0xFFFF;
        -:  408:    }
        -:  409:
        -:  410:    /*
        -:  411:    ** Initialize the version numbers in the ES Housekeeping pkt
        -:  412:    */
        5:  413:    CFE_ES_TaskData.HkPacket.CFEMajorVersion     = CFE_MAJOR_VERSION;
        5:  414:    CFE_ES_TaskData.HkPacket.CFEMinorVersion     = CFE_MINOR_VERSION;
        5:  415:    CFE_ES_TaskData.HkPacket.CFERevision         = CFE_REVISION;
        5:  416:    CFE_ES_TaskData.HkPacket.CFEMissionRevision  = CFE_MISSION_REV;
        5:  417:    CFE_ES_TaskData.HkPacket.OSALMajorVersion    = OS_MAJOR_VERSION;
        5:  418:    CFE_ES_TaskData.HkPacket.OSALMinorVersion    = OS_MINOR_VERSION;
        5:  419:    CFE_ES_TaskData.HkPacket.OSALRevision        = OS_REVISION;
        5:  420:    CFE_ES_TaskData.HkPacket.OSALMissionRevision = OS_MISSION_REV;
        -:  421:
        -:  422:    /*
        -:  423:    ** Task startup event message.
        -:  424:    */
        5:  425:    Status = CFE_EVS_SendEvent(CFE_ES_INIT_INF_EID,
        -:  426:                      CFE_EVS_INFORMATION,
        -:  427:                      "cFE ES Initialized");
        5:  428:    if ( Status != CFE_SUCCESS )
        -:  429:    {
        1:  430:        CFE_ES_WriteToSysLog("ES:Error sending init event:RC=0x%08X\n", Status);
        1:  431:        return(Status);
        -:  432:    }                      
        -:  433:
        4:  434:    Status = CFE_EVS_SendEvent(CFE_ES_INITSTATS_INF_EID,
        -:  435:                      CFE_EVS_INFORMATION,
        -:  436:                      "Versions:cFE %d.%d.%d.%d, OSAL %d.%d.%d.%d, PSP %d.%d.%d.%d, chksm %d",
        -:  437:                      CFE_MAJOR_VERSION,CFE_MINOR_VERSION,CFE_REVISION,CFE_MISSION_REV,                      
        -:  438:                      OS_MAJOR_VERSION,OS_MINOR_VERSION,OS_REVISION,OS_MISSION_REV,
        -:  439:                      CFE_PSP_MAJOR_VERSION,CFE_PSP_MINOR_VERSION,CFE_PSP_REVISION,CFE_PSP_MISSION_REV,
        -:  440:                      CFE_ES_TaskData.HkPacket.CFECoreChecksum);
        4:  441:    if ( Status != CFE_SUCCESS )
        -:  442:    {
        1:  443:        CFE_ES_WriteToSysLog("ES:Error sending version event:RC=0x%08X\n", Status);
        1:  444:        return(Status);
        -:  445:    }
        -:  446:
        3:  447:   return(CFE_SUCCESS);
        -:  448:   
        -:  449:} /* End of CFE_ES_TaskInit() */
        -:  450:
        -:  451:
        -:  452:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  453:/*                                                                 */
        -:  454:/* CFE_ES_TaskPipe() -- Process command pipe message               */
        -:  455:/*                                                                 */
        -:  456:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  457:
        -:  458:void CFE_ES_TaskPipe(CFE_SB_MsgPtr_t Msg)
       96:  459:{
        -:  460:    CFE_SB_MsgId_t MessageID;
        -:  461:    uint16         CommandCode;
        -:  462:
       96:  463:    MessageID = CFE_SB_GetMsgId(Msg);
       96:  464:    switch (MessageID)
        -:  465:    {
        -:  466:        /*
        -:  467:        ** Housekeeping telemetry request
        -:  468:        */
        -:  469:        case CFE_ES_SEND_HK_MID:
        2:  470:            CFE_ES_HousekeepingCmd(Msg);
        2:  471:            break;
        -:  472:
        -:  473:        /*
        -:  474:        ** ES task ground commands
        -:  475:        */
        -:  476:        case CFE_ES_CMD_MID:
        -:  477:
       79:  478:            CommandCode = CFE_SB_GetCmdCode(Msg);
       79:  479:            switch (CommandCode)
        -:  480:            {
        -:  481:                case CFE_ES_NOOP_CC:
        1:  482:                    CFE_ES_NoopCmd(Msg);
        1:  483:                    break;
        -:  484:
        -:  485:                case CFE_ES_RESET_CC:
        1:  486:                    CFE_ES_ResetCmd(Msg);
        1:  487:                    break;
        -:  488:
        -:  489:                case CFE_ES_RESTART_CC:
        2:  490:                    CFE_ES_RestartCmd(Msg);
        2:  491:                    break;
        -:  492:
        -:  493:                case CFE_ES_SHELL_CMD_CC:
        2:  494:                    CFE_ES_ShellCmd(Msg);
        2:  495:                    break;
        -:  496:
        -:  497:                case CFE_ES_START_APP_CC:
        6:  498:                    CFE_ES_StartAppCmd(Msg);
        6:  499:                    break;
        -:  500:
        -:  501:                case CFE_ES_STOP_APP_CC:
        3:  502:                    CFE_ES_StopAppCmd(Msg);
        3:  503:                    break;
        -:  504:
        -:  505:                case CFE_ES_RESTART_APP_CC:
        3:  506:                    CFE_ES_RestartAppCmd(Msg);
        3:  507:                    break;
        -:  508:
        -:  509:                case CFE_ES_RELOAD_APP_CC:
        3:  510:                    CFE_ES_ReloadAppCmd(Msg);
        3:  511:                    break;
        -:  512:
        -:  513:                case CFE_ES_QUERY_ONE_CC:
        3:  514:                    CFE_ES_QueryOneCmd(Msg);
        3:  515:                    break;
        -:  516:
        -:  517:                case CFE_ES_QUERY_ALL_CC:
        5:  518:                    CFE_ES_QueryAllCmd(Msg);
        5:  519:                    break;
        -:  520:
        -:  521:                case CFE_ES_QUERY_ALL_TASKS_CC:
        4:  522:                    CFE_ES_QueryAllTasksCmd(Msg);
        4:  523:                    break;
        -:  524:
        -:  525:                case CFE_ES_CLEAR_SYSLOG_CC:
        1:  526:                    CFE_ES_ClearSyslogCmd(Msg);
        1:  527:                    break;
        -:  528:
        -:  529:                case CFE_ES_WRITE_SYSLOG_CC:
        5:  530:                    CFE_ES_WriteSyslogCmd(Msg);
        5:  531:                    break;
        -:  532:
        -:  533:                case CFE_ES_OVERWRITE_SYSLOG_CC:
        2:  534:                    CFE_ES_OverWriteSyslogCmd(Msg);
        2:  535:                    break;
        -:  536:
        -:  537:                case CFE_ES_CLEAR_ERLOG_CC:
        2:  538:                    CFE_ES_ClearERlogCmd(Msg);
        2:  539:                    break;
        -:  540:
        -:  541:                case CFE_ES_WRITE_ERLOG_CC:
        5:  542:                    CFE_ES_WriteERlogCmd(Msg);
        5:  543:                    break;
        -:  544:
        -:  545:                case CFE_ES_PERF_STARTDATA_CC:
        7:  546:                    CFE_ES_PerfStartDataCmd(Msg);
        7:  547:                    break;
        -:  548:
        -:  549:                case CFE_ES_PERF_STOPDATA_CC:
        5:  550:                    CFE_ES_PerfStopDataCmd(Msg);
        5:  551:                    break;
        -:  552:
        -:  553:                case CFE_ES_PERF_SETFILTERMASK_CC:
        2:  554:                    CFE_ES_PerfSetFilterMaskCmd(Msg);
        2:  555:                    break;
        -:  556:
        -:  557:                case CFE_ES_PERF_SETTRIGMASK_CC:
        3:  558:                    CFE_ES_PerfSetTriggerMaskCmd(Msg);
        3:  559:                    break;
        -:  560:
        -:  561:                case CFE_ES_RESET_PR_COUNT_CC:
        1:  562:                    CFE_ES_ResetPRCountCmd(Msg);
        1:  563:                    break;
        -:  564:
        -:  565:                case CFE_ES_SET_MAX_PR_COUNT_CC:
        1:  566:                    CFE_ES_SetMaxPRCountCmd(Msg);
        1:  567:                    break;
        -:  568:
        -:  569:                case CFE_ES_DELETE_CDS_CC:
        5:  570:                    CFE_ES_DeleteCDSCmd(Msg);
        5:  571:                    break;
        -:  572:
        -:  573:                case CFE_ES_TLM_POOL_STATS_CC:
        2:  574:                    CFE_ES_TlmPoolStatsCmd(Msg);
        2:  575:                    break;
        -:  576:
        -:  577:                case CFE_ES_DUMP_CDS_REG_CC:
        4:  578:                    CFE_ES_DumpCDSRegCmd(Msg);
        4:  579:                    break;
        -:  580:
        -:  581:                default:
        1:  582:                    CFE_EVS_SendEvent(CFE_ES_CC1_ERR_EID, CFE_EVS_ERROR,
        -:  583:                     "Invalid ground command code: ID = 0x%X, CC = %d",
        -:  584:                                      MessageID, CommandCode);
        1:  585:                    CFE_ES_TaskData.ErrCounter++;
        -:  586:                    break;
        -:  587:            }
       79:  588:            break;
        -:  589:
        -:  590:        default:
        -:  591:
       15:  592:            CFE_EVS_SendEvent(CFE_ES_MID_ERR_EID, CFE_EVS_ERROR,
        -:  593:                             "Invalid command pipe message ID: 0x%X",
        -:  594:                              MessageID);
       15:  595:            CFE_ES_TaskData.ErrCounter++;
        -:  596:            break;
        -:  597:    }
        -:  598:
       96:  599:} /* End of CFE_ES_TaskPipe() */
        -:  600:
        -:  601:
        -:  602:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  603:/*                                                                 */
        -:  604:/* CFE_ES_HousekeepingCmd() -- On-board command (HK request)       */
        -:  605:/*                                                                 */
        -:  606:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  607:
        -:  608:void CFE_ES_HousekeepingCmd(CFE_SB_MsgPtr_t Msg)
        2:  609:{
        -:  610:    OS_heap_prop_t HeapProp;
        -:  611:    int32          stat;
        -:  612:
        -:  613:    /*
        -:  614:    ** Get command execution counters, system log entry count & bytes used.
        -:  615:    */
        2:  616:    CFE_ES_TaskData.HkPacket.CmdCounter = CFE_ES_TaskData.CmdCounter;
        2:  617:    CFE_ES_TaskData.HkPacket.ErrCounter = CFE_ES_TaskData.ErrCounter;
        -:  618:
        2:  619:    CFE_ES_TaskData.HkPacket.SysLogBytesUsed = CFE_ES_ResetDataPtr->SystemLogIndex;
        2:  620:    CFE_ES_TaskData.HkPacket.SysLogSize = CFE_ES_SYSTEM_LOG_SIZE;
        2:  621:    CFE_ES_TaskData.HkPacket.SysLogEntries   = CFE_ES_ResetDataPtr->SystemLogEntryNum;
        2:  622:    CFE_ES_TaskData.HkPacket.SysLogMode = CFE_ES_ResetDataPtr->SystemLogMode;
        -:  623:
        2:  624:    CFE_ES_TaskData.HkPacket.ERLogIndex      = CFE_ES_ResetDataPtr->ERLogIndex;
        2:  625:    CFE_ES_TaskData.HkPacket.ERLogEntries    = CFE_ES_ResetDataPtr->ERLogEntries;
        -:  626:    
        2:  627:    CFE_ES_TaskData.HkPacket.RegisteredCoreApps      = CFE_ES_Global.RegisteredCoreApps;
        2:  628:    CFE_ES_TaskData.HkPacket.RegisteredExternalApps  = CFE_ES_Global.RegisteredExternalApps;
        2:  629:    CFE_ES_TaskData.HkPacket.RegisteredTasks         = CFE_ES_Global.RegisteredTasks;
        2:  630:    CFE_ES_TaskData.HkPacket.RegisteredLibs          = CFE_ES_Global.RegisteredLibs;
        -:  631:
        2:  632:    CFE_ES_TaskData.HkPacket.ResetType = CFE_ES_ResetDataPtr->ResetVars.ResetType;
        2:  633:    CFE_ES_TaskData.HkPacket.ResetSubtype = CFE_ES_ResetDataPtr->ResetVars.ResetSubtype;
        2:  634:    CFE_ES_TaskData.HkPacket.ProcessorResets = CFE_ES_ResetDataPtr->ResetVars.ProcessorResetCount;
        2:  635:    CFE_ES_TaskData.HkPacket.MaxProcessorResets = CFE_ES_ResetDataPtr->ResetVars.MaxProcessorResetCount;
        2:  636:    CFE_ES_TaskData.HkPacket.BootSource = CFE_ES_ResetDataPtr->ResetVars.BootSource;
        -:  637:
        2:  638:    CFE_ES_TaskData.HkPacket.PerfState = CFE_ES_ResetDataPtr->Perf.MetaData.State;
        2:  639:    CFE_ES_TaskData.HkPacket.PerfMode = CFE_ES_ResetDataPtr->Perf.MetaData.Mode;
        2:  640:    CFE_ES_TaskData.HkPacket.PerfTriggerCount = CFE_ES_ResetDataPtr->Perf.MetaData.TriggerCount;
        2:  641:    CFE_ES_TaskData.HkPacket.PerfDataStart = CFE_ES_ResetDataPtr->Perf.MetaData.DataStart;
        2:  642:    CFE_ES_TaskData.HkPacket.PerfDataEnd = CFE_ES_ResetDataPtr->Perf.MetaData.DataEnd;
        2:  643:    CFE_ES_TaskData.HkPacket.PerfDataCount = CFE_ES_ResetDataPtr->Perf.MetaData.DataCount;
        2:  644:    CFE_ES_TaskData.HkPacket.PerfDataToWrite = CFE_ES_PerfLogDumpStatus.DataToWrite;
        2:  645:    CFE_PSP_MemCpy ( (void *)CFE_ES_TaskData.HkPacket.PerfTriggerMask, 
        -:  646:                (void *)CFE_ES_ResetDataPtr->Perf.MetaData.TriggerMask,
        -:  647:                ((CFE_ES_PERF_MAX_IDS / 32) * 4 ));
        2:  648:    CFE_PSP_MemCpy ( (void *)CFE_ES_TaskData.HkPacket.PerfFilterMask, 
        -:  649:                (void *)CFE_ES_ResetDataPtr->Perf.MetaData.FilterMask,
        -:  650:                ((CFE_ES_PERF_MAX_IDS / 32) * 4 ));
        -:  651:
        2:  652:    stat = OS_HeapGetInfo(&HeapProp);
        -:  653:
        2:  654:    if(stat == OS_SUCCESS)
        -:  655:    {
        1:  656:        CFE_ES_TaskData.HkPacket.HeapBytesFree = HeapProp.free_bytes;
        1:  657:        CFE_ES_TaskData.HkPacket.HeapBlocksFree = HeapProp.free_blocks;
        1:  658:        CFE_ES_TaskData.HkPacket.HeapMaxBlockSize = HeapProp.largest_free_block;
        -:  659:    }
        -:  660:    else
        -:  661:    {
        1:  662:        CFE_ES_TaskData.HkPacket.HeapBytesFree = 0;
        1:  663:        CFE_ES_TaskData.HkPacket.HeapBlocksFree = 0;
        1:  664:        CFE_ES_TaskData.HkPacket.HeapMaxBlockSize = 0;
        -:  665:    }
        -:  666:
        -:  667:    /*
        -:  668:    ** Send housekeeping telemetry packet.
        -:  669:    */
        2:  670:    CFE_SB_TimeStampMsg((CFE_SB_Msg_t *) &CFE_ES_TaskData.HkPacket);
        2:  671:    CFE_SB_SendMsg((CFE_SB_Msg_t *) &CFE_ES_TaskData.HkPacket);
        -:  672:
        -:  673:    /*
        -:  674:    ** This command does not affect the command execution counter.
        -:  675:    */
        -:  676:
        2:  677:} /* End of CFE_ES_HousekeepingCmd() */
        -:  678:
        -:  679:
        -:  680:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  681:/*                                                                 */
        -:  682:/* CFE_ES_NoopCmd() -- ES task ground command (NO-OP)              */
        -:  683:/*                                                                 */
        -:  684:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  685:
        -:  686:void CFE_ES_NoopCmd(CFE_SB_MsgPtr_t Msg)
        1:  687:{
        1:  688:    uint16 ExpectedLength = sizeof(CFE_ES_NoArgsCmd_t);
        -:  689:
        -:  690:    /*
        -:  691:    ** Verify command packet length.
        -:  692:    */
        1:  693:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -:  694:    {
        -:  695:        /*
        -:  696:        ** This command will always succeed.
        -:  697:        */
        1:  698:        CFE_ES_TaskData.CmdCounter++;
        1:  699:        CFE_EVS_SendEvent(CFE_ES_NOOP_INF_EID, CFE_EVS_INFORMATION,
        -:  700:                         "No-op command. Versions:cFE %d.%d.%d.%d, OSAL %d.%d.%d.%d, PSP %d.%d.%d.%d",
        -:  701:                         CFE_MAJOR_VERSION,CFE_MINOR_VERSION,CFE_REVISION,CFE_MISSION_REV,                      
        -:  702:                         OS_MAJOR_VERSION,OS_MINOR_VERSION,OS_REVISION,OS_MISSION_REV,
        -:  703:                         CFE_PSP_MAJOR_VERSION,CFE_PSP_MINOR_VERSION,CFE_PSP_REVISION,CFE_PSP_MISSION_REV);
        -:  704:    };
        -:  705:        
        1:  706:} /* End of CFE_ES_NoopCmd() */
        -:  707:
        -:  708:
        -:  709:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  710:/*                                                                 */
        -:  711:/* CFE_ES_ResetCmd() -- ES task ground command (reset counters)    */
        -:  712:/*                                                                 */
        -:  713:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  714:
        -:  715:void CFE_ES_ResetCmd(CFE_SB_MsgPtr_t Msg)
        1:  716:{
        1:  717:    uint16 ExpectedLength = sizeof(CFE_ES_NoArgsCmd_t);
        -:  718:
        -:  719:    /*
        -:  720:    ** Verify command packet length.
        -:  721:    */
        1:  722:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -:  723:    {
        1:  724:        CFE_ES_TaskData.CmdCounter = 0;
        1:  725:        CFE_ES_TaskData.ErrCounter = 0;
        -:  726:
        -:  727:        /*
        -:  728:        ** This command will always succeed.
        -:  729:        */
        1:  730:        CFE_EVS_SendEvent(CFE_ES_RESET_INF_EID, CFE_EVS_INFORMATION,
        -:  731:                         "Reset Counters command");
        -:  732:    }
        -:  733:
        1:  734:} /* End of CFE_ES_ResetCmd() */
        -:  735:
        -:  736:
        -:  737:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  738:/*                                                                 */
        -:  739:/* CFE_ES_RestartCmd() -- Restart cFE (may reset processor)        */
        -:  740:/*                                                                 */
        -:  741:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  742:
        -:  743:void CFE_ES_RestartCmd(CFE_SB_MsgPtr_t Msg)
        2:  744:{
        2:  745:    uint16 ExpectedLength = sizeof(CFE_ES_RestartCmd_t);
        -:  746:
        -:  747:    /*
        -:  748:    ** Verify command packet length.
        -:  749:    */
        2:  750:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -:  751:    {
        2:  752:        CFE_ES_RestartCmd_t *cmd = (CFE_ES_RestartCmd_t *) Msg;
        -:  753:
        3:  754:        if ((cmd->RestartType != CFE_ES_PROCESSOR_RESET) &&
        -:  755:            (cmd->RestartType != CFE_ES_POWERON_RESET))
        -:  756:        {
        1:  757:            CFE_ES_TaskData.ErrCounter++;
        1:  758:            CFE_EVS_SendEvent(CFE_ES_BOOT_ERR_EID, CFE_EVS_ERROR,
        -:  759:                             "Invalid cFE restart type: %d",
        -:  760:                              cmd->RestartType);
        -:  761:        }
        -:  762:        else
        -:  763:        {
        -:  764:            /*
        -:  765:            ** This function will not return.
        -:  766:            */
        1:  767:            CFE_ES_ResetCFE(cmd->RestartType);
        -:  768:        }
        -:  769:    }
        -:  770:
        2:  771:} /* End of CFE_ES_RestartCmd() */
        -:  772:
        -:  773:
        -:  774:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  775:/*                                                                 */
        -:  776:/* CFE_ES_ShellCmd() -- Pass thru string to O/S shell              */
        -:  777:/*                                                                 */
        -:  778:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  779:
        -:  780:void CFE_ES_ShellCmd(CFE_SB_MsgPtr_t Msg)
        2:  781:{
        2:  782:    uint16 ExpectedLength = sizeof(CFE_ES_ShellCmd_t);
        -:  783:    int32 Result;
        -:  784:
        -:  785:    /*
        -:  786:    ** Verify command packet length.
        -:  787:    */
        2:  788:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -:  789:    {
        2:  790:        CFE_ES_ShellCmd_t *cmd = (CFE_ES_ShellCmd_t *) Msg;
        -:  791:
        -:  792:        /*
        -:  793:        ** Call the Shell command API
        -:  794:        */
        2:  795:        Result = CFE_ES_ShellOutputCommand((char *) cmd->CmdString,
        -:  796:                                           (char *) cmd->OutputFilename);
        -:  797:        /*
        -:  798:        ** Send appropriate event message.
        -:  799:        */
        2:  800:        if (Result == CFE_SUCCESS)
        -:  801:        {
        1:  802:            CFE_ES_TaskData.CmdCounter++;
        1:  803:            CFE_EVS_SendEvent(CFE_ES_SHELL_INF_EID, CFE_EVS_INFORMATION,
        -:  804:                             "Invoked shell command: '%s'",
        -:  805:                              cmd->CmdString);
        -:  806:        }
        -:  807:        else
        -:  808:        {
        1:  809:            CFE_ES_TaskData.ErrCounter++;
        1:  810:            CFE_EVS_SendEvent(CFE_ES_SHELL_ERR_EID, CFE_EVS_ERROR,
        -:  811:                       "Failed to invoke shell command: '%s', RC = 0x%08X",
        -:  812:                              cmd->CmdString, Result);
        -:  813:        }
        -:  814:    }
        -:  815:
        2:  816:} /* End of CFE_ES_ShellCmd() */
        -:  817:
        -:  818:
        -:  819:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  820:/*                                                                 */
        -:  821:/* CFE_ES_StartAppCmd() -- Load (and start) single application     */
        -:  822:/*                                                                 */
        -:  823:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  824:
        -:  825:void CFE_ES_StartAppCmd(CFE_SB_MsgPtr_t Msg)
        6:  826:{
        6:  827:    uint16                ExpectedLength = sizeof(CFE_ES_StartAppCmd_t);
        6:  828:    CFE_ES_StartAppCmd_t *cmd            = (CFE_ES_StartAppCmd_t *) Msg;
        6:  829:    uint32                AppID          = 0;
        -:  830:    int32                 Result;
        -:  831:
        -:  832:    /*
        -:  833:    ** Verify command packet length.
        -:  834:    */
        6:  835:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -:  836:    {
        -:  837:    
        -:  838:       /*
        -:  839:       ** Verify command parameters
        -:  840:       */
        -:  841:
        7:  842:       if ((cmd->AppFileName == NULL) || (strlen((char *)cmd->AppFileName) < 4 ))
        -:  843:       {
        1:  844:          CFE_ES_TaskData.ErrCounter++;
        1:  845:          CFE_EVS_SendEvent(CFE_ES_START_INVALID_FILENAME_ERR_EID, CFE_EVS_ERROR,
        -:  846:                           "CFE_ES_StartAppCmd: invalid filename: %s",
        -:  847:                            cmd->AppFileName);
        -:  848:       }
        5:  849:       else if (cmd->AppEntryPoint == NULL)
        -:  850:       {
    #####:  851:          CFE_ES_TaskData.ErrCounter++;
    #####:  852:          CFE_EVS_SendEvent(CFE_ES_START_INVALID_ENTRY_POINT_ERR_EID, CFE_EVS_ERROR,
        -:  853:                           "CFE_ES_StartAppCmd: App Entry Point is NULL.");
        -:  854:       }
        5:  855:       else if (cmd->Application == NULL)
        -:  856:       {
    #####:  857:          CFE_ES_TaskData.ErrCounter++;
    #####:  858:          CFE_EVS_SendEvent(CFE_ES_START_NULL_APP_NAME_ERR_EID, CFE_EVS_ERROR,
        -:  859:                           "CFE_ES_StartAppCmd: App Name is NULL.");
        -:  860:       }
        5:  861:       else if (cmd->StackSize < CFE_ES_DEFAULT_STACK_SIZE)
        -:  862:       {
        1:  863:          CFE_ES_TaskData.ErrCounter++;
        1:  864:          CFE_EVS_SendEvent(CFE_ES_START_STACK_ERR_EID, CFE_EVS_ERROR,
        -:  865:                           "CFE_ES_StartAppCmd: Stack size is less than system Minimum: %d.",
        -:  866:                           CFE_ES_DEFAULT_STACK_SIZE);
        -:  867:       }
        4:  868:       else if (cmd->Priority > OS_MAX_PRIORITY)
        -:  869:       {
        1:  870:          CFE_ES_TaskData.ErrCounter++;
        1:  871:          CFE_EVS_SendEvent(CFE_ES_START_PRIORITY_ERR_EID, CFE_EVS_ERROR,
        -:  872:                           "CFE_ES_StartAppCmd: Priority is too large: %d.",
        -:  873:                           cmd->Priority);
        -:  874:       }
        4:  875:       else if ((cmd->ExceptionAction != CFE_ES_APP_EXCEPTION_RESTART_APP) &&
        -:  876:                (cmd->ExceptionAction != CFE_ES_APP_EXCEPTION_PROC_RESTART ))
        -:  877:       {
        1:  878:          CFE_ES_TaskData.ErrCounter++;
        1:  879:          CFE_EVS_SendEvent(CFE_ES_START_EXC_ACTION_ERR_EID, CFE_EVS_ERROR,
        -:  880:                           "CFE_ES_StartAppCmd: Invalid Exception Action: %d.",
        -:  881:                           cmd->ExceptionAction);
        -:  882:       }
        -:  883:       else
        -:  884:       {
        -:  885:          /*
        -:  886:          ** Invoke application loader/startup function.
        -:  887:          */
        2:  888:          Result = CFE_ES_AppCreate(&AppID, (char *)cmd->AppFileName,
        -:  889:                      (char *)cmd->AppEntryPoint,
        -:  890:                      (char *)cmd->Application,
        -:  891:                      (uint32) cmd->Priority, 
        -:  892:                      (uint32) cmd->StackSize,
        -:  893:                      (uint32) cmd->ExceptionAction);
        -:  894:
        -:  895:          /*
        -:  896:          ** Send appropriate event message
        -:  897:          */
        2:  898:          if (Result == CFE_SUCCESS)
        -:  899:          {
        1:  900:             CFE_ES_TaskData.CmdCounter++;
        1:  901:             CFE_EVS_SendEvent(CFE_ES_START_INF_EID, CFE_EVS_INFORMATION,
        -:  902:                                "Started %s from %s, AppID = %d",
        -:  903:                                 cmd->Application, cmd->AppFileName, AppID);
        -:  904:           }
        -:  905:           else
        -:  906:           {
        1:  907:               CFE_ES_TaskData.ErrCounter++;
        1:  908:               CFE_EVS_SendEvent(CFE_ES_START_ERR_EID, CFE_EVS_ERROR,
        -:  909:                             "Failed to start %s from %s, RC = 0x%08X",
        -:  910:                              cmd->Application, cmd->AppFileName, Result);
        -:  911:           }
        -:  912:           
        -:  913:       } /* End if -- command parameter validation */
        -:  914:
        -:  915:   } /* End if - command length verification */
        -:  916:     
        6:  917:} /* End of CFE_ES_StartAppCmd() */
        -:  918:
        -:  919:
        -:  920:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  921:/*                                                                 */
        -:  922:/* CFE_ES_StopAppCmd() -- Stop single application                  */
        -:  923:/*                                                                 */
        -:  924:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  925:
        -:  926:void CFE_ES_StopAppCmd(CFE_SB_MsgPtr_t Msg)
        3:  927:{
        3:  928:    uint16 ExpectedLength = sizeof(CFE_ES_AppNameCmd_t);
        -:  929:
        -:  930:    /*
        -:  931:    ** Verify command packet length.
        -:  932:    */
        3:  933:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -:  934:    {
        3:  935:        CFE_ES_AppNameCmd_t *cmd = (CFE_ES_AppNameCmd_t *) Msg;
        -:  936:        uint32 AppID;
        -:  937:        int32 Result;
        -:  938:        
        3:  939:        Result = CFE_ES_GetAppIDByName(&AppID, (char *)cmd->Application);
        -:  940:
        3:  941:        if (Result == CFE_SUCCESS)
        -:  942:        {            
        -:  943:            /*
        -:  944:            ** Delete the App
        -:  945:            */
        2:  946:            Result = CFE_ES_DeleteApp(AppID);
        -:  947:
        -:  948:            /*
        -:  949:            ** Send appropriate event message.
        -:  950:            */
        2:  951:            if (Result == CFE_SUCCESS)
        -:  952:            {
        1:  953:                CFE_ES_TaskData.CmdCounter++;
        1:  954:                CFE_EVS_SendEvent(CFE_ES_STOP_DBG_EID, CFE_EVS_DEBUG,
        -:  955:                             "Stop Application %s Initiated.", cmd->Application);
        -:  956:            }
        -:  957:            else
        -:  958:            {
        1:  959:                CFE_ES_TaskData.ErrCounter++;
        1:  960:                CFE_EVS_SendEvent(CFE_ES_STOP_ERR1_EID, CFE_EVS_ERROR,
        -:  961:                             "Stop Application %s Failed, RC = 0x%08X",
        -:  962:                              cmd->Application, Result);
        -:  963:            }
        -:  964:        }
        -:  965:        else
        -:  966:        {
        1:  967:            CFE_ES_TaskData.ErrCounter++;
        1:  968:            CFE_EVS_SendEvent(CFE_ES_STOP_ERR2_EID, CFE_EVS_ERROR,
        -:  969:                              "Stop Application %s, GetAppIDByName failed. RC = 0x%08X.",
        -:  970:                               cmd->Application, Result);            
        -:  971:        }
        -:  972:
        -:  973:    }
        -:  974:
        3:  975:} /* End of CFE_ES_StopAppCmd() */
        -:  976:
        -:  977:
        -:  978:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  979:/*                                                                 */
        -:  980:/* CFE_ES_RestartAppCmd() -- Restart a single application            */
        -:  981:/*                                                                 */
        -:  982:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  983:
        -:  984:void CFE_ES_RestartAppCmd(CFE_SB_MsgPtr_t Msg)
        3:  985:{
        3:  986:    uint16 ExpectedLength = sizeof(CFE_ES_AppNameCmd_t);
        -:  987:
        -:  988:    /*
        -:  989:    ** Verify command packet length.
        -:  990:    */
        3:  991:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -:  992:    {
        3:  993:        CFE_ES_AppNameCmd_t *cmd = (CFE_ES_AppNameCmd_t *) Msg;
        -:  994:
        -:  995:        uint32 AppID;
        3:  996:        int32 Result = CFE_ES_GetAppIDByName(&AppID, (char *)cmd->Application);
        -:  997:
        3:  998:        if (Result == CFE_SUCCESS)
        -:  999:        {
        2: 1000:            Result = CFE_ES_RestartApp(AppID);
        -: 1001:
        -: 1002:            /*
        -: 1003:            ** Send appropriate event message.
        -: 1004:            */
        2: 1005:            if (Result == CFE_SUCCESS)
        -: 1006:            {
        1: 1007:                CFE_ES_TaskData.CmdCounter++;
        1: 1008:                CFE_EVS_SendEvent(CFE_ES_RESTART_APP_DBG_EID, CFE_EVS_DEBUG,
        -: 1009:                             "Restart Application %s Initiated.", cmd->Application);
        -: 1010:            }
        -: 1011:            else
        -: 1012:            {
        1: 1013:                CFE_ES_TaskData.ErrCounter++;
        1: 1014:                CFE_EVS_SendEvent(CFE_ES_RESTART_APP_ERR1_EID, CFE_EVS_ERROR,
        -: 1015:                             "Restart Application %s Failed, RC = 0x%08X",
        -: 1016:                              cmd->Application, Result);
        -: 1017:            }
        -: 1018:        }
        -: 1019:        else
        -: 1020:        {
        1: 1021:            CFE_ES_TaskData.ErrCounter++;
        1: 1022:            CFE_EVS_SendEvent(CFE_ES_RESTART_APP_ERR2_EID, CFE_EVS_ERROR,
        -: 1023:                              "Restart Application %s, GetAppIDByName failed. RC = 0x%08X.",
        -: 1024:                               cmd->Application, Result);            
        -: 1025:        }
        -: 1026:    }
        -: 1027:
        3: 1028:} /* End of CFE_ES_ResetAppCmd() */
        -: 1029:
        -: 1030:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1031:/*                                                                 */
        -: 1032:/* CFE_ES_ReloadAppCmd() -- Reload a single application            */
        -: 1033:/*                                                                 */
        -: 1034:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1035:
        -: 1036:void CFE_ES_ReloadAppCmd(CFE_SB_MsgPtr_t Msg)
        3: 1037:{
        3: 1038:    uint16 ExpectedLength = sizeof(CFE_ES_AppReloadCmd_t);
        -: 1039:
        -: 1040:    /*
        -: 1041:    ** Verify command packet length.
        -: 1042:    */
        3: 1043:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -: 1044:    {
        3: 1045:        CFE_ES_AppReloadCmd_t *cmd = (CFE_ES_AppReloadCmd_t *) Msg;
        -: 1046:        uint32  AppID;
        3: 1047:        int32   Result = CFE_ES_GetAppIDByName(&AppID, (char *)cmd->Application);
        -: 1048:
        3: 1049:        if (Result == CFE_SUCCESS)
        -: 1050:        {
        2: 1051:           Result = CFE_ES_ReloadApp(AppID, (const char *)cmd->AppFileName);
        -: 1052:
        -: 1053:            /*
        -: 1054:            ** Send appropriate event message.
        -: 1055:            */
        2: 1056:            if (Result == CFE_SUCCESS)
        -: 1057:            {
        1: 1058:                CFE_ES_TaskData.CmdCounter++;
        1: 1059:                CFE_EVS_SendEvent(CFE_ES_RELOAD_APP_DBG_EID, CFE_EVS_DEBUG,
        -: 1060:                             "Reload Application %s Initiated.", cmd->Application);
        -: 1061:            }
        -: 1062:            else
        -: 1063:            {
        1: 1064:                CFE_ES_TaskData.ErrCounter++;
        1: 1065:                CFE_EVS_SendEvent(CFE_ES_RELOAD_APP_ERR1_EID, CFE_EVS_ERROR,
        -: 1066:                             "Reload Application %s Failed, RC = 0x%08X",
        -: 1067:                              cmd->Application, Result);
        -: 1068:            }
        -: 1069:        }
        -: 1070:        else
        -: 1071:        {
        1: 1072:            CFE_ES_TaskData.ErrCounter++;
        1: 1073:            CFE_EVS_SendEvent(CFE_ES_RELOAD_APP_ERR2_EID, CFE_EVS_ERROR,
        -: 1074:                              "Reload Application %s, GetAppIDByName failed. RC = 0x%08X.",
        -: 1075:                               cmd->Application, Result);            
        -: 1076:        }
        -: 1077:    }
        -: 1078:
        3: 1079:} /* End of CFE_ES_ReloadAppCmd() */
        -: 1080:
        -: 1081:
        -: 1082:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1083:/*                                                                 */
        -: 1084:/* CFE_ES_QueryOneCmd() -- Request tlm packet with single app data */
        -: 1085:/*                                                                 */
        -: 1086:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1087:
        -: 1088:void CFE_ES_QueryOneCmd(CFE_SB_MsgPtr_t Msg)
        3: 1089:{
        3: 1090:    uint16 ExpectedLength = sizeof(CFE_ES_AppNameCmd_t);
        -: 1091:
        -: 1092:    /*
        -: 1093:    ** Verify command packet length
        -: 1094:    */
        3: 1095:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -: 1096:    {
        3: 1097:        CFE_ES_AppNameCmd_t *cmd = (CFE_ES_AppNameCmd_t *) Msg;
        -: 1098:
        -: 1099:        uint32 AppID;
        3: 1100:        int32 Result = CFE_ES_GetAppIDByName(&AppID, (char *)cmd->Application);
        -: 1101:
        -: 1102:        /*
        -: 1103:        ** Send appropriate event message...
        -: 1104:        */
        3: 1105:        if (Result == CFE_SUCCESS)
        -: 1106:        {
        -: 1107:        
        2: 1108:           CFE_ES_GetAppInfoInternal(AppID, &(CFE_ES_TaskData.OneAppPacket.AppInfo));
        -: 1109:           /*
        -: 1110:           ** Send application status telemetry packet.
        -: 1111:           */
        2: 1112:           CFE_SB_TimeStampMsg((CFE_SB_Msg_t *) &CFE_ES_TaskData.OneAppPacket);
        2: 1113:           Result = CFE_SB_SendMsg((CFE_SB_Msg_t *) &CFE_ES_TaskData.OneAppPacket);
        2: 1114:           if ( Result == CFE_SUCCESS )
        -: 1115:           {
        1: 1116:               CFE_ES_TaskData.CmdCounter++;
        1: 1117:               CFE_EVS_SendEvent(CFE_ES_ONE_APP_EID, CFE_EVS_DEBUG,
        -: 1118:                       "Sent %s application data", cmd->Application);
        -: 1119:           }
        -: 1120:           else
        -: 1121:           {
        1: 1122:               CFE_ES_TaskData.ErrCounter++;
        1: 1123:               CFE_EVS_SendEvent(CFE_ES_ONE_ERR_EID, CFE_EVS_ERROR,
        -: 1124:                          "Failed to send %s application data, RC = 0x%08X",
        -: 1125:                           cmd->Application, Result);
        -: 1126:           }
        -: 1127:        }
        -: 1128:        else
        -: 1129:        {
        1: 1130:            CFE_ES_TaskData.ErrCounter++;
        1: 1131:            CFE_EVS_SendEvent(CFE_ES_ONE_APPID_ERR_EID, CFE_EVS_ERROR,
        -: 1132:                       "Failed to send %s application data: GetAppIDByName Failed, RC = 0x%08X",
        -: 1133:                              cmd->Application, Result);
        -: 1134:        }
        -: 1135:    }
        -: 1136:
        3: 1137:} /* End of CFE_ES_QueryOneCmd() */
        -: 1138:
        -: 1139:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1140:/*                                                                 */
        -: 1141:/* CFE_ES_QueryAllCmd() -- Write all app data to file              */
        -: 1142:/*                                                                 */
        -: 1143:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1144:
        -: 1145:void CFE_ES_QueryAllCmd(CFE_SB_MsgPtr_t Msg)
        5: 1146:{
        -: 1147:
        5: 1148:    uint16                ExpectedLength = sizeof(CFE_ES_QueryAllCmd_t);
        -: 1149:    CFE_FS_Header_t       FileHeader;
        -: 1150:    int32                 FileDescriptor;
        -: 1151:    uint32                i;
        5: 1152:    uint32                EntryCount = 0;
        5: 1153:    uint32                FileSize = 0;
        -: 1154:    int32                 Result;
        -: 1155:    CFE_ES_AppInfo_t      AppInfo;
        5: 1156:    CFE_ES_QueryAllCmd_t  *CmdPtr = (CFE_ES_QueryAllCmd_t *)Msg;
        -: 1157:    char                  QueryAllFilename[OS_MAX_PATH_LEN];
        -: 1158:
        -: 1159:    /*
        -: 1160:    ** Verify command packet length.
        -: 1161:    */
        5: 1162:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -: 1163:    {
        -: 1164:       /* 
        -: 1165:       ** Copy the commanded filename into local buffer to ensure size limitation and to allow for modification 
        -: 1166:       */
        5: 1167:       CFE_PSP_MemCpy(QueryAllFilename, (void *)CmdPtr->QueryAllFileName, OS_MAX_PATH_LEN);
        -: 1168:
        -: 1169:       /* 
        -: 1170:       ** Check to see if a default filename should be used 
        -: 1171:       */
        5: 1172:       if (QueryAllFilename[0] == '\0')
        -: 1173:       {
        4: 1174:           strncpy(QueryAllFilename, CFE_ES_DEFAULT_APP_LOG_FILE, OS_MAX_PATH_LEN);
        -: 1175:       }
        -: 1176:
        -: 1177:       /* 
        -: 1178:       ** Make sure all strings are null terminated before attempting to process them 
        -: 1179:       */
        5: 1180:       QueryAllFilename[OS_MAX_PATH_LEN-1] = '\0';
        -: 1181:
        -: 1182:       /* 
        -: 1183:       ** Check to see if the file already exists 
        -: 1184:       */
        5: 1185:       FileDescriptor = OS_open(QueryAllFilename, OS_READ_ONLY, 0);
        5: 1186:       if (FileDescriptor >= 0)
        -: 1187:       {
        5: 1188:           OS_close(FileDescriptor);
        5: 1189:           OS_remove(QueryAllFilename);
        -: 1190:       }
        -: 1191:
        -: 1192:       /*
        -: 1193:       ** Create ES task log data file
        -: 1194:       */
        5: 1195:       FileDescriptor = OS_creat(QueryAllFilename, OS_WRITE_ONLY);
        5: 1196:       if (FileDescriptor >= 0)
        -: 1197:       {
        -: 1198:          /*
        -: 1199:          ** Initialize cFE file header
        -: 1200:          */
        4: 1201:          CFE_PSP_MemSet(&FileHeader, 0, sizeof(CFE_FS_Header_t));
        4: 1202:          strcpy(FileHeader.Description, CFE_ES_APP_LOG_DESC);
        -: 1203:
        -: 1204:          /*
        -: 1205:          ** Write the File header SubType
        -: 1206:          */
        4: 1207:          FileHeader.SubType = CFE_FS_ES_QUERYALL_SUBTYPE;
        -: 1208:
        -: 1209:          /*
        -: 1210:          ** Output the Standard cFE File Header to the App File
        -: 1211:          */
        4: 1212:          Result = CFE_FS_WriteHeader(FileDescriptor, &FileHeader);
        -: 1213:
        4: 1214:          if (Result != sizeof(CFE_FS_Header_t))
        -: 1215:          {
        1: 1216:              OS_close(FileDescriptor);
        1: 1217:              CFE_ES_TaskData.ErrCounter++;
        1: 1218:              CFE_EVS_SendEvent(CFE_ES_WRHDR_ERR_EID, CFE_EVS_ERROR,
        -: 1219:                 "Failed to write App Info file, WriteHdr RC = 0x%08X, exp %d",
        -: 1220:                       Result,sizeof(CFE_FS_Header_t));
        1: 1221:              return;
        -: 1222:          }/* end if */
        -: 1223:
        -: 1224:          /* 
        -: 1225:          ** Maintain statistics of amount of data written to file 
        -: 1226:          */
        3: 1227:          FileSize += Result;
        -: 1228:
        -: 1229:          /*
        -: 1230:          ** Loop through the ES AppTable for main applications
        -: 1231:          */
       67: 1232:          for(i=0;i<CFE_ES_MAX_APPLICATIONS;i++)
        -: 1233:          {
       65: 1234:             if(CFE_ES_Global.AppTable[i].RecordUsed == FALSE)
        -: 1235:             {
       58: 1236:               continue;
        -: 1237:             }
        -: 1238:
        -: 1239:             /* 
        -: 1240:             ** zero out the local entry 
        -: 1241:             */
        7: 1242:             CFE_PSP_MemSet(&AppInfo,0,sizeof(CFE_ES_AppInfo_t));
        -: 1243:
        -: 1244:             /*
        -: 1245:             ** Populate the AppInfo entry 
        -: 1246:             */
        7: 1247:             CFE_ES_GetAppInfoInternal(i, &AppInfo);
        -: 1248:
        -: 1249:             /*
        -: 1250:             ** Write the local entry to file 
        -: 1251:             */
        7: 1252:             Result = OS_write(FileDescriptor, &AppInfo, sizeof(CFE_ES_AppInfo_t) );
        7: 1253:             if (Result !=  sizeof(CFE_ES_AppInfo_t))
        -: 1254:             {
        1: 1255:                OS_close(FileDescriptor);
        1: 1256:                CFE_ES_TaskData.ErrCounter++;
        1: 1257:                CFE_EVS_SendEvent(CFE_ES_TASKWR_ERR_EID, CFE_EVS_ERROR,
        -: 1258:                   "Failed to write App Info file, Task write RC = 0x%08X, exp %d",
        -: 1259:                                   Result,sizeof(CFE_ES_AppInfo_t));
        1: 1260:                return;
        -: 1261:             }/* end if */
        -: 1262:
        6: 1263:             FileSize += Result;
        6: 1264:             EntryCount ++;
        -: 1265:            
        -: 1266:          } /* end for */
        -: 1267:
        2: 1268:          OS_close(FileDescriptor);
        2: 1269:          CFE_ES_TaskData.CmdCounter++;
        2: 1270:          CFE_EVS_SendEvent(CFE_ES_ALL_APPS_EID, CFE_EVS_DEBUG,
        -: 1271:                        "App Info file written to %s, Entries=%d, FileSize=%d",
        -: 1272:                         QueryAllFilename,EntryCount,FileSize);
        -: 1273:       }
        -: 1274:       else
        -: 1275:       {
        1: 1276:           OS_close(FileDescriptor);
        1: 1277:           CFE_ES_TaskData.ErrCounter++;
        1: 1278:           CFE_EVS_SendEvent(CFE_ES_OSCREATE_ERR_EID, CFE_EVS_ERROR,
        -: 1279:              "Failed to write App Info file, OS_creat RC = 0x%08X",FileDescriptor);
        -: 1280:       }
        -: 1281:       
        -: 1282:    } /* end if verify command length */
        3: 1283:    return;
        -: 1284:
        -: 1285:} /* End of CFE_ES_QueryAllCmd() */
        -: 1286:
        -: 1287:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1288:/*                                                                 */
        -: 1289:/* CFE_ES_QueryAllTasksCmd() -- Write all Task Data to a file      */
        -: 1290:/*                                                                 */
        -: 1291:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1292:
        -: 1293:void CFE_ES_QueryAllTasksCmd(CFE_SB_MsgPtr_t Msg)
        4: 1294:{
        -: 1295:
        4: 1296:    uint16                     ExpectedLength = sizeof(CFE_ES_QueryAllTasksCmd_t);
        -: 1297:    CFE_FS_Header_t            FileHeader;
        -: 1298:    int32                      FileDescriptor;
        -: 1299:    uint32                     i;
        4: 1300:    uint32                     EntryCount = 0;
        4: 1301:    uint32                     FileSize = 0;
        -: 1302:    int32                      Result;
        -: 1303:    CFE_ES_TaskInfo_t          TaskInfo;
        4: 1304:    CFE_ES_QueryAllTasksCmd_t  *CmdPtr = (CFE_ES_QueryAllTasksCmd_t *)Msg;
        -: 1305:    char                       QueryAllFilename[OS_MAX_PATH_LEN];
        -: 1306:
        -: 1307:    /*
        -: 1308:    ** Verify command packet length.
        -: 1309:    */
        4: 1310:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -: 1311:    {
        -: 1312:       /* 
        -: 1313:       ** Copy the commanded filename into local buffer to ensure size limitation and to allow for modification 
        -: 1314:       */
        4: 1315:       CFE_PSP_MemCpy(QueryAllFilename, (void *)CmdPtr->QueryAllFileName, OS_MAX_PATH_LEN);
        -: 1316:
        -: 1317:       /* 
        -: 1318:       ** Check to see if a default filename should be used 
        -: 1319:       */
        4: 1320:       if (QueryAllFilename[0] == '\0')
        -: 1321:       {
        1: 1322:           strncpy(QueryAllFilename, CFE_ES_DEFAULT_TASK_LOG_FILE, OS_MAX_PATH_LEN);
        -: 1323:       }
        -: 1324:
        -: 1325:       /* 
        -: 1326:       ** Make sure all strings are null terminated before attempting to process them 
        -: 1327:       */
        4: 1328:       QueryAllFilename[OS_MAX_PATH_LEN-1] = '\0';
        -: 1329:
        -: 1330:       /* 
        -: 1331:       ** Check to see if the file already exists 
        -: 1332:       */
        4: 1333:       FileDescriptor = OS_open(QueryAllFilename, OS_READ_ONLY, 0);
        4: 1334:       if (FileDescriptor >= 0)
        -: 1335:       {
        4: 1336:           OS_close(FileDescriptor);
        4: 1337:           OS_remove(QueryAllFilename);
        -: 1338:       }
        -: 1339:
        -: 1340:       /*
        -: 1341:       ** Create ES task log data file
        -: 1342:       */
        4: 1343:       FileDescriptor = OS_creat(QueryAllFilename, OS_WRITE_ONLY);
        4: 1344:       if (FileDescriptor >= 0)
        -: 1345:       {
        -: 1346:          /*
        -: 1347:          ** Initialize cFE file header
        -: 1348:          */
        3: 1349:          CFE_PSP_MemSet(&FileHeader, 0, sizeof(CFE_FS_Header_t));
        3: 1350:          strcpy(FileHeader.Description, CFE_ES_TASK_LOG_DESC);
        -: 1351:
        -: 1352:          /*
        -: 1353:          ** Write the File header SubType
        -: 1354:          */
        3: 1355:          FileHeader.SubType = CFE_FS_ES_QUERYALLTASKS_SUBTYPE;
        -: 1356:
        -: 1357:          /*
        -: 1358:          ** Output the Standard cFE File Header to the App File
        -: 1359:          */
        3: 1360:          Result = CFE_FS_WriteHeader(FileDescriptor, &FileHeader);
        -: 1361:
        3: 1362:          if (Result != sizeof(CFE_FS_Header_t))
        -: 1363:          {
        1: 1364:              OS_close(FileDescriptor);
        1: 1365:              CFE_ES_TaskData.ErrCounter++;
        1: 1366:              CFE_EVS_SendEvent(CFE_ES_TASKINFO_WRHDR_ERR_EID, CFE_EVS_ERROR,
        -: 1367:                 "Failed to write Task Info file, WriteHdr RC = 0x%08X, exp %d",
        -: 1368:                       Result,sizeof(CFE_FS_Header_t));
        1: 1369:              return;
        -: 1370:          }/* end if */
        -: 1371:
        -: 1372:          /* 
        -: 1373:          ** Maintain statistics of amount of data written to file 
        -: 1374:          */
        2: 1375:          FileSize += Result;
        -: 1376:
        -: 1377:          /*
        -: 1378:          ** Loop through the ES AppTable for main applications
        -: 1379:          */
       66: 1380:          for(i=0;i<OS_MAX_TASKS;i++)
        -: 1381:          {
       65: 1382:             if(CFE_ES_Global.TaskTable[i].RecordUsed == FALSE)
        -: 1383:             {
       63: 1384:               continue;
        -: 1385:             }
        -: 1386:
        -: 1387:             /* 
        -: 1388:             ** zero out the local entry 
        -: 1389:             */
        2: 1390:             CFE_PSP_MemSet(&TaskInfo,0,sizeof(CFE_ES_TaskInfo_t));
        -: 1391:
        -: 1392:             /*
        -: 1393:             ** Populate the AppInfo entry 
        -: 1394:             */
        2: 1395:             CFE_ES_GetTaskInfo(&TaskInfo,i);
        -: 1396:
        -: 1397:             /*
        -: 1398:             ** Write the local entry to file 
        -: 1399:             */
        2: 1400:             Result = OS_write(FileDescriptor, &TaskInfo, sizeof(CFE_ES_TaskInfo_t) );
        2: 1401:             if (Result !=  sizeof(CFE_ES_TaskInfo_t))
        -: 1402:             {
        1: 1403:                OS_close(FileDescriptor);
        1: 1404:                CFE_ES_TaskData.ErrCounter++;
        1: 1405:                CFE_EVS_SendEvent(CFE_ES_TASKINFO_WR_ERR_EID, CFE_EVS_ERROR,
        -: 1406:                   "Failed to write Task Info file, Task write RC = 0x%08X, exp %d",
        -: 1407:                                   Result,sizeof(CFE_ES_TaskInfo_t));
        1: 1408:                return;
        -: 1409:             }/* end if */
        -: 1410:
        1: 1411:             FileSize += Result;
        1: 1412:             EntryCount ++;
        -: 1413:            
        -: 1414:          } /* end for */
        -: 1415:
        1: 1416:          OS_close(FileDescriptor);
        1: 1417:          CFE_ES_TaskData.CmdCounter++;
        1: 1418:          CFE_EVS_SendEvent(CFE_ES_TASKINFO_EID, CFE_EVS_DEBUG,
        -: 1419:                        "Task Info file written to %s, Entries=%d, FileSize=%d",
        -: 1420:                         QueryAllFilename,EntryCount,FileSize);
        -: 1421:       }
        -: 1422:       else
        -: 1423:       {
        1: 1424:           OS_close(FileDescriptor);
        1: 1425:           CFE_ES_TaskData.ErrCounter++;
        1: 1426:           CFE_EVS_SendEvent(CFE_ES_TASKINFO_OSCREATE_ERR_EID, CFE_EVS_ERROR,
        -: 1427:              "Failed to write Task Info file, OS_creat RC = 0x%08X",FileDescriptor);
        -: 1428:       }
        -: 1429:       
        -: 1430:    } /* end if verify command length */
        2: 1431:    return;
        -: 1432:
        -: 1433:} /* End of CFE_ES_QueryAllTasksCmd() */
        -: 1434:
        -: 1435:
        -: 1436:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1437:/*                                                                 */
        -: 1438:/* CFE_ES_ClearSyslogCmd() -- Clear executive services system log  */
        -: 1439:/*                                                                 */
        -: 1440:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1441:
        -: 1442:void CFE_ES_ClearSyslogCmd(CFE_SB_MsgPtr_t Msg)
        1: 1443:{
        1: 1444:    uint16 ExpectedLength = sizeof(CFE_ES_NoArgsCmd_t);
        -: 1445:
        -: 1446:    /*
        -: 1447:    ** Verify command packet length.
        -: 1448:    */
        1: 1449:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -: 1450:    {
        -: 1451:
        -: 1452:        /*
        -: 1453:        ** Clear syslog index and memory area
        -: 1454:        */
        1: 1455:        CFE_ES_SysLogClear();
        -: 1456:
        -: 1457:        /*
        -: 1458:        ** This command will always succeed...
        -: 1459:        */
        1: 1460:        CFE_ES_TaskData.CmdCounter++;
        1: 1461:        CFE_EVS_SendEvent(CFE_ES_SYSLOG1_INF_EID, CFE_EVS_INFORMATION,
        -: 1462:                         "Cleared Executive Services log data");
        -: 1463:    }
        -: 1464:
        1: 1465:} /* End of CFE_ES_ClearSyslogCmd() */
        -: 1466:
        -: 1467:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1468:/*                                                                 */
        -: 1469:/* CFE_ES_OverWriteSyslogCmd() -- set syslog mode                  */
        -: 1470:/*                                                                 */
        -: 1471:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1472:
        -: 1473:void CFE_ES_OverWriteSyslogCmd(CFE_SB_MsgPtr_t Msg)
        2: 1474:{
        2: 1475:   uint32                        Status = 0;
        2: 1476:   CFE_ES_OverWriteSysLogCmd_t  *CmdPtr = ( CFE_ES_OverWriteSysLogCmd_t *)Msg;
        2: 1477:   uint16                        ExpectedLength = sizeof(CFE_ES_OverWriteSysLogCmd_t);
        -: 1478:
        -: 1479:    /*
        -: 1480:    ** Verify command packet length.
        -: 1481:    */
        2: 1482:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -: 1483:    {
        -: 1484:
        2: 1485:      Status = CFE_ES_SysLogOverwrite(CmdPtr->Mode);
        -: 1486:
        2: 1487:      if (Status == FALSE)
        -: 1488:      {
        1: 1489:         CFE_EVS_SendEvent(CFE_ES_ERR_SYSLOGMODE_EID,
        -: 1490:                           CFE_EVS_ERROR,
        -: 1491:                           "Set OverWriteSysLog Command: Invalid Mode setting = %d", CmdPtr->Mode);
        -: 1492:                           
        1: 1493:         CFE_ES_TaskData.ErrCounter++;      
        -: 1494:      }
        -: 1495:      else
        -: 1496:      {
        1: 1497:         CFE_EVS_SendEvent(CFE_ES_SYSLOGMODE_EID,
        -: 1498:                           CFE_EVS_DEBUG,
        -: 1499:                           "Set OverWriteSysLog Command Received with Mode setting = %d", CmdPtr->Mode);
        -: 1500:                           
        1: 1501:         CFE_ES_TaskData.CmdCounter++;
        -: 1502:      }
        -: 1503:
        -: 1504:   } /* end if verify command length */
        -: 1505:   
        2: 1506:} /* End CFE_ES_OverWriteSyslogCmd() */
        -: 1507:
        -: 1508:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1509:/*                                                                 */
        -: 1510:/* CFE_ES_SysLogClear -- Clear system log & index                  */
        -: 1511:/*                                                                 */
        -: 1512:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1513:
        -: 1514:void CFE_ES_SysLogClear(void)
        1: 1515:{
        -: 1516:    /*
        -: 1517:    ** Clear SysLog data buffer
        -: 1518:    */
        1: 1519:    CFE_PSP_MemSet(CFE_ES_ResetDataPtr->SystemLog, 0, CFE_ES_SYSTEM_LOG_SIZE);
        -: 1520:
        -: 1521:    /*
        -: 1522:    ** Initialize SysLog index & Entry Count
        -: 1523:    */
        1: 1524:    CFE_ES_ResetDataPtr->SystemLogIndex = 0;
        1: 1525:    CFE_ES_ResetDataPtr->SystemLogEntryNum = 0;
        -: 1526:
        1: 1527:} /* End of CFE_ES_SysLogClear() */
        -: 1528:
        -: 1529:
        -: 1530:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1531:/*                                                                       */
        -: 1532:/* CFE_ES_WriteSyslogCmd() -- Process Cmd to write ES System Log to file */
        -: 1533:/*                                                                       */
        -: 1534:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1535:
        -: 1536:void CFE_ES_WriteSyslogCmd(CFE_SB_MsgPtr_t Msg)
        5: 1537:{
        5: 1538:    CFE_ES_WriteSyslogCmd_t  *CmdPtr = (CFE_ES_WriteSyslogCmd_t *)Msg;
        -: 1539:    int32                     Stat;
        5: 1540:    uint16                    ExpectedLength = sizeof(CFE_ES_WriteSyslogCmd_t);
        -: 1541:
        -: 1542:    /*
        -: 1543:    ** Verify command packet length.
        -: 1544:    */
        5: 1545:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -: 1546:    {
        -: 1547:
        5: 1548:       if(CmdPtr->SysLogFileName[0]=='\0')
        -: 1549:       {     
        4: 1550:           Stat = CFE_ES_SysLogDump(CFE_ES_DEFAULT_SYSLOG_FILE);
        -: 1551:       }
        -: 1552:       else
        -: 1553:       {
        1: 1554:           CmdPtr->SysLogFileName[OS_MAX_PATH_LEN - 1] = '\0';
        1: 1555:           Stat = CFE_ES_SysLogDump(CmdPtr->SysLogFileName);        
        -: 1556:       }/* end if */
        -: 1557:         
        5: 1558:       if(Stat == CFE_SUCCESS)
        -: 1559:       {
        2: 1560:           CFE_ES_TaskData.CmdCounter++;
        -: 1561:       }
        -: 1562:       else
        -: 1563:       {
        3: 1564:           CFE_ES_TaskData.ErrCounter++;
        -: 1565:       }/* end if */
        -: 1566:
        -: 1567:   } /* end if command length verify */
        -: 1568:   
        5: 1569:}/* end CFE_ES_WriteSyslogCmd */
        -: 1570:
        -: 1571:
        -: 1572:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1573:/*                                                                 */
        -: 1574:/* CFE_ES_SysLogDump() -- Write ES System Log to a file.    */
        -: 1575:/*                                                                 */
        -: 1576:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1577:int32 CFE_ES_SysLogDump(char *Filename)
        5: 1578:{
        -: 1579:    int32   fd;
        -: 1580:    int32   WriteStat;
        -: 1581:    uint32  FileSize;
        -: 1582:    CFE_FS_Header_t FileHdr;
        -: 1583:
        5: 1584:    fd = OS_creat(Filename, OS_WRITE_ONLY);
        5: 1585:    if(fd < 0)
        -: 1586:    {
        1: 1587:        OS_close(fd);
        1: 1588:        CFE_EVS_SendEvent(CFE_ES_SYSLOG2_ERR_EID,CFE_EVS_ERROR,
        -: 1589:                      "Error creating file %s, RC = 0x%08X",
        -: 1590:                      Filename,fd);
        1: 1591:        return CFE_ES_FILE_IO_ERR;
        -: 1592:    }/* end if */
        -: 1593:
        4: 1594:    CFE_PSP_MemSet(&FileHdr, 0, sizeof(CFE_FS_Header_t));
        4: 1595:    strcpy(&FileHdr.Description[0], CFE_ES_SYS_LOG_DESC);
        -: 1596:
        -: 1597:    /*
        -: 1598:    ** Write the File header SubType
        -: 1599:    */
        4: 1600:    FileHdr.SubType = CFE_FS_ES_SYSLOG_SUBTYPE;
        -: 1601:
        4: 1602:    WriteStat = CFE_FS_WriteHeader(fd, &FileHdr);
        4: 1603:    if(WriteStat != sizeof(CFE_FS_Header_t))
        -: 1604:    {
        1: 1605:        CFE_ES_FileWriteByteCntErr(Filename,sizeof(CFE_FS_Header_t),WriteStat);
        1: 1606:        OS_close(fd);
        1: 1607:        return CFE_ES_FILE_IO_ERR;
        -: 1608:    }/* end if */
        -: 1609:
        3: 1610:    FileSize = WriteStat;
        -: 1611:
        -: 1612:    /* need to take semaphore here */
        -: 1613:
        3: 1614:    WriteStat = OS_write(fd,CFE_ES_ResetDataPtr->SystemLog,CFE_ES_SYSTEM_LOG_SIZE);
        3: 1615:    if(WriteStat != CFE_ES_SYSTEM_LOG_SIZE)
        -: 1616:    {
        1: 1617:        CFE_ES_FileWriteByteCntErr(Filename,CFE_ES_SYSTEM_LOG_SIZE,WriteStat);
        1: 1618:        OS_close(fd);
        1: 1619:        return CFE_ES_FILE_IO_ERR;
        -: 1620:    }/* end if */
        -: 1621:
        -: 1622:    /* need to release the semaphore here */
        -: 1623:
        2: 1624:    FileSize += WriteStat;    
        -: 1625:    
        2: 1626:    OS_close(fd);
        -: 1627:
        2: 1628:    CFE_EVS_SendEvent(CFE_ES_SYSLOG2_EID, CFE_EVS_DEBUG,
        -: 1629:                      "%s written:Size=%d,Entries=%d",Filename,FileSize,
        -: 1630:                      CFE_ES_TaskData.HkPacket.SysLogEntries);
        -: 1631:
        2: 1632:    return CFE_SUCCESS;
        -: 1633:
        -: 1634:} /* End of CFE_ES_SysLogDump() */
        -: 1635:
        -: 1636:
        -: 1637:
        -: 1638:/*
        -: 1639:** Function: CFE_ES_SysLogOverwrite
        -: 1640:**
        -: 1641:** Purpose:  Set syslog write mode
        -: 1642:**
        -: 1643:*/
        -: 1644:int32 CFE_ES_SysLogOverwrite(uint32 Mode )
        2: 1645:{
        2: 1646:    uint32 Status = TRUE;
        -: 1647:
        3: 1648:    if((Mode == CFE_ES_LOG_OVERWRITE) || (Mode == CFE_ES_LOG_DISCARD))
        -: 1649:    {
        1: 1650:        CFE_ES_ResetDataPtr->SystemLogMode = Mode;
        -: 1651:    }
        -: 1652:    else
        -: 1653:    {
        1: 1654:        Status = FALSE;
        -: 1655:    }
        -: 1656:
        2: 1657:    return Status;
        -: 1658:}
        -: 1659:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1660:/*                                                                 */
        -: 1661:/* CFE_ES_ClearERlogCmd() -- Clear The exception and reset log.    */
        -: 1662:/*                                                                 */
        -: 1663:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1664:
        -: 1665:void CFE_ES_ClearERlogCmd(CFE_SB_MsgPtr_t Msg)
        2: 1666:{
        2: 1667:    uint16 ExpectedLength = sizeof(CFE_ES_NoArgsCmd_t);
        -: 1668:
        -: 1669:    /*
        -: 1670:    ** Verify command packet length
        -: 1671:    */
        2: 1672:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -: 1673:    {
        -: 1674:        /*
        -: 1675:        ** Clear ER log data buffer
        -: 1676:        */
        -: 1677:
        1: 1678:        CFE_PSP_MemSet(CFE_ES_ResetDataPtr->ERLog, 0, sizeof(CFE_ES_ResetDataPtr->ERLog));
        -: 1679:
        -: 1680:        /*
        -: 1681:        ** Reset ER log buffer index
        -: 1682:        */
        -: 1683:
        1: 1684:        CFE_ES_ResetDataPtr->ERLogIndex = 0;
        -: 1685:        
        -: 1686:        /* 
        -: 1687:        ** Set Number of Entries in ER log buffer back to zero
        -: 1688:        */
        1: 1689:        CFE_ES_ResetDataPtr->ERLogEntries = 0;
        -: 1690:
        -: 1691:        /*
        -: 1692:        ** This command will always succeed
        -: 1693:        */
        1: 1694:        CFE_ES_TaskData.CmdCounter++;
        1: 1695:        CFE_EVS_SendEvent(CFE_ES_ERLOG1_INF_EID, CFE_EVS_INFORMATION,
        -: 1696:                         "Cleared ES Exception and Reset Log data");
        -: 1697:    }
        -: 1698:
        2: 1699:} /* End of CFE_ES_ClearERlogCmd() */
        -: 1700:
        -: 1701:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1702:/*                                                                 */
        -: 1703:/* CFE_ES_WriteERlogCmd() -- Process Cmd to write exception & reset*/
        -: 1704:/*                           log to a file.                        */
        -: 1705:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1706:
        -: 1707:void CFE_ES_WriteERlogCmd(CFE_SB_MsgPtr_t Msg)
        5: 1708:{
        5: 1709:    CFE_ES_WriteERlogCmd_t  *CmdPtr = (CFE_ES_WriteERlogCmd_t *)Msg;
        -: 1710:    int32                    Stat;
        5: 1711:    uint16                   ExpectedLength = sizeof(CFE_ES_WriteERlogCmd_t);
        -: 1712:
        -: 1713:    /*
        -: 1714:    ** Verify command packet length
        -: 1715:    */
        5: 1716:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -: 1717:    {
        5: 1718:       if(CmdPtr->ERLogFileName[0]=='\0')
        -: 1719:       {     
        1: 1720:           Stat = CFE_ES_ERLogDump(CFE_ES_DEFAULT_ER_LOG_FILE);
        -: 1721:       }
        -: 1722:       else
        -: 1723:       {
        4: 1724:           CmdPtr->ERLogFileName[OS_MAX_PATH_LEN - 1] = '\0';
        4: 1725:           Stat = CFE_ES_ERLogDump(CmdPtr->ERLogFileName);        
        -: 1726:       }/* end if */
        -: 1727:         
        5: 1728:       if(Stat == CFE_SUCCESS)
        -: 1729:       {
        1: 1730:           CFE_ES_TaskData.CmdCounter++;
        -: 1731:       }
        -: 1732:       else
        -: 1733:       {
        4: 1734:           CFE_ES_TaskData.ErrCounter++;
        -: 1735:       }/* end if */
        -: 1736:       
        -: 1737:   } /* end if verify command length */
        -: 1738:   
        5: 1739:}/* end CFE_ES_WriteERlogCmd */
        -: 1740:
        -: 1741:
        -: 1742:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1743:/*                                                                 */
        -: 1744:/* CFE_ES_ERLogDump() -- Write exception & reset log to a file.    */
        -: 1745:/*                                                                 */
        -: 1746:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1747:int32 CFE_ES_ERLogDump(char *Filename)
        5: 1748:{
        -: 1749:
        -: 1750:    int32   fd;
        -: 1751:    int32   WriteStat,BspStat;
        -: 1752:    uint32  FileSize,i,ResetAreaSize;
        -: 1753:    CFE_FS_Header_t FileHdr;
        -: 1754:    uint8   *ResetDataPtr;
        -: 1755:    
        5: 1756:    fd = OS_creat(Filename, OS_WRITE_ONLY);
        5: 1757:    if(fd < 0)
        -: 1758:    {
        1: 1759:        OS_close(fd);
        1: 1760:        CFE_EVS_SendEvent(CFE_ES_ERLOG2_ERR_EID,CFE_EVS_ERROR,
        -: 1761:                      "Error creating file %s, RC = 0x%08X",
        -: 1762:                      Filename,fd);
        1: 1763:        return CFE_ES_FILE_IO_ERR;
        -: 1764:    }/* end if */
        -: 1765:
        4: 1766:    CFE_PSP_MemSet(&FileHdr, 0, sizeof(CFE_FS_Header_t));
        4: 1767:    strcpy(&FileHdr.Description[0], CFE_ES_ER_LOG_DESC);
        -: 1768:
        -: 1769:    /*
        -: 1770:    ** Write the File header SubType
        -: 1771:    */
        4: 1772:    FileHdr.SubType = CFE_FS_ES_ERLOG_SUBTYPE;
        -: 1773:    
        -: 1774:    /* write the cFE header to the file */
        4: 1775:    WriteStat = CFE_FS_WriteHeader(fd, &FileHdr);    
        4: 1776:    if(WriteStat != sizeof(CFE_FS_Header_t))
        -: 1777:    {
        1: 1778:        CFE_ES_FileWriteByteCntErr(Filename,sizeof(CFE_FS_Header_t),WriteStat);
        1: 1779:        OS_close(fd);
        1: 1780:        return CFE_ES_FILE_IO_ERR;        
        -: 1781:    }/* end if */
        3: 1782:    FileSize = WriteStat;
        -: 1783:
        -: 1784:    /* Get the pointer to the Reset Log from the BSP */
        3: 1785:    BspStat = CFE_PSP_GetResetArea (&ResetDataPtr, &ResetAreaSize);
        3: 1786:    if(BspStat==OS_ERROR)
        -: 1787:    {
        1: 1788:        CFE_EVS_SendEvent(CFE_ES_RST_ACCESS_EID, CFE_EVS_ERROR,
        -: 1789:              "Error accessing ER Log,%s not written. RC = 0x%08X",Filename,BspStat);
        1: 1790:        OS_close(fd);
        1: 1791:        return CFE_ES_RST_ACCESS_ERR;        
        -: 1792:    }/* end if */
        -: 1793:
        -: 1794:    /* write a single ER log entry on each pass */
       22: 1795:    for(i=0;i<CFE_ES_ER_LOG_ENTRIES;i++)
        -: 1796:    {
       21: 1797:        WriteStat = OS_write(fd,(uint8 *)ResetDataPtr,sizeof(CFE_ES_ERLog_t));
       21: 1798:        if(WriteStat != sizeof(CFE_ES_ERLog_t))
        -: 1799:        {
        1: 1800:            CFE_ES_FileWriteByteCntErr(Filename,sizeof(CFE_ES_ERLog_t),WriteStat);
        1: 1801:            OS_close(fd);
        1: 1802:            return CFE_ES_FILE_IO_ERR;        
        -: 1803:        }/* end if */        
       20: 1804:        FileSize += WriteStat;
       20: 1805:        ResetDataPtr+=sizeof(CFE_ES_ERLog_t);
        -: 1806:    }/* end for */   
        -: 1807:    
        1: 1808:    OS_close(fd);
        -: 1809:
        1: 1810:    CFE_EVS_SendEvent(CFE_ES_ERLOG2_EID, CFE_EVS_DEBUG,
        -: 1811:                      "%s written:Size=%d",Filename,FileSize);
        -: 1812:
        1: 1813:    return CFE_SUCCESS;
        -: 1814:
        -: 1815:} /* end CFE_ES_ERLogDump() */
        -: 1816:
        -: 1817:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1818:/*                                                                 */
        -: 1819:/* CFE_ES_VerifyCmdLength() -- Verify command packet length        */
        -: 1820:/*                                                                 */
        -: 1821:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1822:
        -: 1823:boolean CFE_ES_VerifyCmdLength(CFE_SB_MsgPtr_t Msg, uint16 ExpectedLength)
       74: 1824:{
       74: 1825:    boolean result       = TRUE;
       74: 1826:    uint16  ActualLength = CFE_SB_GetTotalMsgLength(Msg);
        -: 1827:
        -: 1828:    /*
        -: 1829:    ** Verify the command packet length
        -: 1830:    */
       74: 1831:    if (ExpectedLength != ActualLength)
        -: 1832:    {
        1: 1833:        CFE_SB_MsgId_t MessageID = CFE_SB_GetMsgId(Msg);
        1: 1834:        uint16 CommandCode = CFE_SB_GetCmdCode(Msg);
        -: 1835:
        1: 1836:        CFE_EVS_SendEvent(CFE_ES_LEN_ERR_EID, CFE_EVS_ERROR,
        -: 1837:           "Invalid cmd length: ID = 0x%X, CC = %d, Exp Len = %d, Len = %d",
        -: 1838:                          MessageID, CommandCode, ExpectedLength, ActualLength);
        1: 1839:        result = FALSE;
        1: 1840:        CFE_ES_TaskData.ErrCounter++;
        -: 1841:    }
        -: 1842:
       74: 1843:    return(result);
        -: 1844:
        -: 1845:} /* End of CFE_ES_VerifyCmdLength() */
        -: 1846:
        -: 1847:
        -: 1848:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1849:/*                                                                 */
        -: 1850:/* CFE_ES_ResetPRCountCmd() -- ES task ground command              */
        -: 1851:/*                              (Processor Reset Count)            */
        -: 1852:/*                                                                 */
        -: 1853:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1854:                
        -: 1855:void CFE_ES_ResetPRCountCmd(CFE_SB_MsgPtr_t Msg)
        1: 1856:{                   
        1: 1857:    uint16 ExpectedLength = sizeof(CFE_ES_NoArgsCmd_t);
        -: 1858:                
        -: 1859:    /*              
        -: 1860:    ** Verify command packet length.
        -: 1861:    */
        1: 1862:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -: 1863:    {               
        -: 1864:                     
        -: 1865:        /*                            
        -: 1866:        ** Reset the processor reset count
        -: 1867:        */          
        1: 1868:        CFE_ES_ResetDataPtr->ResetVars.ProcessorResetCount = 0;
        -: 1869:            
        -: 1870:        /*
        -: 1871:        ** This command will always succeed.                                       
        -: 1872:        */                                                                         
        1: 1873:        CFE_EVS_SendEvent(CFE_ES_RESET_PR_COUNT_EID, CFE_EVS_INFORMATION,          
        -: 1874:                         "Set Processor Reset Count to Zero");  
        -: 1875:                         
        1: 1876:        CFE_ES_TaskData.CmdCounter++;
        -: 1877:    }                                                                              
        -: 1878:                                                                                   
        1: 1879:} /* End of CFE_ES_ResetPRCountCmd() */                                            
        -: 1880:
        -: 1881:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */              
        -: 1882:/*                                                                 */              
        -: 1883:/* CFE_ES_SetMaxPRCountCmd() -- Set Maximum Processor reset count  */              
        -: 1884:/*                                                                 */              
        -: 1885:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */              
        -: 1886:                                                                                   
        -: 1887:void CFE_ES_SetMaxPRCountCmd(CFE_SB_MsgPtr_t Msg)                                  
        1: 1888:{                                                                                  
        1: 1889:    uint16 ExpectedLength = sizeof(CFE_ES_SetMaxPRCountCmd_t);                     
        -: 1890:                                                                                   
        -: 1891:    /*                                                                             
        -: 1892:    ** Verify command packet length.                                               
        -: 1893:    */                                                                             
        1: 1894:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))                               
        -: 1895:    {                                                                              
        1: 1896:        CFE_ES_SetMaxPRCountCmd_t *cmd = (CFE_ES_SetMaxPRCountCmd_t *) Msg;        
        -: 1897:                                                                                   
        -: 1898:        /*                                                                         
        -: 1899:        ** Set the MAX Processor reset count                                       
        -: 1900:        */                                                                         
        1: 1901:        CFE_ES_ResetDataPtr->ResetVars.MaxProcessorResetCount = cmd->MaxPRCount;   
        -: 1902:                                                                                   
        -: 1903:        /*                                                                         
        -: 1904:        ** This command will always succeed.                                       
        -: 1905:        */                                                                         
        1: 1906:        CFE_EVS_SendEvent(CFE_ES_SET_MAX_PR_COUNT_EID, CFE_EVS_INFORMATION,        
        -: 1907:                         "Maximum Processor Reset Count set to: %d", cmd->MaxPRCount);
        -: 1908:                         
        1: 1909:        CFE_ES_TaskData.CmdCounter++;
        -: 1910:        
        -: 1911:    }                                                                              
        -: 1912:                                                                                   
        1: 1913:} /* End of CFE_ES_RestartCmd() */ 
        -: 1914:
        -: 1915:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */              
        -: 1916:/*                                                                 */              
        -: 1917:/* CFE_ES_DeleteCDSCmd() -- Delete Specified Critical Data Store   */              
        -: 1918:/*                                                                 */              
        -: 1919:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */              
        -: 1920:                                                                                   
        -: 1921:void CFE_ES_DeleteCDSCmd(CFE_SB_MsgPtr_t Msg)                                  
        5: 1922:{                                                                                  
        5: 1923:    uint16 ExpectedLength = sizeof(CFE_ES_DeleteCDSCmd_t);                     
        -: 1924:    int32   Status;
        -: 1925:                                                                                   
        -: 1926:    /*                                                                             
        -: 1927:    ** Verify command packet length.                                               
        -: 1928:    */                                                                             
        5: 1929:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))                               
        -: 1930:    {                                                                              
        5: 1931:        CFE_ES_DeleteCDSCmd_t *cmd = (CFE_ES_DeleteCDSCmd_t *) Msg;
        -: 1932:        
        5: 1933:        Status = CFE_ES_DeleteCDS(cmd->CdsName, FALSE);
        -: 1934:        
        5: 1935:        if (Status == CFE_ES_CDS_WRONG_TYPE_ERR)
        -: 1936:        {
        1: 1937:            CFE_EVS_SendEvent(CFE_ES_CDS_DELETE_TBL_ERR_EID, CFE_EVS_ERROR,
        -: 1938:                              "CDS '%s' is a Critical Table CDS. Must be deleted via TBL Command", 
        -: 1939:                              cmd->CdsName);
        -: 1940:
        1: 1941:            CFE_ES_TaskData.ErrCounter++;      
        -: 1942:        }
        4: 1943:        else if (Status == CFE_ES_CDS_OWNER_ACTIVE_ERR)
        -: 1944:        {
        1: 1945:            CFE_EVS_SendEvent(CFE_ES_CDS_OWNER_ACTIVE_EID, CFE_EVS_ERROR,        
        -: 1946:                             "CDS '%s' not deleted because owning app is active", cmd->CdsName);
        -: 1947:                             
        1: 1948:            CFE_ES_TaskData.ErrCounter++;
        -: 1949:        }
        3: 1950:        else if (Status == CFE_ES_CDS_NOT_FOUND_ERR)
        -: 1951:        {
        1: 1952:            CFE_EVS_SendEvent(CFE_ES_CDS_NAME_ERR_EID, CFE_EVS_ERROR,        
        -: 1953:                             "Unable to locate '%s' in CDS Registry", cmd->CdsName);
        -: 1954:                             
        1: 1955:            CFE_ES_TaskData.ErrCounter++;
        -: 1956:        }
        2: 1957:        else if (Status != CFE_SUCCESS)
        -: 1958:        {
        1: 1959:            CFE_EVS_SendEvent(CFE_ES_CDS_DELETE_ERR_EID, CFE_EVS_ERROR,
        -: 1960:                              "Error while deleting '%s' from CDS, See SysLog.(Err=0x%08X)", 
        -: 1961:                              cmd->CdsName, Status);
        -: 1962:
        1: 1963:            CFE_ES_TaskData.ErrCounter++;      
        -: 1964:        }
        -: 1965:        else
        -: 1966:        {
        1: 1967:            CFE_EVS_SendEvent(CFE_ES_CDS_DELETED_INFO_EID, CFE_EVS_INFORMATION,
        -: 1968:                              "Successfully removed '%s' from CDS", cmd->CdsName);
        -: 1969:
        1: 1970:            CFE_ES_TaskData.CmdCounter++;      
        -: 1971:        }
        -: 1972:    }
        -: 1973:
        5: 1974:} /* End of CFE_ES_DeleteCDSCmd() */ 
        -: 1975:
        -: 1976:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */              
        -: 1977:/*                                                                 */              
        -: 1978:/* CFE_ES_TlmPoolStatsCmd() -- Telemeter Memory Pool Statistics    */              
        -: 1979:/*                                                                 */
        -: 1980:/* Note: The "Application" parameter of the                        */ 
        -: 1981:/*       CFE_ES_TlmPoolSatatsCmd_t structure is not used.          */
        -: 1982:/*                                                                 */              
        -: 1983:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */              
        -: 1984:                                                                                   
        -: 1985:void CFE_ES_TlmPoolStatsCmd(CFE_SB_MsgPtr_t Msg)                                  
        2: 1986:{                                                                                  
        2: 1987:    uint16                    ExpectedLength = sizeof(CFE_ES_TlmPoolStatsCmd_t);                     
        -: 1988:    CFE_ES_TlmPoolStatsCmd_t *Cmd;
        -: 1989:    boolean                   ValidHandle;
        -: 1990:                                                                                   
        -: 1991:    /*                                                                             
        -: 1992:    ** Verify command packet length.                                               
        -: 1993:    */                                                                             
        2: 1994:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))                               
        -: 1995:    {                                                                              
        2: 1996:        Cmd = (CFE_ES_TlmPoolStatsCmd_t *) Msg;
        -: 1997:        
        -: 1998:        /* Verify the handle to make sure it is legit */
        2: 1999:        ValidHandle = CFE_ES_ValidateHandle(Cmd->PoolHandle);
        -: 2000:        
        2: 2001:        if (ValidHandle)
        -: 2002:        {
        -: 2003:            /* Extract the memory statistics from the memory pool */
        1: 2004:            CFE_ES_GetMemPoolStats(&CFE_ES_TaskData.MemStatsPacket.PoolStats, Cmd->PoolHandle);
        -: 2005:            
        -: 2006:            /* Echo the specified pool handle in the telemetry packet */
        1: 2007:            CFE_ES_TaskData.MemStatsPacket.PoolHandle = Cmd->PoolHandle;
        -: 2008:            
        -: 2009:            /*
        -: 2010:            ** Send memory statistics telemetry packet.
        -: 2011:            */
        1: 2012:            CFE_SB_TimeStampMsg((CFE_SB_Msg_t *) &CFE_ES_TaskData.MemStatsPacket);
        1: 2013:            CFE_SB_SendMsg((CFE_SB_Msg_t *) &CFE_ES_TaskData.MemStatsPacket);
        -: 2014:
        1: 2015:            CFE_ES_TaskData.CmdCounter++;      
        1: 2016:            CFE_EVS_SendEvent(CFE_ES_TLM_POOL_STATS_INFO_EID, CFE_EVS_DEBUG,
        -: 2017:                              "Successfully telemetered memory pool stats for 0x%08X", Cmd->PoolHandle);
        -: 2018:        }
        -: 2019:        else
        -: 2020:        {
        1: 2021:            CFE_ES_TaskData.ErrCounter++;      
        1: 2022:            CFE_EVS_SendEvent(CFE_ES_INVALID_POOL_HANDLE_ERR_EID, CFE_EVS_ERROR,
        -: 2023:                              "Cannot telemeter memory pool stats. Illegal Handle (0x%08X)", 
        -: 2024:                              Cmd->PoolHandle);
        -: 2025:        }
        -: 2026:    }
        -: 2027:
        2: 2028:} /* End of CFE_ES_TlmPoolStatsCmd() */ 
        -: 2029:
        -: 2030:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */              
        -: 2031:/*                                                                 */              
        -: 2032:/* CFE_ES_DumpCDSRegCmd() -- Dump CDS Registry to a file           */              
        -: 2033:/*                                                                 */              
        -: 2034:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */              
        -: 2035:                                                                                   
        -: 2036:void CFE_ES_DumpCDSRegCmd( const CFE_SB_Msg_t *MessagePtr )
        4: 2037:{
        -: 2038:    CFE_FS_Header_t               StdFileHeader;
        -: 2039:    int32                         FileDescriptor;
        -: 2040:    int32                         Status;
        4: 2041:    int16                         RegIndex=0;
        4: 2042:    const CFE_ES_DumpCDSRegCmd_t *CmdPtr = (const CFE_ES_DumpCDSRegCmd_t *) MessagePtr;
        -: 2043:    char                          DumpFilename[OS_MAX_PATH_LEN];
        -: 2044:    CFE_ES_CDS_RegRec_t          *RegRecPtr;
        -: 2045:    CFE_ES_CDSRegDumpRec_t        DumpRecord;
        4: 2046:    int32                         FileSize=0;
        4: 2047:    int32                         NumEntries=0;
        -: 2048:
        -: 2049:    /* Copy the commanded filename into local buffer to ensure size limitation and to allow for modification */
        4: 2050:    CFE_PSP_MemCpy(DumpFilename, (void *)CmdPtr->DumpFilename, OS_MAX_PATH_LEN);
        -: 2051:    
        -: 2052:    /* Check to see if a default filename should be used */
        4: 2053:    if (DumpFilename[0] == '\0')
        -: 2054:    {
        4: 2055:        strncpy(DumpFilename, CFE_ES_DEFAULT_CDS_REG_DUMP_FILE, OS_MAX_PATH_LEN);
        -: 2056:    }
        -: 2057:
        -: 2058:    /* Make sure all strings are null terminated before attempting to process them */
        4: 2059:    DumpFilename[OS_MAX_PATH_LEN-1] = '\0';
        -: 2060:
        -: 2061:    /* Create a new dump file, overwriting anything that may have existed previously */
        4: 2062:    FileDescriptor = OS_creat(DumpFilename, OS_WRITE_ONLY);
        -: 2063:
        4: 2064:    if (FileDescriptor >= OS_FS_SUCCESS)
        -: 2065:    {
        -: 2066:        /* Initialize the standard cFE File Header for the Dump File */
        3: 2067:        StdFileHeader.SubType = CFE_FS_ES_CDS_REG_SUBTYPE;
        3: 2068:        strcpy(&StdFileHeader.Description[0], "CDS Registry");
        -: 2069:
        -: 2070:        /* Output the Standard cFE File Header to the Dump File */
        3: 2071:        Status = CFE_FS_WriteHeader(FileDescriptor, &StdFileHeader);
        -: 2072:        
        -: 2073:        /* Maintain statistics of amount of data written to file */
        3: 2074:        FileSize += Status;
        -: 2075:
        3: 2076:        if (Status == sizeof(CFE_FS_Header_t))
        -: 2077:        {
        2: 2078:            Status = sizeof(CFE_ES_CDSRegDumpRec_t);
      517: 2079:            while ((RegIndex < CFE_ES_CDS_MAX_NUM_ENTRIES) && (Status == sizeof(CFE_ES_CDSRegDumpRec_t)))
        -: 2080:            {
        -: 2081:                /* Make a pointer to simplify code look and to remove redundant indexing into registry */
      513: 2082:                RegRecPtr = &CFE_ES_Global.CDSVars.Registry[RegIndex];
        -: 2083:
        -: 2084:                /* Check to see if the Registry entry is empty */
      513: 2085:                if (RegRecPtr->Taken == TRUE)
        -: 2086:                {
        -: 2087:                    /* Fill CDS Registry Dump Record with relevant information */
        2: 2088:                    DumpRecord.Size             = RegRecPtr->Size;
        2: 2089:                    DumpRecord.Handle           = RegRecPtr->MemHandle;
        2: 2090:                    DumpRecord.Table            = RegRecPtr->Table;
        2: 2091:                    DumpRecord.ByteAlignSpare1  = 0;
        -: 2092:                    
        -: 2093:                    /* Zero character arrays to remove garbage text */
        2: 2094:                    CFE_PSP_MemSet(DumpRecord.Name, 0, CFE_ES_CDS_MAX_FULL_NAME_LEN);
        2: 2095:                    strncpy(DumpRecord.Name, RegRecPtr->Name, CFE_ES_CDS_MAX_FULL_NAME_LEN);
        -: 2096:
        -: 2097:                    /* Output Registry Dump Record to Registry Dump File */
        2: 2098:                    Status = OS_write(FileDescriptor,
        -: 2099:                                      &DumpRecord,
        -: 2100:                                      sizeof(CFE_ES_CDSRegDumpRec_t));
        -: 2101:                    
        2: 2102:                    FileSize += Status;
        2: 2103:                    NumEntries++;      
        -: 2104:                }
        -: 2105:
        -: 2106:                /* Look at the next entry in the Registry */
      513: 2107:                RegIndex++;
        -: 2108:            }
        -: 2109:
        2: 2110:            if (Status == sizeof(CFE_ES_CDSRegDumpRec_t))
        -: 2111:            {
        1: 2112:                CFE_EVS_SendEvent(CFE_ES_CDS_REG_DUMP_INF_EID,
        -: 2113:                                  CFE_EVS_DEBUG,
        -: 2114:                                  "Successfully dumped CDS Registry to '%s':Size=%d,Entries=%d",
        -: 2115:                                  DumpFilename, FileSize, NumEntries);
        -: 2116:
        -: 2117:                /* Increment Successful Command Counter */
        1: 2118:                CFE_ES_TaskData.CmdCounter++;      
        -: 2119:            }
        -: 2120:            else
        -: 2121:            {
        1: 2122:                CFE_EVS_SendEvent(CFE_ES_CDS_DUMP_ERR_EID,
        -: 2123:                                  CFE_EVS_ERROR,
        -: 2124:                                  "Error writing CDS Registry to '%s', Status=0x%08X",
        -: 2125:                                  DumpFilename, Status);
        -: 2126:                            
        -: 2127:                /* Increment Command Error Counter */      
        1: 2128:                CFE_ES_TaskData.ErrCounter++;      
        -: 2129:            }
        -: 2130:        }
        -: 2131:        else
        -: 2132:        {
        1: 2133:            CFE_EVS_SendEvent(CFE_ES_WRITE_CFE_HDR_ERR_EID,
        -: 2134:                              CFE_EVS_ERROR,
        -: 2135:                              "Error writing cFE File Header to '%s', Status=0x%08X",
        -: 2136:                              DumpFilename, Status);
        -: 2137:                            
        -: 2138:            /* Increment Command Error Counter */      
        1: 2139:            CFE_ES_TaskData.ErrCounter++;      
        -: 2140:        }
        -: 2141:
        -: 2142:        /* We are done outputting data to the dump file.  Close it. */
        3: 2143:        OS_close(FileDescriptor);
        -: 2144:    }
        -: 2145:    else
        -: 2146:    {
        1: 2147:        CFE_EVS_SendEvent(CFE_ES_CREATING_CDS_DUMP_ERR_EID,
        -: 2148:                          CFE_EVS_ERROR,
        -: 2149:                          "Error creating CDS dump file '%s', Status=0x%08X",
        -: 2150:                          DumpFilename, FileDescriptor);
        -: 2151:                            
        -: 2152:        /* Increment Command Error Counter */      
        1: 2153:        CFE_ES_TaskData.ErrCounter++;      
        -: 2154:    }
        -: 2155:    
        4: 2156:} /* End of CFE_ES_DumpCDSRegCmd() */
        -: 2157:
        -: 2158:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 2159:/*                                                                 */
        -: 2160:/* CFE_ES_FileWriteByteCntErr() -- Send event to inform ground that*/
        -: 2161:/*                                a byte count discrepancy has been*/
        -: 2162:/*                                detected during the file write   */
        -: 2163:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 2164:void CFE_ES_FileWriteByteCntErr(char *Filename,uint32 Requested,uint32 Actual)
       13: 2165:{
        -: 2166:
       13: 2167:    CFE_EVS_SendEvent(CFE_ES_FILEWRITE_ERR_EID,CFE_EVS_ERROR,
        -: 2168:                      "File write,byte cnt err,file %s,request=%d,actual=%d",
        -: 2169:                       Filename,Requested,Actual);
        -: 2170:
        -: 2171:
       13: 2172:}/* End of CFE_ES_FileWriteByteCntErr() */                                                
        -: 2173:
        -: 2174:/************************/
        -: 2175:/*  End of File Comment */
        -: 2176:/************************/
        -: 2177:
        -: 2178:
