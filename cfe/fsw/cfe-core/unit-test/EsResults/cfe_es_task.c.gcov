        -:    0:Source:/home/jdagostino/CProj/CFS/MKS/cfs-mission/cfe/fsw/cfe-core/src/es/cfe_es_task.c
        -:    0:Graph:cfe_es_task.gcno
        -:    0:Data:cfe_es_task.gcda
        -:    0:Runs:1
        -:    0:Programs:11
        -:    1:/*
        -:    2:**  File:
        -:    3:**  cfe_es_task.c
        -:    4:**  $Id: cfe_es_task.c.gcov 1.3 2010/11/04 17:46:40EDT jmdagost Exp  $
        -:    5:**
        -:    6:**      Copyright (c) 2004-2006, United States government as represented by the
        -:    7:**      administrator of the National Aeronautics Space Administration.
        -:    8:**      All rights reserved. This software(cFE) was created at NASA's Goddard
        -:    9:**      Space Flight Center pursuant to government contracts.
        -:   10:**
        -:   11:**      This software may be used only pursuant to a United States government
        -:   12:**      sponsored project and the United States government may not be charged
        -:   13:**      for use thereof.
        -:   14:**
        -:   15:**
        -:   16:**  Purpose:
        -:   17:**  cFE Executive Services (ES) task
        -:   18:**
        -:   19:**  References:
        -:   20:**     Flight Software Branch C Coding Standard Version 1.0a
        -:   21:**     cFE Flight Software Application Developers Guide
        -:   22:**
        -:   23:**  Notes:
        -:   24:**
        -:   25:** $Log: cfe_es_task.c.gcov  $
        -:   25:** Revision 1.3 2010/11/04 17:46:40EDT jmdagost 
        -:   25:** Updated unit test results.
        -:   26:** Revision 1.10 2009/08/04 13:34:05EDT aschoeni 
        -:   27:** Added heap information to ES telemetry
        -:   28:** Revision 1.9 2009/07/28 16:40:19EDT jmdagost 
        -:   29:** Replaced reference to ComputeChecksum with CalculateCRC.
        -:   30:** Revision 1.8 2009/06/10 09:09:02EDT acudmore 
        -:   31:** Converted OS_Mem* and OS_BSP* API to CFE_PSP_* API
        -:   32:** Revision 1.7 2009/06/04 16:45:36EDT rmcgraw 
        -:   33:** Fixed compiler error in version event
        -:   34:** Revision 1.6 2009/06/04 11:00:29EDT rmcgraw 
        -:   35:** DCR8290:1 Added PSP Version to event
        -:   36:** Revision 1.5 2008/07/31 15:41:36EDT apcudmore 
        -:   37:** Added execution counter API:
        -:   38:**   -- Added execution counter to ES internal task data
        -:   39:**   -- Added code to increment counter in RunLoop
        -:   40:**   -- Added code to report counter in GetInfo APIs
        -:   41:**   -- Added API to increment counter for child tasks
        -:   42:**   -- Added code to cFE Core apps to increment counters.
        -:   43:** Revision 1.4 2008/07/28 14:11:29EDT apcudmore 
        -:   44:** Changed cFE Kernel Text segment checksum to cFE Core checksum in housekeeping.
        -:   45:** Revision 1.3 2008/06/26 15:41:52EDT apcudmore 
        -:   46:** Added public CFE_ES_GetAppInfo API.
        -:   47:** Moved the old API to CFE_ES_GetAppInfoInternal
        -:   48:** -- May merge these two in the near future.
        -:   49:** Revision 1.2 2008/06/20 15:40:29EDT apcudmore 
        -:   50:** Added support for OSAL based module loader
        -:   51:**  - Removed calls and references to the BSP based module loader
        -:   52:** Revision 1.1 2008/04/17 08:05:09EDT ruperera 
        -:   53:** Member added to tlserver3 project /MKS-CFE-PROJECT/fsw/cfe-core/src/es
        -:   54:** Revision 1.107 2008/01/24 09:06:21EST njyanchik 
        -:   55:** Removed comments
        -:   56:** Revision 1.106 2008/01/24 08:54:07EST njyanchik 
        -:   57:** I added this:
        -:   58:** 
        -:   59:**         CFE_ES_ResetDataPtr->ERLogEntries = 0;
        -:   60:** 
        -:   61:** to CFE_ES_ClearERlogCmd so that the number of entries are cleared.
        -:   62:** Revision 1.105 2007/09/25 10:04:31EDT apcudmore 
        -:   63:** Created new config parameter for default filename for Query All Tasks cmd.
        -:   64:** Revision 1.104 2007/09/20 10:52:58EDT apcudmore 
        -:   65:** Added Query All Tasks command, file definition, events, error codes etc.
        -:   66:** Revision 1.103 2007/09/18 16:39:10EDT apcudmore 
        -:   67:** Updated ES invalid command length event message to make it clear.
        -:   68:** Revision 1.102 2007/08/31 10:57:10EDT rjmcgraw 
        -:   69:** Changes to eliminate perl script
        -:   70:** Revision 1.101 2007/06/01 11:01:12EDT dlkobe 
        -:   71:** Corrected unassigned Pool Handle in Mem Pool Stats Telemetry Packet
        -:   72:** Revision 1.100 2007/05/25 11:55:42EDT apcudmore 
        -:   73:** Error Handling updates
        -:   74:**    - CFE_ES_GetAppInfo returns void
        -:   75:**    - added app ID range check in RestartApp
        -:   76:**  
        -:   77:** Revision 1.99 2007/05/15 11:11:12EDT rjmcgraw 
        -:   78:** Changed syslog msgs to be consistent with other tasks
        -:   79:** Revision 1.98 2007/05/14 15:58:45EDT apcudmore 
        -:   80:** Added runtime error detection back in to the ES main task.
        -:   81:** Revision 1.97 2007/05/14 15:43:46EDT apcudmore 
        -:   82:** Cleaned up events and disabled debug code for application restart.
        -:   83:** Revision 1.95 2007/05/11 10:30:13EDT rjmcgraw 
        -:   84:** DCR2987:4 Added return checking on init event and version event
        -:   85:** Revision 1.94 2007/05/09 12:41:02EDT dlkobe 
        -:   86:** Added processing for Dump CDS Registry Command
        -:   87:** Revision 1.92 2007/05/07 11:59:37EDT apcudmore 
        -:   88:** Removed SB Pipe error telemetry point
        -:   89:** Handle SB error with sys log message
        -:   90:** Revision 1.91 2007/05/04 20:22:23EDT dlkobe 
        -:   91:** Corrected prototype errors and added missing event message IDs
        -:   92:** Revision 1.90 2007/05/04 20:07:52EDT dlkobe 
        -:   93:** Added command to telemeter memory pool statistics
        -:   94:** Revision 1.89 2007/05/04 15:52:40EDT dlkobe 
        -:   95:** Modified CFE_ES_DeleteCDSCmd to make use of new CFE_ES_DeleteCDS function
        -:   96:** Revision 1.88 2007/05/03 14:34:59EDT dlkobe 
        -:   97:** Added test to prevent Delete CDS command from deleting a Critical Table Image from CDS
        -:   98:** Revision 1.87 2007/04/28 15:57:00EDT dlkobe 
        -:   99:** Added "cfe_es_cds.h" includes to resolve sudden errors.
        -:  100:** Revision 1.86 2007/04/27 15:55:15EDT rjmcgraw 
        -:  101:** DCR2987 Moved call to CFE_ES_RegisterApp into TaskInit and checked return for err
        -:  102:** Revision 1.85 2007/04/27 15:41:13EDT rjmcgraw 
        -:  103:** DCR2987:4 Standardize task init error code
        -:  104:** Revision 1.84 2007/04/25 11:57:05EDT apcudmore 
        -:  105:** Implemented "Back End" of Application Restart and Delete.
        -:  106:** Changes include all ES Cleanup code to delete App and Task Resources.
        -:  107:** Revision 1.83 2007/04/17 11:00:27EDT rjmcgraw 
        -:  108:** Copy DataToWrite into ES HK Pkt
        -:  109:** Revision 1.82 2007/04/13 16:26:00EDT apcudmore 
        -:  110:** Updated how ES scans its App table. It will now scan after processing a 
        -:  111:** ground/external command.
        -:  112:** Revision 1.81 2007/04/12 13:40:58EDT apcudmore 
        -:  113:** Added system log messages to ES init failures.
        -:  114:** Revision 1.80 2007/04/12 10:37:18EDT apcudmore 
        -:  115:** Added support for ES task to call CFE_ES_ExitApp on initialization and 
        -:  116:** runtime failure.
        -:  117:**
        -:  118:*/
        -:  119:
        -:  120:
        -:  121:/*
        -:  122:** Includes
        -:  123:*/
        -:  124:#include "cfe.h"
        -:  125:#include "cfe_platform_cfg.h"
        -:  126:#include "cfe_es_version.h"
        -:  127:#include "cfe_es_global.h"
        -:  128:#include "cfe_es_apps.h"
        -:  129:#include "cfe_es_events.h"
        -:  130:#include "cfe_es_verify.h"
        -:  131:#include "cfe_es_task.h"
        -:  132:#include "cfe_es_shell.h"
        -:  133:#include "cfe_es_log.h"
        -:  134:#include "cfe_es_cds.h"
        -:  135:#include "cfe_fs.h"
        -:  136:#include "cfe_psp.h"
        -:  137:
        -:  138:#include <string.h>
        -:  139:
        -:  140:/*
        -:  141:** Defines
        -:  142:*/
        -:  143:
        -:  144:/* 
        -:  145:** This define should be put in the OS API headers -- Right now it matches what the OS API uses 
        -:  146:*/
        -:  147:#define OS_MAX_PRIORITY 255 
        -:  148:
        -:  149:/*
        -:  150:** Executive Services (ES) task global data.
        -:  151:*/
        -:  152:CFE_ES_TaskData_t CFE_ES_TaskData;
        -:  153:extern CFE_ES_PerfLogDump_t    CFE_ES_PerfLogDumpStatus;
        -:  154:
        -:  155:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  156:/*                                                                 */
        -:  157:/* CFE_ES_TaskMain() -- Task entry point and main process loop     */
        -:  158:/*                                                                 */
        -:  159:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  160:
        -:  161:void CFE_ES_TaskMain(void)
        2:  162:{
        -:  163:    int32   Status;
        2:  164:    uint32  TimeOut = CFE_ES_APP_SCAN_RATE;
        2:  165:    uint32  AppRunStatus = CFE_ES_APP_RUN;
        -:  166:
        -:  167:    
        -:  168:    /*
        -:  169:    ** Performance Time Stamp Entry
        -:  170:    */
        2:  171:    CFE_ES_PerfLogEntry(CFE_ES_MAIN_PERF_ID);
        -:  172:
        -:  173:    /*
        -:  174:    ** Perform task specific initialization.
        -:  175:    */
        2:  176:    Status = CFE_ES_TaskInit();
        2:  177:    if ( Status != CFE_SUCCESS )
        -:  178:    {
        -:  179:       /*
        -:  180:       ** Create a syslog entry
        -:  181:       */
        1:  182:       CFE_ES_WriteToSysLog("ES:Application Init Failed,RC=0x%08X\n", Status);
        -:  183:      
        -:  184:
        -:  185:       /*
        -:  186:       ** Allow Core App to Exit 
        -:  187:       */
        1:  188:       AppRunStatus = CFE_ES_CORE_APP_INIT_ERROR;
        -:  189:       
        -:  190:    } /* end if */
        -:  191:
        -:  192:    /*
        -:  193:    ** Main process loop
        -:  194:    */
        7:  195:    while (AppRunStatus == CFE_ES_APP_RUN)
        -:  196:    {
        -:  197:        /*
        -:  198:        ** Increment the main task execution counter
        -:  199:        **  This is normally done in the CFE_ES_RunLoop call, but
        -:  200:        **  currently CFE Child tasks and the cFE core tasks do not
        -:  201:        **  use the RunLoop call.
        -:  202:        */
        3:  203:        CFE_ES_IncrementTaskCounter();
        -:  204:        
        -:  205:        /*
        -:  206:        ** Performance Time Stamp Exit
        -:  207:        */
        3:  208:        CFE_ES_PerfLogExit(CFE_ES_MAIN_PERF_ID);
        -:  209:
        -:  210:        /*
        -:  211:        ** Wait for the next Software Bus message.
        -:  212:        */
        3:  213:        Status = CFE_SB_RcvMsg(&CFE_ES_TaskData.MsgPtr,
        -:  214:                                  CFE_ES_TaskData.CmdPipe,
        -:  215:                                  TimeOut);
        -:  216:
        -:  217:        /*
        -:  218:        ** Performance Time Stamp Entry
        -:  219:        */
        3:  220:        CFE_ES_PerfLogEntry(CFE_ES_MAIN_PERF_ID);
        -:  221:
        -:  222:        /*
        -:  223:        ** Scan the App table for Application Deletion requests
        -:  224:        */
        3:  225:        if ( Status == CFE_SB_TIME_OUT )
        -:  226:        {
        1:  227:           CFE_ES_ScanAppTable();
        -:  228:        }
        2:  229:        else if (Status == CFE_SUCCESS)
        -:  230:        {
        -:  231:           /*
        -:  232:           ** Process Software Bus message.
        -:  233:           */
        1:  234:           CFE_ES_TaskPipe(CFE_ES_TaskData.MsgPtr);
        -:  235:           
        -:  236:           /*
        -:  237:           ** Scan the App Table for changes after processing a command
        -:  238:           */
        1:  239:           CFE_ES_ScanAppTable();
        -:  240:        }
        -:  241:        else
        -:  242:        {
        -:  243:            /*
        -:  244:            ** SB Error: Write a SysLog Message 
        -:  245:            */
        1:  246:            CFE_ES_WriteToSysLog("ES:Error reading cmd pipe,RC=0x%08X\n",Status);
        -:  247:
        -:  248:            /*
        -:  249:            ** Allow Core App to Exit 
        -:  250:            */
        1:  251:            AppRunStatus = CFE_ES_CORE_APP_RUNTIME_ERROR;
        -:  252:
        -:  253:        }  /* end if */
        -:  254:        
        -:  255:    } /* end while */    
        -:  256:    
        -:  257:    /*
        -:  258:    ** Performance Time Stamp Exit
        -:  259:    */
        2:  260:    CFE_ES_PerfLogExit(CFE_ES_MAIN_PERF_ID);
        -:  261:       
        -:  262:    /*
        -:  263:    ** Exit the application, CFE_ES_ExitApp will not return.
        -:  264:    */
        2:  265:    CFE_ES_ExitApp(AppRunStatus);
        -:  266:
        2:  267:} /* End of CFE_ES_TaskMain() */
        -:  268:
        -:  269:
        -:  270:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  271:/*                                                                 */
        -:  272:/* CFE_ES_TaskInit() -- ES task initialization                     */
        -:  273:/*                                                                 */
        -:  274:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  275:
        -:  276:int32 CFE_ES_TaskInit(void)
       11:  277:{
        -:  278:    int32   Status;
        -:  279:    uint32  SizeofCfeSegment;
        -:  280:    uint32 *PtrToCfeSegment;
        -:  281:
        -:  282:    /*
        -:  283:    ** Register the Application
        -:  284:    */
       11:  285:    Status = CFE_ES_RegisterApp();
       11:  286:    if ( Status != CFE_SUCCESS )
        -:  287:    {
        2:  288:        CFE_ES_WriteToSysLog("ES:Call to CFE_ES_RegisterApp Failed, RC = 0x%08X\n", Status);
        2:  289:        return(Status);
        -:  290:    }    
        -:  291:
        -:  292:    /*
        -:  293:    ** Initialize task command execution counters
        -:  294:    */
        9:  295:    CFE_ES_TaskData.CmdCounter = 0;
        9:  296:    CFE_ES_TaskData.ErrCounter = 0;
        -:  297:
        -:  298:    /*
        -:  299:    ** Initialize task configuration data
        -:  300:    */
        9:  301:    strcpy(CFE_ES_TaskData.PipeName, "ES_CMD_PIPE");
        9:  302:    CFE_ES_TaskData.PipeDepth = 12;
        -:  303:
        9:  304:    CFE_ES_TaskData.LimitHK   = 2;
        9:  305:    CFE_ES_TaskData.LimitCmd  = 4;
        -:  306:    
        -:  307:    /*
        -:  308:    ** Initialize systemlog to default mode
        -:  309:    */
        9:  310:    CFE_ES_ResetDataPtr->SystemLogMode = CFE_ES_DEFAULT_SYSLOG_MODE;
        -:  311:
        -:  312:    /*
        -:  313:    ** Register event filter table.
        -:  314:    */
        9:  315:    Status = CFE_EVS_Register(NULL,0,CFE_EVS_BINARY_FILTER);
        9:  316:    if ( Status != CFE_SUCCESS )
        -:  317:    {
        1:  318:        CFE_ES_WriteToSysLog("ES:Call to CFE_EVS_Register Failed, RC = 0x%08X\n", Status);
        1:  319:        return(Status);
        -:  320:    }
        -:  321:
        -:  322:    /*
        -:  323:    ** Initialize housekeeping packet (clear user data area)
        -:  324:    */
        8:  325:    CFE_SB_InitMsg(&CFE_ES_TaskData.HkPacket, CFE_ES_HK_TLM_MID, sizeof(CFE_ES_HkPacket_t), TRUE);
        -:  326:
        -:  327:    /*
        -:  328:    ** Initialize shell output packet (clear user data area)
        -:  329:    */
        8:  330:    CFE_SB_InitMsg(&CFE_ES_TaskData.ShellPacket, CFE_ES_SHELL_TLM_MID, sizeof(CFE_ES_ShellPacket_t), TRUE);
        -:  331:
        -:  332:    /*
        -:  333:    ** Initialize single application telemetry packet
        -:  334:    */
        8:  335:    CFE_SB_InitMsg(&CFE_ES_TaskData.OneAppPacket, CFE_ES_APP_TLM_MID, sizeof(CFE_ES_OneAppTlm_t), TRUE);
        -:  336:
        -:  337:    /*
        -:  338:    ** Initialize memory pool statistics telemetry packet
        -:  339:    */
        8:  340:    CFE_SB_InitMsg(&CFE_ES_TaskData.MemStatsPacket, CFE_ES_MEMSTATS_TLM_MID, 
        -:  341:                   sizeof(CFE_ES_PoolStatsTlm_t), TRUE);
        -:  342:
        -:  343:    /*
        -:  344:    ** Create Software Bus message pipe
        -:  345:    */
        8:  346:    Status = CFE_SB_CreatePipe(&CFE_ES_TaskData.CmdPipe, CFE_ES_TaskData.PipeDepth, CFE_ES_TaskData.PipeName);
        8:  347:    if ( Status != CFE_SUCCESS )
        -:  348:    {
        1:  349:        CFE_ES_WriteToSysLog("ES:Cannot Create SB Pipe, RC = 0x%08X\n", Status);
        1:  350:        return(Status);
        -:  351:    }
        -:  352:    
        -:  353:    /*
        -:  354:    ** Subscribe to Housekeeping request commands
        -:  355:    */
        7:  356:    Status = CFE_SB_SubscribeEx(CFE_ES_SEND_HK_MID, CFE_ES_TaskData.CmdPipe,
        -:  357:                                CFE_SB_Default_Qos, CFE_ES_TaskData.LimitHK);
        7:  358:    if ( Status != CFE_SUCCESS )
        -:  359:    {
        1:  360:        CFE_ES_WriteToSysLog("ES:Cannot Subscribe to HK packet, RC = 0x%08X\n", Status);
        1:  361:        return(Status);
        -:  362:    }
        -:  363:
        -:  364:    /*
        -:  365:    ** Subscribe to ES task ground command packets
        -:  366:    */
        6:  367:    Status = CFE_SB_SubscribeEx(CFE_ES_CMD_MID, CFE_ES_TaskData.CmdPipe,
        -:  368:                       CFE_SB_Default_Qos, CFE_ES_TaskData.LimitCmd);
        6:  369:    if ( Status != CFE_SUCCESS )
        -:  370:    {
        1:  371:        CFE_ES_WriteToSysLog("ES:Cannot Subscribe to ES ground commands, RC = 0x%08X\n", Status);
        1:  372:        return(Status);
        -:  373:    }
        -:  374:
        -:  375:    /*
        -:  376:    ** Compute the CRC for the cfe core code segment and place
        -:  377:    ** in ES Housekeeping pkt.   
        -:  378:    */
        5:  379:    Status = CFE_PSP_GetCFETextSegmentInfo( &(PtrToCfeSegment), &SizeofCfeSegment);
        -:  380:   
        5:  381:    if ( Status == OS_SUCCESS ) 
        -:  382:    { 
        4:  383:       CFE_ES_TaskData.HkPacket.CFECoreChecksum = CFE_ES_CalculateCRC(
        -:  384:                                  (void *)(PtrToCfeSegment), SizeofCfeSegment, 0, CFE_ES_DEFAULT_CRC);
        -:  385:    }
        -:  386:    else
        -:  387:    {
        1:  388:       CFE_ES_TaskData.HkPacket.CFECoreChecksum = 0xFFFF;
        -:  389:    }
        -:  390:
        -:  391:    /*
        -:  392:    ** Initialize the version numbers in the ES Housekeeping pkt
        -:  393:    */
        5:  394:    CFE_ES_TaskData.HkPacket.CFEMajorVersion = CFE_MAJOR_VERSION;
        5:  395:    CFE_ES_TaskData.HkPacket.CFEMinorVersion = CFE_MINOR_VERSION;
        5:  396:    CFE_ES_TaskData.HkPacket.CFESubMinorVersion = CFE_SUBMINOR_VERSION;
        5:  397:    CFE_ES_TaskData.HkPacket.OSALMajorVersion = OS_MAJOR_VERSION;
        5:  398:    CFE_ES_TaskData.HkPacket.OSALMinorVersion = OS_MINOR_VERSION;
        -:  399:
        -:  400:    /*
        -:  401:    ** Task startup event message.
        -:  402:    */
        5:  403:    Status = CFE_EVS_SendEvent(CFE_ES_INIT_INF_EID,
        -:  404:                      CFE_EVS_INFORMATION,
        -:  405:                      "cFE ES Initialized");
        5:  406:    if ( Status != CFE_SUCCESS )
        -:  407:    {
        1:  408:        CFE_ES_WriteToSysLog("ES:Error sending init event:RC=0x%08X\n", Status);
        1:  409:        return(Status);
        -:  410:    }                      
        -:  411:
        4:  412:    Status = CFE_EVS_SendEvent(CFE_ES_INITSTATS_INF_EID,
        -:  413:                      CFE_EVS_INFORMATION,
        -:  414:                      "Versions:cFE %d.%d.%d, OSAL %d.%d, PSP %d.%d.%d, chksm %d",
        -:  415:                      CFE_MAJOR_VERSION,CFE_MINOR_VERSION,CFE_SUBMINOR_VERSION,                      
        -:  416:                      CFE_ES_TaskData.HkPacket.OSALMajorVersion,
        -:  417:                      CFE_ES_TaskData.HkPacket.OSALMinorVersion,
        -:  418:                      CFE_PSP_MAJOR_VERSION,CFE_PSP_MINOR_VERSION,CFE_PSP_SUBMINOR_VERSION,
        -:  419:                      CFE_ES_TaskData.HkPacket.CFECoreChecksum);
        4:  420:    if ( Status != CFE_SUCCESS )
        -:  421:    {
        1:  422:        CFE_ES_WriteToSysLog("ES:Error sending version event:RC=0x%08X\n", Status);
        1:  423:        return(Status);
        -:  424:    }
        -:  425:
        3:  426:   return(CFE_SUCCESS);
        -:  427:   
        -:  428:} /* End of CFE_ES_TaskInit() */
        -:  429:
        -:  430:
        -:  431:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  432:/*                                                                 */
        -:  433:/* CFE_ES_TaskPipe() -- Process command pipe message               */
        -:  434:/*                                                                 */
        -:  435:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  436:
        -:  437:void CFE_ES_TaskPipe(CFE_SB_MsgPtr_t Msg)
      103:  438:{
        -:  439:    CFE_SB_MsgId_t MessageID;
        -:  440:    uint16         CommandCode;
        -:  441:
      103:  442:    MessageID = CFE_SB_GetMsgId(Msg);
      103:  443:    switch (MessageID)
        -:  444:    {
        -:  445:        /*
        -:  446:        ** Housekeeping telemetry request
        -:  447:        */
        -:  448:        case CFE_ES_SEND_HK_MID:
        2:  449:            CFE_ES_HousekeepingCmd(Msg);
        2:  450:            break;
        -:  451:
        -:  452:        /*
        -:  453:        ** ES task ground commands
        -:  454:        */
        -:  455:        case CFE_ES_CMD_MID:
        -:  456:
       86:  457:            CommandCode = CFE_SB_GetCmdCode(Msg);
       86:  458:            switch (CommandCode)
        -:  459:            {
        -:  460:                case CFE_ES_NOOP_CC:
        1:  461:                    CFE_ES_NoopCmd(Msg);
        1:  462:                    break;
        -:  463:
        -:  464:                case CFE_ES_RESET_CC:
        1:  465:                    CFE_ES_ResetCmd(Msg);
        1:  466:                    break;
        -:  467:
        -:  468:                case CFE_ES_RESTART_CC:
        2:  469:                    CFE_ES_RestartCmd(Msg);
        2:  470:                    break;
        -:  471:
        -:  472:                case CFE_ES_SHELL_CMD_CC:
        2:  473:                    CFE_ES_ShellCmd(Msg);
        2:  474:                    break;
        -:  475:
        -:  476:                case CFE_ES_START_APP_CC:
       10:  477:                    CFE_ES_StartAppCmd(Msg);
       10:  478:                    break;
        -:  479:
        -:  480:                case CFE_ES_STOP_APP_CC:
        3:  481:                    CFE_ES_StopAppCmd(Msg);
        3:  482:                    break;
        -:  483:
        -:  484:                case CFE_ES_RESTART_APP_CC:
        3:  485:                    CFE_ES_RestartAppCmd(Msg);
        3:  486:                    break;
        -:  487:
        -:  488:                case CFE_ES_RELOAD_APP_CC:
        3:  489:                    CFE_ES_ReloadAppCmd(Msg);
        3:  490:                    break;
        -:  491:
        -:  492:                case CFE_ES_QUERY_ONE_CC:
        3:  493:                    CFE_ES_QueryOneCmd(Msg);
        3:  494:                    break;
        -:  495:
        -:  496:                case CFE_ES_QUERY_ALL_CC:
        6:  497:                    CFE_ES_QueryAllCmd(Msg);
        6:  498:                    break;
        -:  499:
        -:  500:                case CFE_ES_QUERY_ALL_TASKS_CC:
        4:  501:                    CFE_ES_QueryAllTasksCmd(Msg);
        4:  502:                    break;
        -:  503:
        -:  504:                case CFE_ES_CLEAR_SYSLOG_CC:
        1:  505:                    CFE_ES_ClearSyslogCmd(Msg);
        1:  506:                    break;
        -:  507:
        -:  508:                case CFE_ES_WRITE_SYSLOG_CC:
        5:  509:                    CFE_ES_WriteSyslogCmd(Msg);
        5:  510:                    break;
        -:  511:
        -:  512:                case CFE_ES_OVERWRITE_SYSLOG_CC:
        2:  513:                    CFE_ES_OverWriteSyslogCmd(Msg);
        2:  514:                    break;
        -:  515:
        -:  516:                case CFE_ES_CLEAR_ERLOG_CC:
        2:  517:                    CFE_ES_ClearERlogCmd(Msg);
        2:  518:                    break;
        -:  519:
        -:  520:                case CFE_ES_WRITE_ERLOG_CC:
        5:  521:                    CFE_ES_WriteERlogCmd(Msg);
        5:  522:                    break;
        -:  523:
        -:  524:                case CFE_ES_PERF_STARTDATA_CC:
        7:  525:                    CFE_ES_PerfStartDataCmd(Msg);
        7:  526:                    break;
        -:  527:
        -:  528:                case CFE_ES_PERF_STOPDATA_CC:
        5:  529:                    CFE_ES_PerfStopDataCmd(Msg);
        5:  530:                    break;
        -:  531:
        -:  532:                case CFE_ES_PERF_SETFILTERMASK_CC:
        2:  533:                    CFE_ES_PerfSetFilterMaskCmd(Msg);
        2:  534:                    break;
        -:  535:
        -:  536:                case CFE_ES_PERF_SETTRIGMASK_CC:
        3:  537:                    CFE_ES_PerfSetTriggerMaskCmd(Msg);
        3:  538:                    break;
        -:  539:
        -:  540:                case CFE_ES_RESET_PR_COUNT_CC:
        1:  541:                    CFE_ES_ResetPRCountCmd(Msg);
        1:  542:                    break;
        -:  543:
        -:  544:                case CFE_ES_SET_MAX_PR_COUNT_CC:
        1:  545:                    CFE_ES_SetMaxPRCountCmd(Msg);
        1:  546:                    break;
        -:  547:
        -:  548:                case CFE_ES_DELETE_CDS_CC:
        7:  549:                    CFE_ES_DeleteCDSCmd(Msg);
        7:  550:                    break;
        -:  551:
        -:  552:                case CFE_ES_TLM_POOL_STATS_CC:
        2:  553:                    CFE_ES_TlmPoolStatsCmd(Msg);
        2:  554:                    break;
        -:  555:
        -:  556:                case CFE_ES_DUMP_CDS_REG_CC:
        4:  557:                    CFE_ES_DumpCDSRegCmd(Msg);
        4:  558:                    break;
        -:  559:
        -:  560:                default:
        1:  561:                    CFE_EVS_SendEvent(CFE_ES_CC1_ERR_EID, CFE_EVS_ERROR,
        -:  562:                     "Invalid ground command code: ID = 0x%X, CC = %d",
        -:  563:                                      MessageID, CommandCode);
        1:  564:                    CFE_ES_TaskData.ErrCounter++;
        -:  565:                    break;
        -:  566:            }
       86:  567:            break;
        -:  568:
        -:  569:        default:
        -:  570:
       15:  571:            CFE_EVS_SendEvent(CFE_ES_MID_ERR_EID, CFE_EVS_ERROR,
        -:  572:                             "Invalid command pipe message ID: 0x%X",
        -:  573:                              MessageID);
       15:  574:            CFE_ES_TaskData.ErrCounter++;
        -:  575:            break;
        -:  576:    }
        -:  577:
      103:  578:} /* End of CFE_ES_TaskPipe() */
        -:  579:
        -:  580:
        -:  581:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  582:/*                                                                 */
        -:  583:/* CFE_ES_HousekeepingCmd() -- On-board command (HK request)       */
        -:  584:/*                                                                 */
        -:  585:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  586:
        -:  587:void CFE_ES_HousekeepingCmd(CFE_SB_MsgPtr_t Msg)
        2:  588:{
        -:  589:    OS_heap_prop_t HeapProp;
        -:  590:    int32          stat;
        -:  591:
        -:  592:    /*
        -:  593:    ** Get command execution counters, system log entry count & bytes used.
        -:  594:    */
        2:  595:    CFE_ES_TaskData.HkPacket.CmdCounter = CFE_ES_TaskData.CmdCounter;
        2:  596:    CFE_ES_TaskData.HkPacket.ErrCounter = CFE_ES_TaskData.ErrCounter;
        -:  597:
        2:  598:    CFE_ES_TaskData.HkPacket.SysLogBytesUsed = CFE_ES_ResetDataPtr->SystemLogIndex;
        2:  599:    CFE_ES_TaskData.HkPacket.SysLogSize = CFE_ES_SYSTEM_LOG_SIZE;
        2:  600:    CFE_ES_TaskData.HkPacket.SysLogEntries   = CFE_ES_ResetDataPtr->SystemLogEntryNum;
        2:  601:    CFE_ES_TaskData.HkPacket.SysLogMode = CFE_ES_ResetDataPtr->SystemLogMode;
        -:  602:
        2:  603:    CFE_ES_TaskData.HkPacket.ERLogIndex      = CFE_ES_ResetDataPtr->ERLogIndex;
        2:  604:    CFE_ES_TaskData.HkPacket.ERLogEntries    = CFE_ES_ResetDataPtr->ERLogEntries;
        -:  605:    
        2:  606:    CFE_ES_TaskData.HkPacket.RegisteredCoreApps      = CFE_ES_Global.RegisteredCoreApps;
        2:  607:    CFE_ES_TaskData.HkPacket.RegisteredExternalApps  = CFE_ES_Global.RegisteredExternalApps;
        2:  608:    CFE_ES_TaskData.HkPacket.RegisteredTasks         = CFE_ES_Global.RegisteredTasks;
        2:  609:    CFE_ES_TaskData.HkPacket.RegisteredLibs          = CFE_ES_Global.RegisteredLibs;
        -:  610:
        2:  611:    CFE_ES_TaskData.HkPacket.ResetType = CFE_ES_ResetDataPtr->ResetVars.ResetType;
        2:  612:    CFE_ES_TaskData.HkPacket.ResetSubtype = CFE_ES_ResetDataPtr->ResetVars.ResetSubtype;
        2:  613:    CFE_ES_TaskData.HkPacket.ProcessorResets = CFE_ES_ResetDataPtr->ResetVars.ProcessorResetCount;
        2:  614:    CFE_ES_TaskData.HkPacket.MaxProcessorResets = CFE_ES_ResetDataPtr->ResetVars.MaxProcessorResetCount;
        2:  615:    CFE_ES_TaskData.HkPacket.BootSource = CFE_ES_ResetDataPtr->ResetVars.BootSource;
        -:  616:
        2:  617:    CFE_ES_TaskData.HkPacket.PerfState = CFE_ES_ResetDataPtr->Perf.MetaData.State;
        2:  618:    CFE_ES_TaskData.HkPacket.PerfMode = CFE_ES_ResetDataPtr->Perf.MetaData.Mode;
        2:  619:    CFE_ES_TaskData.HkPacket.PerfTriggerCount = CFE_ES_ResetDataPtr->Perf.MetaData.TriggerCount;
        2:  620:    CFE_ES_TaskData.HkPacket.PerfDataStart = CFE_ES_ResetDataPtr->Perf.MetaData.DataStart;
        2:  621:    CFE_ES_TaskData.HkPacket.PerfDataEnd = CFE_ES_ResetDataPtr->Perf.MetaData.DataEnd;
        2:  622:    CFE_ES_TaskData.HkPacket.PerfDataCount = CFE_ES_ResetDataPtr->Perf.MetaData.DataCount;
        2:  623:    CFE_ES_TaskData.HkPacket.PerfDataToWrite = CFE_ES_PerfLogDumpStatus.DataToWrite;
        2:  624:    CFE_PSP_MemCpy ( (void *)CFE_ES_TaskData.HkPacket.PerfTriggerMask, 
        -:  625:                (void *)CFE_ES_ResetDataPtr->Perf.MetaData.TriggerMask,
        -:  626:                ((CFE_ES_PERF_MAX_IDS / 32) * 4 ));
        2:  627:    CFE_PSP_MemCpy ( (void *)CFE_ES_TaskData.HkPacket.PerfFilterMask, 
        -:  628:                (void *)CFE_ES_ResetDataPtr->Perf.MetaData.FilterMask,
        -:  629:                ((CFE_ES_PERF_MAX_IDS / 32) * 4 ));
        -:  630:
        2:  631:    stat = OS_HeapGetInfo(&HeapProp);
        -:  632:
        2:  633:    if(stat == OS_SUCCESS)
        -:  634:    {
        1:  635:        CFE_ES_TaskData.HkPacket.HeapBytesFree = HeapProp.free_bytes;
        1:  636:        CFE_ES_TaskData.HkPacket.HeapBlocksFree = HeapProp.free_blocks;
        1:  637:        CFE_ES_TaskData.HkPacket.HeapMaxBlockSize = HeapProp.largest_free_block;
        -:  638:    }
        -:  639:    else
        -:  640:    {
        1:  641:        CFE_ES_TaskData.HkPacket.HeapBytesFree = 0;
        1:  642:        CFE_ES_TaskData.HkPacket.HeapBlocksFree = 0;
        1:  643:        CFE_ES_TaskData.HkPacket.HeapMaxBlockSize = 0;
        -:  644:    }
        -:  645:
        -:  646:    /*
        -:  647:    ** Send housekeeping telemetry packet.
        -:  648:    */
        2:  649:    CFE_SB_TimeStampMsg((CFE_SB_Msg_t *) &CFE_ES_TaskData.HkPacket);
        2:  650:    CFE_SB_SendMsg((CFE_SB_Msg_t *) &CFE_ES_TaskData.HkPacket);
        -:  651:
        -:  652:    /*
        -:  653:    ** This command does not affect the command execution counter.
        -:  654:    */
        -:  655:
        2:  656:} /* End of CFE_ES_HousekeepingCmd() */
        -:  657:
        -:  658:
        -:  659:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  660:/*                                                                 */
        -:  661:/* CFE_ES_NoopCmd() -- ES task ground command (NO-OP)              */
        -:  662:/*                                                                 */
        -:  663:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  664:
        -:  665:void CFE_ES_NoopCmd(CFE_SB_MsgPtr_t Msg)
        1:  666:{
        1:  667:    uint16 ExpectedLength = sizeof(CFE_ES_NoArgsCmd_t);
        -:  668:
        -:  669:    /*
        -:  670:    ** Verify command packet length.
        -:  671:    */
        1:  672:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -:  673:    {
        -:  674:        /*
        -:  675:        ** This command will always succeed.
        -:  676:        */
        1:  677:        CFE_ES_TaskData.CmdCounter++;
        1:  678:        CFE_EVS_SendEvent(CFE_ES_NOOP_INF_EID, CFE_EVS_INFORMATION,
        -:  679:                         "No-op command");
        -:  680:    }
        -:  681:
        1:  682:} /* End of CFE_ES_NoopCmd() */
        -:  683:
        -:  684:
        -:  685:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  686:/*                                                                 */
        -:  687:/* CFE_ES_ResetCmd() -- ES task ground command (reset counters)    */
        -:  688:/*                                                                 */
        -:  689:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  690:
        -:  691:void CFE_ES_ResetCmd(CFE_SB_MsgPtr_t Msg)
        1:  692:{
        1:  693:    uint16 ExpectedLength = sizeof(CFE_ES_NoArgsCmd_t);
        -:  694:
        -:  695:    /*
        -:  696:    ** Verify command packet length.
        -:  697:    */
        1:  698:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -:  699:    {
        1:  700:        CFE_ES_TaskData.CmdCounter = 0;
        1:  701:        CFE_ES_TaskData.ErrCounter = 0;
        -:  702:
        -:  703:        /*
        -:  704:        ** This command will always succeed.
        -:  705:        */
        1:  706:        CFE_EVS_SendEvent(CFE_ES_RESET_INF_EID, CFE_EVS_INFORMATION,
        -:  707:                         "Reset Counters command");
        -:  708:    }
        -:  709:
        1:  710:} /* End of CFE_ES_ResetCmd() */
        -:  711:
        -:  712:
        -:  713:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  714:/*                                                                 */
        -:  715:/* CFE_ES_RestartCmd() -- Restart cFE (may reset processor)        */
        -:  716:/*                                                                 */
        -:  717:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  718:
        -:  719:void CFE_ES_RestartCmd(CFE_SB_MsgPtr_t Msg)
        2:  720:{
        2:  721:    uint16 ExpectedLength = sizeof(CFE_ES_RestartCmd_t);
        -:  722:
        -:  723:    /*
        -:  724:    ** Verify command packet length.
        -:  725:    */
        2:  726:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -:  727:    {
        2:  728:        CFE_ES_RestartCmd_t *cmd = (CFE_ES_RestartCmd_t *) Msg;
        -:  729:
        3:  730:        if ((cmd->RestartType != CFE_ES_PROCESSOR_RESET) &&
        -:  731:            (cmd->RestartType != CFE_ES_POWERON_RESET))
        -:  732:        {
        1:  733:            CFE_ES_TaskData.ErrCounter++;
        1:  734:            CFE_EVS_SendEvent(CFE_ES_BOOT_ERR_EID, CFE_EVS_ERROR,
        -:  735:                             "Invalid cFE restart type: %d",
        -:  736:                              cmd->RestartType);
        -:  737:        }
        -:  738:        else
        -:  739:        {
        -:  740:            /*
        -:  741:            ** This function will not return.
        -:  742:            */
        1:  743:            CFE_ES_ResetCFE(cmd->RestartType);
        -:  744:        }
        -:  745:    }
        -:  746:
        2:  747:} /* End of CFE_ES_RestartCmd() */
        -:  748:
        -:  749:
        -:  750:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  751:/*                                                                 */
        -:  752:/* CFE_ES_ShellCmd() -- Pass thru string to O/S shell              */
        -:  753:/*                                                                 */
        -:  754:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  755:
        -:  756:void CFE_ES_ShellCmd(CFE_SB_MsgPtr_t Msg)
        2:  757:{
        2:  758:    uint16 ExpectedLength = sizeof(CFE_ES_ShellCmd_t);
        -:  759:    int32 Result;
        -:  760:
        -:  761:    /*
        -:  762:    ** Verify command packet length.
        -:  763:    */
        2:  764:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -:  765:    {
        2:  766:        CFE_ES_ShellCmd_t *cmd = (CFE_ES_ShellCmd_t *) Msg;
        -:  767:
        -:  768:        /*
        -:  769:        ** Call the Shell command API
        -:  770:        */
        2:  771:        Result = CFE_ES_ShellOutputCommand((char*)(cmd->CmdString));
        -:  772:
        -:  773:        /*
        -:  774:        ** Send appropriate event message.
        -:  775:        */
        2:  776:        if (Result == CFE_SUCCESS)
        -:  777:        {
        1:  778:            CFE_ES_TaskData.CmdCounter++;
        1:  779:            CFE_EVS_SendEvent(CFE_ES_SHELL_INF_EID, CFE_EVS_INFORMATION,
        -:  780:                             "Invoked shell command: '%s'",
        -:  781:                              cmd->CmdString);
        -:  782:        }
        -:  783:        else
        -:  784:        {
        1:  785:            CFE_ES_TaskData.ErrCounter++;
        1:  786:            CFE_EVS_SendEvent(CFE_ES_SHELL_ERR_EID, CFE_EVS_ERROR,
        -:  787:                       "Failed to invoke shell command: '%s', RC = 0x%08X",
        -:  788:                              cmd->CmdString, Result);
        -:  789:        }
        -:  790:    }
        -:  791:
        2:  792:} /* End of CFE_ES_ShellCmd() */
        -:  793:
        -:  794:
        -:  795:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  796:/*                                                                 */
        -:  797:/* CFE_ES_StartAppCmd() -- Load (and start) single application     */
        -:  798:/*                                                                 */
        -:  799:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  800:
        -:  801:void CFE_ES_StartAppCmd(CFE_SB_MsgPtr_t Msg)
       10:  802:{
       10:  803:    uint16                ExpectedLength = sizeof(CFE_ES_StartAppCmd_t);
       10:  804:    CFE_ES_StartAppCmd_t *cmd            = (CFE_ES_StartAppCmd_t *) Msg;
       10:  805:    uint32                AppID          = 0;
        -:  806:    int32                 Result;
        -:  807:
        -:  808:    /*
        -:  809:    ** Verify command packet length.
        -:  810:    */
       10:  811:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -:  812:    {
        -:  813:    
        -:  814:       /*
        -:  815:       ** Verify command parameters
        -:  816:       */
        -:  817:
       11:  818:       if ((cmd->AppFileName == NULL) || (strlen((char *)cmd->AppFileName) < 4 ))
        -:  819:       {
        1:  820:          CFE_ES_TaskData.ErrCounter++;
        1:  821:          CFE_EVS_SendEvent(CFE_ES_START_INVALID_FILENAME_ERR_EID, CFE_EVS_ERROR,
        -:  822:                           "CFE_ES_StartAppCmd: invalid filename: %s",
        -:  823:                            cmd->AppFileName);
        -:  824:       }
        9:  825:       else if (cmd->AppEntryPoint == NULL)
        -:  826:       {
    #####:  827:          CFE_ES_TaskData.ErrCounter++;
    #####:  828:          CFE_EVS_SendEvent(CFE_ES_START_INVALID_ENTRY_POINT_ERR_EID, CFE_EVS_ERROR,
        -:  829:                           "CFE_ES_StartAppCmd: App Entry Point is NULL.");
        -:  830:       }
        9:  831:       else if (cmd->Application == NULL)
        -:  832:       {
    #####:  833:          CFE_ES_TaskData.ErrCounter++;
    #####:  834:          CFE_EVS_SendEvent(CFE_ES_START_NULL_APP_NAME_ERR_EID, CFE_EVS_ERROR,
        -:  835:                           "CFE_ES_StartAppCmd: App Name is NULL.");
        -:  836:       }
        9:  837:       else if (cmd->StackSize < CFE_ES_DEFAULT_STACK_SIZE)
        -:  838:       {
        1:  839:          CFE_ES_TaskData.ErrCounter++;
        1:  840:          CFE_EVS_SendEvent(CFE_ES_START_STACK_ERR_EID, CFE_EVS_ERROR,
        -:  841:                           "CFE_ES_StartAppCmd: Stack size is less than system Minimum: %d.",
        -:  842:                           CFE_ES_DEFAULT_STACK_SIZE);
        -:  843:       }
        8:  844:       else if (cmd->Priority > OS_MAX_PRIORITY)
        -:  845:       {
        1:  846:          CFE_ES_TaskData.ErrCounter++;
        1:  847:          CFE_EVS_SendEvent(CFE_ES_START_PRIORITY_ERR_EID, CFE_EVS_ERROR,
        -:  848:                           "CFE_ES_StartAppCmd: Priority is too large: %d.",
        -:  849:                           cmd->Priority);
        -:  850:       }
        8:  851:       else if ((cmd->ExceptionAction != CFE_ES_APP_EXCEPTION_RESTART_APP) &&
        -:  852:                (cmd->ExceptionAction != CFE_ES_APP_EXCEPTION_PROC_RESTART ))
        -:  853:       {
        1:  854:          CFE_ES_TaskData.ErrCounter++;
        1:  855:          CFE_EVS_SendEvent(CFE_ES_START_EXC_ACTION_ERR_EID, CFE_EVS_ERROR,
        -:  856:                           "CFE_ES_StartAppCmd: Invalid Exception Action: %d.",
        -:  857:                           cmd->ExceptionAction);
        -:  858:       }
        -:  859:       else
        -:  860:       {
        -:  861:          /*
        -:  862:          ** Invoke application loader/startup function.
        -:  863:          */
        6:  864:          Result = CFE_ES_AppCreate(&AppID, (char *)cmd->AppFileName,
        -:  865:                      (char *)cmd->AppEntryPoint,
        -:  866:                      (char *)cmd->Application,
        -:  867:                      (uint32) cmd->Priority, 
        -:  868:                      (uint32) cmd->StackSize,
        -:  869:                      (uint32) cmd->ExceptionAction);
        -:  870:
        -:  871:          /*
        -:  872:          ** Send appropriate event message
        -:  873:          */
        6:  874:          if (Result == CFE_SUCCESS)
        -:  875:          {
        5:  876:             CFE_ES_TaskData.CmdCounter++;
        5:  877:             CFE_EVS_SendEvent(CFE_ES_START_INF_EID, CFE_EVS_INFORMATION,
        -:  878:                                "Started %s from %s, AppID = %d",
        -:  879:                                 cmd->Application, cmd->AppFileName, AppID);
        -:  880:           }
        -:  881:           else
        -:  882:           {
        1:  883:               CFE_ES_TaskData.ErrCounter++;
        1:  884:               CFE_EVS_SendEvent(CFE_ES_START_ERR_EID, CFE_EVS_ERROR,
        -:  885:                             "Failed to start %s from %s, RC = 0x%08X",
        -:  886:                              cmd->Application, cmd->AppFileName, Result);
        -:  887:           }
        -:  888:           
        -:  889:       } /* End if -- command parameter validation */
        -:  890:
        -:  891:   } /* End if - command length verification */
        -:  892:     
       10:  893:} /* End of CFE_ES_StartAppCmd() */
        -:  894:
        -:  895:
        -:  896:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  897:/*                                                                 */
        -:  898:/* CFE_ES_StopAppCmd() -- Stop single application                  */
        -:  899:/*                                                                 */
        -:  900:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  901:
        -:  902:void CFE_ES_StopAppCmd(CFE_SB_MsgPtr_t Msg)
        3:  903:{
        3:  904:    uint16 ExpectedLength = sizeof(CFE_ES_AppNameCmd_t);
        -:  905:
        -:  906:    /*
        -:  907:    ** Verify command packet length.
        -:  908:    */
        3:  909:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -:  910:    {
        3:  911:        CFE_ES_AppNameCmd_t *cmd = (CFE_ES_AppNameCmd_t *) Msg;
        -:  912:        uint32 AppID;
        -:  913:        int32 Result;
        -:  914:        
        3:  915:        Result = CFE_ES_GetAppIDByName(&AppID, (char *)cmd->Application);
        -:  916:
        3:  917:        if (Result == CFE_SUCCESS)
        -:  918:        {            
        -:  919:            /*
        -:  920:            ** Delete the App
        -:  921:            */
        2:  922:            Result = CFE_ES_DeleteApp(AppID);
        -:  923:
        -:  924:            /*
        -:  925:            ** Send appropriate event message.
        -:  926:            */
        2:  927:            if (Result == CFE_SUCCESS)
        -:  928:            {
        1:  929:                CFE_ES_TaskData.CmdCounter++;
        1:  930:                CFE_EVS_SendEvent(CFE_ES_STOP_DBG_EID, CFE_EVS_DEBUG,
        -:  931:                             "Stop Application %s Initiated.", cmd->Application);
        -:  932:            }
        -:  933:            else
        -:  934:            {
        1:  935:                CFE_ES_TaskData.ErrCounter++;
        1:  936:                CFE_EVS_SendEvent(CFE_ES_STOP_ERR1_EID, CFE_EVS_ERROR,
        -:  937:                             "Stop Application %s Failed, RC = 0x%08X",
        -:  938:                              cmd->Application, Result);
        -:  939:            }
        -:  940:        }
        -:  941:        else
        -:  942:        {
        1:  943:            CFE_ES_TaskData.ErrCounter++;
        1:  944:            CFE_EVS_SendEvent(CFE_ES_STOP_ERR2_EID, CFE_EVS_ERROR,
        -:  945:                              "Stop Application %s, GetAppIDByName failed. RC = 0x%08X.",
        -:  946:                               cmd->Application, Result);            
        -:  947:        }
        -:  948:
        -:  949:    }
        -:  950:
        3:  951:} /* End of CFE_ES_StopAppCmd() */
        -:  952:
        -:  953:
        -:  954:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  955:/*                                                                 */
        -:  956:/* CFE_ES_RestartAppCmd() -- Restart a single application            */
        -:  957:/*                                                                 */
        -:  958:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  959:
        -:  960:void CFE_ES_RestartAppCmd(CFE_SB_MsgPtr_t Msg)
        3:  961:{
        3:  962:    uint16 ExpectedLength = sizeof(CFE_ES_AppNameCmd_t);
        -:  963:
        -:  964:    /*
        -:  965:    ** Verify command packet length.
        -:  966:    */
        3:  967:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -:  968:    {
        3:  969:        CFE_ES_AppNameCmd_t *cmd = (CFE_ES_AppNameCmd_t *) Msg;
        -:  970:
        -:  971:        uint32 AppID;
        3:  972:        int32 Result = CFE_ES_GetAppIDByName(&AppID, (char *)cmd->Application);
        -:  973:
        3:  974:        if (Result == CFE_SUCCESS)
        -:  975:        {
        2:  976:            Result = CFE_ES_RestartApp(AppID);
        -:  977:
        -:  978:            /*
        -:  979:            ** Send appropriate event message.
        -:  980:            */
        2:  981:            if (Result == CFE_SUCCESS)
        -:  982:            {
        1:  983:                CFE_ES_TaskData.CmdCounter++;
        1:  984:                CFE_EVS_SendEvent(CFE_ES_RESTART_APP_DBG_EID, CFE_EVS_DEBUG,
        -:  985:                             "Restart Application %s Initiated.", cmd->Application);
        -:  986:            }
        -:  987:            else
        -:  988:            {
        1:  989:                CFE_ES_TaskData.ErrCounter++;
        1:  990:                CFE_EVS_SendEvent(CFE_ES_RESTART_APP_ERR1_EID, CFE_EVS_ERROR,
        -:  991:                             "Restart Application %s Failed, RC = 0x%08X",
        -:  992:                              cmd->Application, Result);
        -:  993:            }
        -:  994:        }
        -:  995:        else
        -:  996:        {
        1:  997:            CFE_ES_TaskData.ErrCounter++;
        1:  998:            CFE_EVS_SendEvent(CFE_ES_RESTART_APP_ERR2_EID, CFE_EVS_ERROR,
        -:  999:                              "Restart Application %s, GetAppIDByName failed. RC = 0x%08X.",
        -: 1000:                               cmd->Application, Result);            
        -: 1001:        }
        -: 1002:    }
        -: 1003:
        3: 1004:} /* End of CFE_ES_ResetAppCmd() */
        -: 1005:
        -: 1006:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1007:/*                                                                 */
        -: 1008:/* CFE_ES_ReloadAppCmd() -- Reload a single application            */
        -: 1009:/*                                                                 */
        -: 1010:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1011:
        -: 1012:void CFE_ES_ReloadAppCmd(CFE_SB_MsgPtr_t Msg)
        3: 1013:{
        3: 1014:    uint16 ExpectedLength = sizeof(CFE_ES_AppReloadCmd_t);
        -: 1015:
        -: 1016:    /*
        -: 1017:    ** Verify command packet length.
        -: 1018:    */
        3: 1019:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -: 1020:    {
        3: 1021:        CFE_ES_AppReloadCmd_t *cmd = (CFE_ES_AppReloadCmd_t *) Msg;
        -: 1022:        uint32  AppID;
        3: 1023:        int32   Result = CFE_ES_GetAppIDByName(&AppID, (char *)cmd->Application);
        -: 1024:
        3: 1025:        if (Result == CFE_SUCCESS)
        -: 1026:        {
        2: 1027:           Result = CFE_ES_ReloadApp(AppID, (const char *)cmd->AppFileName);
        -: 1028:
        -: 1029:            /*
        -: 1030:            ** Send appropriate event message.
        -: 1031:            */
        2: 1032:            if (Result == CFE_SUCCESS)
        -: 1033:            {
        1: 1034:                CFE_ES_TaskData.CmdCounter++;
        1: 1035:                CFE_EVS_SendEvent(CFE_ES_RELOAD_APP_DBG_EID, CFE_EVS_DEBUG,
        -: 1036:                             "Reload Application %s Initiated.", cmd->Application);
        -: 1037:            }
        -: 1038:            else
        -: 1039:            {
        1: 1040:                CFE_ES_TaskData.ErrCounter++;
        1: 1041:                CFE_EVS_SendEvent(CFE_ES_RELOAD_APP_ERR1_EID, CFE_EVS_ERROR,
        -: 1042:                             "Reload Application %s Failed, RC = 0x%08X",
        -: 1043:                              cmd->Application, Result);
        -: 1044:            }
        -: 1045:        }
        -: 1046:        else
        -: 1047:        {
        1: 1048:            CFE_ES_TaskData.ErrCounter++;
        1: 1049:            CFE_EVS_SendEvent(CFE_ES_RELOAD_APP_ERR2_EID, CFE_EVS_ERROR,
        -: 1050:                              "Reload Application %s, GetAppIDByName failed. RC = 0x%08X.",
        -: 1051:                               cmd->Application, Result);            
        -: 1052:        }
        -: 1053:    }
        -: 1054:
        3: 1055:} /* End of CFE_ES_ReloadAppCmd() */
        -: 1056:
        -: 1057:
        -: 1058:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1059:/*                                                                 */
        -: 1060:/* CFE_ES_QueryOneCmd() -- Request tlm packet with single app data */
        -: 1061:/*                                                                 */
        -: 1062:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1063:
        -: 1064:void CFE_ES_QueryOneCmd(CFE_SB_MsgPtr_t Msg)
        3: 1065:{
        3: 1066:    uint16 ExpectedLength = sizeof(CFE_ES_AppNameCmd_t);
        -: 1067:
        -: 1068:    /*
        -: 1069:    ** Verify command packet length
        -: 1070:    */
        3: 1071:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -: 1072:    {
        3: 1073:        CFE_ES_AppNameCmd_t *cmd = (CFE_ES_AppNameCmd_t *) Msg;
        -: 1074:
        -: 1075:        uint32 AppID;
        3: 1076:        int32 Result = CFE_ES_GetAppIDByName(&AppID, (char *)cmd->Application);
        -: 1077:
        -: 1078:        /*
        -: 1079:        ** Send appropriate event message...
        -: 1080:        */
        3: 1081:        if (Result == CFE_SUCCESS)
        -: 1082:        {
        -: 1083:        
        2: 1084:           CFE_ES_GetAppInfoInternal(AppID, &(CFE_ES_TaskData.OneAppPacket.AppInfo));
        -: 1085:           /*
        -: 1086:           ** Send application status telemetry packet.
        -: 1087:           */
        2: 1088:           CFE_SB_TimeStampMsg((CFE_SB_Msg_t *) &CFE_ES_TaskData.OneAppPacket);
        2: 1089:           Result = CFE_SB_SendMsg((CFE_SB_Msg_t *) &CFE_ES_TaskData.OneAppPacket);
        2: 1090:           if ( Result == CFE_SUCCESS )
        -: 1091:           {
        1: 1092:               CFE_ES_TaskData.CmdCounter++;
        1: 1093:               CFE_EVS_SendEvent(CFE_ES_ONE_APP_EID, CFE_EVS_DEBUG,
        -: 1094:                       "Sent %s application data", cmd->Application);
        -: 1095:           }
        -: 1096:           else
        -: 1097:           {
        1: 1098:               CFE_ES_TaskData.ErrCounter++;
        1: 1099:               CFE_EVS_SendEvent(CFE_ES_ONE_ERR_EID, CFE_EVS_ERROR,
        -: 1100:                          "Failed to send %s application data, RC = 0x%08X",
        -: 1101:                           cmd->Application, Result);
        -: 1102:           }
        -: 1103:        }
        -: 1104:        else
        -: 1105:        {
        1: 1106:            CFE_ES_TaskData.ErrCounter++;
        1: 1107:            CFE_EVS_SendEvent(CFE_ES_ONE_APPID_ERR_EID, CFE_EVS_ERROR,
        -: 1108:                       "Failed to send %s application data: GetAppIDByName Failed, RC = 0x%08X",
        -: 1109:                              cmd->Application, Result);
        -: 1110:        }
        -: 1111:    }
        -: 1112:
        3: 1113:} /* End of CFE_ES_QueryOneCmd() */
        -: 1114:
        -: 1115:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1116:/*                                                                 */
        -: 1117:/* CFE_ES_QueryAllCmd() -- Write all app data to file              */
        -: 1118:/*                                                                 */
        -: 1119:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1120:
        -: 1121:void CFE_ES_QueryAllCmd(CFE_SB_MsgPtr_t Msg)
        6: 1122:{
        -: 1123:
        6: 1124:    uint16                ExpectedLength = sizeof(CFE_ES_QueryAllCmd_t);
        -: 1125:    CFE_FS_Header_t       FileHeader;
        -: 1126:    int32                 FileDescriptor;
        -: 1127:    uint32                i;
        6: 1128:    uint32                EntryCount = 0;
        6: 1129:    uint32                FileSize = 0;
        -: 1130:    int32                 Result;
        -: 1131:    CFE_ES_AppInfo_t      AppInfo;
        6: 1132:    CFE_ES_QueryAllCmd_t  *CmdPtr = (CFE_ES_QueryAllCmd_t *)Msg;
        -: 1133:    char                  QueryAllFilename[OS_MAX_PATH_LEN];
        -: 1134:
        -: 1135:    /*
        -: 1136:    ** Verify command packet length.
        -: 1137:    */
        6: 1138:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -: 1139:    {
        -: 1140:       /* 
        -: 1141:       ** Copy the commanded filename into local buffer to ensure size limitation and to allow for modification 
        -: 1142:       */
        6: 1143:       CFE_PSP_MemCpy(QueryAllFilename, (void *)CmdPtr->QueryAllFileName, OS_MAX_PATH_LEN);
        -: 1144:
        -: 1145:       /* 
        -: 1146:       ** Check to see if a default filename should be used 
        -: 1147:       */
        6: 1148:       if (QueryAllFilename[0] == '\0')
        -: 1149:       {
        5: 1150:           strncpy(QueryAllFilename, CFE_ES_DEFAULT_APP_LOG_FILE, OS_MAX_PATH_LEN);
        -: 1151:       }
        -: 1152:
        -: 1153:       /* 
        -: 1154:       ** Make sure all strings are null terminated before attempting to process them 
        -: 1155:       */
        6: 1156:       QueryAllFilename[OS_MAX_PATH_LEN-1] = '\0';
        -: 1157:
        -: 1158:       /* 
        -: 1159:       ** Check to see if the file already exists 
        -: 1160:       */
        6: 1161:       FileDescriptor = OS_open(QueryAllFilename, OS_READ_ONLY, 0);
        6: 1162:       if (FileDescriptor >= 0)
        -: 1163:       {
        6: 1164:           OS_close(FileDescriptor);
        6: 1165:           OS_remove(QueryAllFilename);
        -: 1166:       }
        -: 1167:
        -: 1168:       /*
        -: 1169:       ** Create ES task log data file
        -: 1170:       */
        6: 1171:       FileDescriptor = OS_creat(QueryAllFilename, OS_WRITE_ONLY);
        6: 1172:       if (FileDescriptor >= 0)
        -: 1173:       {
        -: 1174:          /*
        -: 1175:          ** Initialize cFE file header
        -: 1176:          */
        5: 1177:          CFE_PSP_MemSet(&FileHeader, 0, sizeof(CFE_FS_Header_t));
        5: 1178:          strcpy(FileHeader.Description, CFE_ES_APP_LOG_DESC);
        -: 1179:
        -: 1180:          /*
        -: 1181:          ** Write the File header SubType
        -: 1182:          */
        5: 1183:          FileHeader.SubType = CFE_FS_ES_QUERYALL_SUBTYPE;
        -: 1184:
        -: 1185:          /*
        -: 1186:          ** Output the Standard cFE File Header to the App File
        -: 1187:          */
        5: 1188:          Result = CFE_FS_WriteHeader(FileDescriptor, &FileHeader);
        -: 1189:
        5: 1190:          if (Result != sizeof(CFE_FS_Header_t))
        -: 1191:          {
        1: 1192:              OS_close(FileDescriptor);
        1: 1193:              CFE_ES_TaskData.ErrCounter++;
        1: 1194:              CFE_EVS_SendEvent(CFE_ES_WRHDR_ERR_EID, CFE_EVS_ERROR,
        -: 1195:                 "Failed to write App Info file, WriteHdr RC = 0x%08X, exp %d",
        -: 1196:                       Result,sizeof(CFE_FS_Header_t));
        1: 1197:              return;
        -: 1198:          }/* end if */
        -: 1199:
        -: 1200:          /* 
        -: 1201:          ** Maintain statistics of amount of data written to file 
        -: 1202:          */
        4: 1203:          FileSize += Result;
        -: 1204:
        -: 1205:          /*
        -: 1206:          ** Loop through the ES AppTable for main applications
        -: 1207:          */
      100: 1208:          for(i=0;i<CFE_ES_MAX_APPLICATIONS;i++)
        -: 1209:          {
       97: 1210:             if(CFE_ES_Global.AppTable[i].RecordUsed == FALSE)
        -: 1211:             {
       76: 1212:               continue;
        -: 1213:             }
        -: 1214:
        -: 1215:             /* 
        -: 1216:             ** zero out the local entry 
        -: 1217:             */
       21: 1218:             CFE_PSP_MemSet(&AppInfo,0,sizeof(CFE_ES_AppInfo_t));
        -: 1219:
        -: 1220:             /*
        -: 1221:             ** Populate the AppInfo entry 
        -: 1222:             */
       21: 1223:             CFE_ES_GetAppInfoInternal(i, &AppInfo);
        -: 1224:
        -: 1225:             /*
        -: 1226:             ** Write the local entry to file 
        -: 1227:             */
       21: 1228:             Result = OS_write(FileDescriptor, &AppInfo, sizeof(CFE_ES_AppInfo_t) );
       21: 1229:             if (Result !=  sizeof(CFE_ES_AppInfo_t))
        -: 1230:             {
        1: 1231:                OS_close(FileDescriptor);
        1: 1232:                CFE_ES_TaskData.ErrCounter++;
        1: 1233:                CFE_EVS_SendEvent(CFE_ES_TASKWR_ERR_EID, CFE_EVS_ERROR,
        -: 1234:                   "Failed to write App Info file, Task write RC = 0x%08X, exp %d",
        -: 1235:                                   Result,sizeof(CFE_ES_AppInfo_t));
        1: 1236:                return;
        -: 1237:             }/* end if */
        -: 1238:
       20: 1239:             FileSize += Result;
       20: 1240:             EntryCount ++;
        -: 1241:            
        -: 1242:          } /* end for */
        -: 1243:
        3: 1244:          OS_close(FileDescriptor);
        3: 1245:          CFE_ES_TaskData.CmdCounter++;
        3: 1246:          CFE_EVS_SendEvent(CFE_ES_ALL_APPS_EID, CFE_EVS_DEBUG,
        -: 1247:                        "App Info file written to %s, Entries=%d, FileSize=%d",
        -: 1248:                         QueryAllFilename,EntryCount,FileSize);
        -: 1249:       }
        -: 1250:       else
        -: 1251:       {
        1: 1252:           OS_close(FileDescriptor);
        1: 1253:           CFE_ES_TaskData.ErrCounter++;
        1: 1254:           CFE_EVS_SendEvent(CFE_ES_OSCREATE_ERR_EID, CFE_EVS_ERROR,
        -: 1255:              "Failed to write App Info file, OS_creat RC = 0x%08X",FileDescriptor);
        -: 1256:       }
        -: 1257:       
        -: 1258:    } /* end if verify command length */
        4: 1259:    return;
        -: 1260:
        -: 1261:} /* End of CFE_ES_QueryAllCmd() */
        -: 1262:
        -: 1263:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1264:/*                                                                 */
        -: 1265:/* CFE_ES_QueryAllTasksCmd() -- Write all Task Data to a file      */
        -: 1266:/*                                                                 */
        -: 1267:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1268:
        -: 1269:void CFE_ES_QueryAllTasksCmd(CFE_SB_MsgPtr_t Msg)
        4: 1270:{
        -: 1271:
        4: 1272:    uint16                     ExpectedLength = sizeof(CFE_ES_QueryAllTasksCmd_t);
        -: 1273:    CFE_FS_Header_t            FileHeader;
        -: 1274:    int32                      FileDescriptor;
        -: 1275:    uint32                     i;
        4: 1276:    uint32                     EntryCount = 0;
        4: 1277:    uint32                     FileSize = 0;
        -: 1278:    int32                      Result;
        -: 1279:    CFE_ES_TaskInfo_t          TaskInfo;
        4: 1280:    CFE_ES_QueryAllTasksCmd_t  *CmdPtr = (CFE_ES_QueryAllTasksCmd_t *)Msg;
        -: 1281:    char                       QueryAllFilename[OS_MAX_PATH_LEN];
        -: 1282:
        -: 1283:    /*
        -: 1284:    ** Verify command packet length.
        -: 1285:    */
        4: 1286:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -: 1287:    {
        -: 1288:       /* 
        -: 1289:       ** Copy the commanded filename into local buffer to ensure size limitation and to allow for modification 
        -: 1290:       */
        4: 1291:       CFE_PSP_MemCpy(QueryAllFilename, (void *)CmdPtr->QueryAllFileName, OS_MAX_PATH_LEN);
        -: 1292:
        -: 1293:       /* 
        -: 1294:       ** Check to see if a default filename should be used 
        -: 1295:       */
        4: 1296:       if (QueryAllFilename[0] == '\0')
        -: 1297:       {
    #####: 1298:           strncpy(QueryAllFilename, CFE_ES_DEFAULT_TASK_LOG_FILE, OS_MAX_PATH_LEN);
        -: 1299:       }
        -: 1300:
        -: 1301:       /* 
        -: 1302:       ** Make sure all strings are null terminated before attempting to process them 
        -: 1303:       */
        4: 1304:       QueryAllFilename[OS_MAX_PATH_LEN-1] = '\0';
        -: 1305:
        -: 1306:       /* 
        -: 1307:       ** Check to see if the file already exists 
        -: 1308:       */
        4: 1309:       FileDescriptor = OS_open(QueryAllFilename, OS_READ_ONLY, 0);
        4: 1310:       if (FileDescriptor >= 0)
        -: 1311:       {
        4: 1312:           OS_close(FileDescriptor);
        4: 1313:           OS_remove(QueryAllFilename);
        -: 1314:       }
        -: 1315:
        -: 1316:       /*
        -: 1317:       ** Create ES task log data file
        -: 1318:       */
        4: 1319:       FileDescriptor = OS_creat(QueryAllFilename, OS_WRITE_ONLY);
        4: 1320:       if (FileDescriptor >= 0)
        -: 1321:       {
        -: 1322:          /*
        -: 1323:          ** Initialize cFE file header
        -: 1324:          */
        3: 1325:          CFE_PSP_MemSet(&FileHeader, 0, sizeof(CFE_FS_Header_t));
        3: 1326:          strcpy(FileHeader.Description, CFE_ES_TASK_LOG_DESC);
        -: 1327:
        -: 1328:          /*
        -: 1329:          ** Write the File header SubType
        -: 1330:          */
        3: 1331:          FileHeader.SubType = CFE_FS_ES_QUERYALLTASKS_SUBTYPE;
        -: 1332:
        -: 1333:          /*
        -: 1334:          ** Output the Standard cFE File Header to the App File
        -: 1335:          */
        3: 1336:          Result = CFE_FS_WriteHeader(FileDescriptor, &FileHeader);
        -: 1337:
        3: 1338:          if (Result != sizeof(CFE_FS_Header_t))
        -: 1339:          {
        1: 1340:              OS_close(FileDescriptor);
        1: 1341:              CFE_ES_TaskData.ErrCounter++;
        1: 1342:              CFE_EVS_SendEvent(CFE_ES_TASKINFO_WRHDR_ERR_EID, CFE_EVS_ERROR,
        -: 1343:                 "Failed to write Task Info file, WriteHdr RC = 0x%08X, exp %d",
        -: 1344:                       Result,sizeof(CFE_FS_Header_t));
        1: 1345:              return;
        -: 1346:          }/* end if */
        -: 1347:
        -: 1348:          /* 
        -: 1349:          ** Maintain statistics of amount of data written to file 
        -: 1350:          */
        2: 1351:          FileSize += Result;
        -: 1352:
        -: 1353:          /*
        -: 1354:          ** Loop through the ES AppTable for main applications
        -: 1355:          */
       66: 1356:          for(i=0;i<OS_MAX_TASKS;i++)
        -: 1357:          {
       65: 1358:             if(CFE_ES_Global.TaskTable[i].RecordUsed == FALSE)
        -: 1359:             {
       63: 1360:               continue;
        -: 1361:             }
        -: 1362:
        -: 1363:             /* 
        -: 1364:             ** zero out the local entry 
        -: 1365:             */
        2: 1366:             CFE_PSP_MemSet(&TaskInfo,0,sizeof(CFE_ES_TaskInfo_t));
        -: 1367:
        -: 1368:             /*
        -: 1369:             ** Populate the AppInfo entry 
        -: 1370:             */
        2: 1371:             CFE_ES_GetTaskInfo(&TaskInfo,i);
        -: 1372:
        -: 1373:             /*
        -: 1374:             ** Write the local entry to file 
        -: 1375:             */
        2: 1376:             Result = OS_write(FileDescriptor, &TaskInfo, sizeof(CFE_ES_TaskInfo_t) );
        2: 1377:             if (Result !=  sizeof(CFE_ES_TaskInfo_t))
        -: 1378:             {
        1: 1379:                OS_close(FileDescriptor);
        1: 1380:                CFE_ES_TaskData.ErrCounter++;
        1: 1381:                CFE_EVS_SendEvent(CFE_ES_TASKINFO_WR_ERR_EID, CFE_EVS_ERROR,
        -: 1382:                   "Failed to write Task Info file, Task write RC = 0x%08X, exp %d",
        -: 1383:                                   Result,sizeof(CFE_ES_TaskInfo_t));
        1: 1384:                return;
        -: 1385:             }/* end if */
        -: 1386:
        1: 1387:             FileSize += Result;
        1: 1388:             EntryCount ++;
        -: 1389:            
        -: 1390:          } /* end for */
        -: 1391:
        1: 1392:          OS_close(FileDescriptor);
        1: 1393:          CFE_ES_TaskData.CmdCounter++;
        1: 1394:          CFE_EVS_SendEvent(CFE_ES_TASKINFO_EID, CFE_EVS_DEBUG,
        -: 1395:                        "Task Info file written to %s, Entries=%d, FileSize=%d",
        -: 1396:                         QueryAllFilename,EntryCount,FileSize);
        -: 1397:       }
        -: 1398:       else
        -: 1399:       {
        1: 1400:           OS_close(FileDescriptor);
        1: 1401:           CFE_ES_TaskData.ErrCounter++;
        1: 1402:           CFE_EVS_SendEvent(CFE_ES_TASKINFO_OSCREATE_ERR_EID, CFE_EVS_ERROR,
        -: 1403:              "Failed to write Task Info file, OS_creat RC = 0x%08X",FileDescriptor);
        -: 1404:       }
        -: 1405:       
        -: 1406:    } /* end if verify command length */
        2: 1407:    return;
        -: 1408:
        -: 1409:} /* End of CFE_ES_QueryAllTasksCmd() */
        -: 1410:
        -: 1411:
        -: 1412:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1413:/*                                                                 */
        -: 1414:/* CFE_ES_ClearSyslogCmd() -- Clear executive services system log  */
        -: 1415:/*                                                                 */
        -: 1416:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1417:
        -: 1418:void CFE_ES_ClearSyslogCmd(CFE_SB_MsgPtr_t Msg)
        1: 1419:{
        1: 1420:    uint16 ExpectedLength = sizeof(CFE_ES_NoArgsCmd_t);
        -: 1421:
        -: 1422:    /*
        -: 1423:    ** Verify command packet length.
        -: 1424:    */
        1: 1425:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -: 1426:    {
        -: 1427:
        -: 1428:        /*
        -: 1429:        ** Clear syslog index and memory area
        -: 1430:        */
        1: 1431:        CFE_ES_SysLogClear();
        -: 1432:
        -: 1433:        /*
        -: 1434:        ** This command will always succeed...
        -: 1435:        */
        1: 1436:        CFE_ES_TaskData.CmdCounter++;
        1: 1437:        CFE_EVS_SendEvent(CFE_ES_SYSLOG1_INF_EID, CFE_EVS_INFORMATION,
        -: 1438:                         "Cleared Executive Services log data");
        -: 1439:    }
        -: 1440:
        1: 1441:} /* End of CFE_ES_ClearSyslogCmd() */
        -: 1442:
        -: 1443:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1444:/*                                                                 */
        -: 1445:/* CFE_ES_OverWriteSyslogCmd() -- set syslog mode                  */
        -: 1446:/*                                                                 */
        -: 1447:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1448:
        -: 1449:void CFE_ES_OverWriteSyslogCmd(CFE_SB_MsgPtr_t Msg)
        2: 1450:{
        2: 1451:   uint32                        Status = 0;
        2: 1452:   CFE_ES_OverWriteSysLogCmd_t  *CmdPtr = ( CFE_ES_OverWriteSysLogCmd_t *)Msg;
        2: 1453:   uint16                        ExpectedLength = sizeof(CFE_ES_OverWriteSysLogCmd_t);
        -: 1454:
        -: 1455:    /*
        -: 1456:    ** Verify command packet length.
        -: 1457:    */
        2: 1458:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -: 1459:    {
        -: 1460:
        2: 1461:      Status = CFE_ES_SysLogOverwrite(CmdPtr->Mode);
        -: 1462:
        2: 1463:      if (Status == FALSE)
        -: 1464:      {
        1: 1465:         CFE_EVS_SendEvent(CFE_ES_ERR_SYSLOGMODE_EID,
        -: 1466:                           CFE_EVS_ERROR,
        -: 1467:                           "Set OverWriteSysLog Command: Invalid Mode setting = %d", CmdPtr->Mode);
        -: 1468:                           
        1: 1469:         CFE_ES_TaskData.ErrCounter++;      
        -: 1470:      }
        -: 1471:      else
        -: 1472:      {
        1: 1473:         CFE_EVS_SendEvent(CFE_ES_SYSLOGMODE_EID,
        -: 1474:                           CFE_EVS_DEBUG,
        -: 1475:                           "Set OverWriteSysLog Command Received with Mode setting = %d", CmdPtr->Mode);
        -: 1476:                           
        1: 1477:         CFE_ES_TaskData.CmdCounter++;
        -: 1478:      }
        -: 1479:
        -: 1480:   } /* end if verify command length */
        -: 1481:   
        2: 1482:} /* End CFE_ES_OverWriteSyslogCmd() */
        -: 1483:
        -: 1484:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1485:/*                                                                 */
        -: 1486:/* CFE_ES_SysLogClear -- Clear system log & index                  */
        -: 1487:/*                                                                 */
        -: 1488:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1489:
        -: 1490:void CFE_ES_SysLogClear(void)
        1: 1491:{
        -: 1492:    /*
        -: 1493:    ** Clear SysLog data buffer
        -: 1494:    */
        1: 1495:    CFE_PSP_MemSet(CFE_ES_ResetDataPtr->SystemLog, 0, CFE_ES_SYSTEM_LOG_SIZE);
        -: 1496:
        -: 1497:    /*
        -: 1498:    ** Initialize SysLog index & Entry Count
        -: 1499:    */
        1: 1500:    CFE_ES_ResetDataPtr->SystemLogIndex = 0;
        1: 1501:    CFE_ES_ResetDataPtr->SystemLogEntryNum = 0;
        -: 1502:
        1: 1503:} /* End of CFE_ES_SysLogClear() */
        -: 1504:
        -: 1505:
        -: 1506:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1507:/*                                                                       */
        -: 1508:/* CFE_ES_WriteSyslogCmd() -- Process Cmd to write ES System Log to file */
        -: 1509:/*                                                                       */
        -: 1510:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1511:
        -: 1512:void CFE_ES_WriteSyslogCmd(CFE_SB_MsgPtr_t Msg)
        5: 1513:{
        5: 1514:    CFE_ES_WriteSyslogCmd_t  *CmdPtr = (CFE_ES_WriteSyslogCmd_t *)Msg;
        -: 1515:    int32                     Stat;
        5: 1516:    uint16                    ExpectedLength = sizeof(CFE_ES_WriteSyslogCmd_t);
        -: 1517:
        -: 1518:    /*
        -: 1519:    ** Verify command packet length.
        -: 1520:    */
        5: 1521:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -: 1522:    {
        -: 1523:
        5: 1524:       if(CmdPtr->SysLogFileName[0]=='\0')
        -: 1525:       {     
        3: 1526:           Stat = CFE_ES_SysLogDump(CFE_ES_DEFAULT_SYSLOG_FILE);
        -: 1527:       }
        -: 1528:       else
        -: 1529:       {
        2: 1530:           CmdPtr->SysLogFileName[OS_MAX_PATH_LEN - 1] = '\0';
        2: 1531:           Stat = CFE_ES_SysLogDump(CmdPtr->SysLogFileName);        
        -: 1532:       }/* end if */
        -: 1533:         
        5: 1534:       if(Stat == CFE_SUCCESS)
        -: 1535:       {
        2: 1536:           CFE_ES_TaskData.CmdCounter++;
        -: 1537:       }
        -: 1538:       else
        -: 1539:       {
        3: 1540:           CFE_ES_TaskData.ErrCounter++;
        -: 1541:       }/* end if */
        -: 1542:
        -: 1543:   } /* end if command length verify */
        -: 1544:   
        5: 1545:}/* end CFE_ES_WriteSyslogCmd */
        -: 1546:
        -: 1547:
        -: 1548:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1549:/*                                                                 */
        -: 1550:/* CFE_ES_SysLogDump() -- Write ES System Log to a file.    */
        -: 1551:/*                                                                 */
        -: 1552:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1553:int32 CFE_ES_SysLogDump(char *Filename)
        5: 1554:{
        -: 1555:    int32   fd;
        -: 1556:    int32   WriteStat;
        -: 1557:    uint32  FileSize;
        -: 1558:    CFE_FS_Header_t FileHdr;
        -: 1559:
        5: 1560:    fd = OS_creat(Filename, OS_WRITE_ONLY);
        5: 1561:    if(fd < 0)
        -: 1562:    {
        1: 1563:        OS_close(fd);
        1: 1564:        CFE_EVS_SendEvent(CFE_ES_SYSLOG2_ERR_EID,CFE_EVS_ERROR,
        -: 1565:                      "Error creating file %s, RC = 0x%08X",
        -: 1566:                      Filename,fd);
        1: 1567:        return CFE_ES_FILE_IO_ERR;
        -: 1568:    }/* end if */
        -: 1569:
        4: 1570:    CFE_PSP_MemSet(&FileHdr, 0, sizeof(CFE_FS_Header_t));
        4: 1571:    strcpy(&FileHdr.Description[0], CFE_ES_SYS_LOG_DESC);
        -: 1572:
        -: 1573:    /*
        -: 1574:    ** Write the File header SubType
        -: 1575:    */
        4: 1576:    FileHdr.SubType = CFE_FS_ES_SYSLOG_SUBTYPE;
        -: 1577:
        4: 1578:    WriteStat = CFE_FS_WriteHeader(fd, &FileHdr);
        4: 1579:    if(WriteStat != sizeof(CFE_FS_Header_t))
        -: 1580:    {
        1: 1581:        CFE_ES_FileWriteByteCntErr(Filename,sizeof(CFE_FS_Header_t),WriteStat);
        1: 1582:        OS_close(fd);
        1: 1583:        return CFE_ES_FILE_IO_ERR;
        -: 1584:    }/* end if */
        -: 1585:
        3: 1586:    FileSize = WriteStat;
        -: 1587:
        -: 1588:    /* need to take semaphore here */
        -: 1589:
        3: 1590:    WriteStat = OS_write(fd,CFE_ES_ResetDataPtr->SystemLog,CFE_ES_SYSTEM_LOG_SIZE);
        3: 1591:    if(WriteStat != CFE_ES_SYSTEM_LOG_SIZE)
        -: 1592:    {
        1: 1593:        CFE_ES_FileWriteByteCntErr(Filename,CFE_ES_SYSTEM_LOG_SIZE,WriteStat);
        1: 1594:        OS_close(fd);
        1: 1595:        return CFE_ES_FILE_IO_ERR;
        -: 1596:    }/* end if */
        -: 1597:
        -: 1598:    /* need to release the semaphore here */
        -: 1599:
        2: 1600:    FileSize += WriteStat;    
        -: 1601:    
        2: 1602:    OS_close(fd);
        -: 1603:
        2: 1604:    CFE_EVS_SendEvent(CFE_ES_SYSLOG2_EID, CFE_EVS_DEBUG,
        -: 1605:                      "%s written:Size=%d,Entries=%d",Filename,FileSize,
        -: 1606:                      CFE_ES_TaskData.HkPacket.SysLogEntries);
        -: 1607:
        2: 1608:    return CFE_SUCCESS;
        -: 1609:
        -: 1610:} /* End of CFE_ES_SysLogDump() */
        -: 1611:
        -: 1612:
        -: 1613:
        -: 1614:/*
        -: 1615:** Function: CFE_ES_SysLogOverwrite
        -: 1616:**
        -: 1617:** Purpose:  Set syslog write mode
        -: 1618:**
        -: 1619:*/
        -: 1620:int32 CFE_ES_SysLogOverwrite(uint32 Mode )
        2: 1621:{
        2: 1622:    uint32 Status = TRUE;
        -: 1623:
        3: 1624:    if((Mode == CFE_ES_LOG_OVERWRITE) || (Mode == CFE_ES_LOG_DISCARD))
        -: 1625:    {
        1: 1626:        CFE_ES_ResetDataPtr->SystemLogMode = Mode;
        -: 1627:    }
        -: 1628:    else
        -: 1629:    {
        1: 1630:        Status = FALSE;
        -: 1631:    }
        -: 1632:
        2: 1633:    return Status;
        -: 1634:}
        -: 1635:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1636:/*                                                                 */
        -: 1637:/* CFE_ES_ClearERlogCmd() -- Clear The exception and reset log.    */
        -: 1638:/*                                                                 */
        -: 1639:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1640:
        -: 1641:void CFE_ES_ClearERlogCmd(CFE_SB_MsgPtr_t Msg)
        2: 1642:{
        2: 1643:    uint16 ExpectedLength = sizeof(CFE_ES_NoArgsCmd_t);
        -: 1644:
        -: 1645:    /*
        -: 1646:    ** Verify command packet length
        -: 1647:    */
        2: 1648:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -: 1649:    {
        -: 1650:        /*
        -: 1651:        ** Clear ER log data buffer
        -: 1652:        */
        -: 1653:
        1: 1654:        CFE_PSP_MemSet(CFE_ES_ResetDataPtr->ERLog, 0, sizeof(CFE_ES_ResetDataPtr->ERLog));
        -: 1655:
        -: 1656:        /*
        -: 1657:        ** Reset ER log buffer index
        -: 1658:        */
        -: 1659:
        1: 1660:        CFE_ES_ResetDataPtr->ERLogIndex = 0;
        -: 1661:        
        -: 1662:        /* 
        -: 1663:        ** Set Number of Entries in ER log buffer back to zero
        -: 1664:        */
        1: 1665:        CFE_ES_ResetDataPtr->ERLogEntries = 0;
        -: 1666:
        -: 1667:        /*
        -: 1668:        ** This command will always succeed
        -: 1669:        */
        1: 1670:        CFE_ES_TaskData.CmdCounter++;
        1: 1671:        CFE_EVS_SendEvent(CFE_ES_ERLOG1_INF_EID, CFE_EVS_INFORMATION,
        -: 1672:                         "Cleared ES Exception and Reset Log data");
        -: 1673:    }
        -: 1674:
        2: 1675:} /* End of CFE_ES_ClearERlogCmd() */
        -: 1676:
        -: 1677:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1678:/*                                                                 */
        -: 1679:/* CFE_ES_WriteERlogCmd() -- Process Cmd to write exception & reset*/
        -: 1680:/*                           log to a file.                        */
        -: 1681:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1682:
        -: 1683:void CFE_ES_WriteERlogCmd(CFE_SB_MsgPtr_t Msg)
        5: 1684:{
        5: 1685:    CFE_ES_WriteERlogCmd_t  *CmdPtr = (CFE_ES_WriteERlogCmd_t *)Msg;
        -: 1686:    int32                    Stat;
        5: 1687:    uint16                   ExpectedLength = sizeof(CFE_ES_WriteERlogCmd_t);
        -: 1688:
        -: 1689:    /*
        -: 1690:    ** Verify command packet length
        -: 1691:    */
        5: 1692:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -: 1693:    {
        5: 1694:       if(CmdPtr->ERLogFileName[0]=='\0')
        -: 1695:       {     
        1: 1696:           Stat = CFE_ES_ERLogDump(CFE_ES_DEFAULT_ER_LOG_FILE);
        -: 1697:       }
        -: 1698:       else
        -: 1699:       {
        4: 1700:           CmdPtr->ERLogFileName[OS_MAX_PATH_LEN - 1] = '\0';
        4: 1701:           Stat = CFE_ES_ERLogDump(CmdPtr->ERLogFileName);        
        -: 1702:       }/* end if */
        -: 1703:         
        5: 1704:       if(Stat == CFE_SUCCESS)
        -: 1705:       {
        1: 1706:           CFE_ES_TaskData.CmdCounter++;
        -: 1707:       }
        -: 1708:       else
        -: 1709:       {
        4: 1710:           CFE_ES_TaskData.ErrCounter++;
        -: 1711:       }/* end if */
        -: 1712:       
        -: 1713:   } /* end if verify command length */
        -: 1714:   
        5: 1715:}/* end CFE_ES_WriteERlogCmd */
        -: 1716:
        -: 1717:
        -: 1718:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1719:/*                                                                 */
        -: 1720:/* CFE_ES_ERLogDump() -- Write exception & reset log to a file.    */
        -: 1721:/*                                                                 */
        -: 1722:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1723:int32 CFE_ES_ERLogDump(char *Filename)
        5: 1724:{
        -: 1725:
        -: 1726:    int32   fd;
        -: 1727:    int32   WriteStat,BspStat;
        -: 1728:    uint32  FileSize,i,ResetAreaSize;
        -: 1729:    CFE_FS_Header_t FileHdr;
        -: 1730:    uint8   *ResetDataPtr;
        -: 1731:    
        5: 1732:    fd = OS_creat(Filename, OS_WRITE_ONLY);
        5: 1733:    if(fd < 0)
        -: 1734:    {
        1: 1735:        OS_close(fd);
        1: 1736:        CFE_EVS_SendEvent(CFE_ES_ERLOG2_ERR_EID,CFE_EVS_ERROR,
        -: 1737:                      "Error creating file %s, RC = 0x%08X",
        -: 1738:                      Filename,fd);
        1: 1739:        return CFE_ES_FILE_IO_ERR;
        -: 1740:    }/* end if */
        -: 1741:
        4: 1742:    CFE_PSP_MemSet(&FileHdr, 0, sizeof(CFE_FS_Header_t));
        4: 1743:    strcpy(&FileHdr.Description[0], CFE_ES_ER_LOG_DESC);
        -: 1744:
        -: 1745:    /*
        -: 1746:    ** Write the File header SubType
        -: 1747:    */
        4: 1748:    FileHdr.SubType = CFE_FS_ES_ERLOG_SUBTYPE;
        -: 1749:    
        -: 1750:    /* write the cFE header to the file */
        4: 1751:    WriteStat = CFE_FS_WriteHeader(fd, &FileHdr);    
        4: 1752:    if(WriteStat != sizeof(CFE_FS_Header_t))
        -: 1753:    {
        1: 1754:        CFE_ES_FileWriteByteCntErr(Filename,sizeof(CFE_FS_Header_t),WriteStat);
        1: 1755:        OS_close(fd);
        1: 1756:        return CFE_ES_FILE_IO_ERR;        
        -: 1757:    }/* end if */
        3: 1758:    FileSize = WriteStat;
        -: 1759:
        -: 1760:    /* Get the pointer to the Reset Log from the BSP */
        3: 1761:    BspStat = CFE_PSP_GetResetArea (&ResetDataPtr, &ResetAreaSize);
        3: 1762:    if(BspStat==OS_ERROR)
        -: 1763:    {
        1: 1764:        CFE_EVS_SendEvent(CFE_ES_RST_ACCESS_EID, CFE_EVS_ERROR,
        -: 1765:              "Error accessing ER Log,%s not written. RC = 0x%08X",Filename,BspStat);
        1: 1766:        OS_close(fd);
        1: 1767:        return CFE_ES_RST_ACCESS_ERR;        
        -: 1768:    }/* end if */
        -: 1769:
        -: 1770:    /* write a single ER log entry on each pass */
       22: 1771:    for(i=0;i<CFE_ES_ER_LOG_ENTRIES;i++)
        -: 1772:    {
       21: 1773:        WriteStat = OS_write(fd,(uint8 *)ResetDataPtr,sizeof(CFE_ES_ERLog_t));
       21: 1774:        if(WriteStat != sizeof(CFE_ES_ERLog_t))
        -: 1775:        {
        1: 1776:            CFE_ES_FileWriteByteCntErr(Filename,sizeof(CFE_ES_ERLog_t),WriteStat);
        1: 1777:            OS_close(fd);
        1: 1778:            return CFE_ES_FILE_IO_ERR;        
        -: 1779:        }/* end if */        
       20: 1780:        FileSize += WriteStat;
       20: 1781:        ResetDataPtr+=sizeof(CFE_ES_ERLog_t);
        -: 1782:    }/* end for */   
        -: 1783:    
        1: 1784:    OS_close(fd);
        -: 1785:
        1: 1786:    CFE_EVS_SendEvent(CFE_ES_ERLOG2_EID, CFE_EVS_DEBUG,
        -: 1787:                      "%s written:Size=%d",Filename,FileSize);
        -: 1788:
        1: 1789:    return CFE_SUCCESS;
        -: 1790:
        -: 1791:} /* end CFE_ES_ERLogDump() */
        -: 1792:
        -: 1793:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1794:/*                                                                 */
        -: 1795:/* CFE_ES_VerifyCmdLength() -- Verify command packet length        */
        -: 1796:/*                                                                 */
        -: 1797:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1798:
        -: 1799:boolean CFE_ES_VerifyCmdLength(CFE_SB_MsgPtr_t Msg, uint16 ExpectedLength)
       81: 1800:{
       81: 1801:    boolean result       = TRUE;
       81: 1802:    uint16  ActualLength = CFE_SB_GetTotalMsgLength(Msg);
        -: 1803:
        -: 1804:    /*
        -: 1805:    ** Verify the command packet length
        -: 1806:    */
       81: 1807:    if (ExpectedLength != ActualLength)
        -: 1808:    {
        1: 1809:        CFE_SB_MsgId_t MessageID = CFE_SB_GetMsgId(Msg);
        1: 1810:        uint16 CommandCode = CFE_SB_GetCmdCode(Msg);
        -: 1811:
        1: 1812:        CFE_EVS_SendEvent(CFE_ES_LEN_ERR_EID, CFE_EVS_ERROR,
        -: 1813:           "Invalid cmd length: ID = 0x%X, CC = %d, Exp Len = %d, Len = %d",
        -: 1814:                          MessageID, CommandCode, ExpectedLength, ActualLength);
        1: 1815:        result = FALSE;
        1: 1816:        CFE_ES_TaskData.ErrCounter++;
        -: 1817:    }
        -: 1818:
       81: 1819:    return(result);
        -: 1820:
        -: 1821:} /* End of CFE_ES_VerifyCmdLength() */
        -: 1822:
        -: 1823:
        -: 1824:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1825:/*                                                                 */
        -: 1826:/* CFE_ES_ResetPRCountCmd() -- ES task ground command              */
        -: 1827:/*                              (Processor Reset Count)            */
        -: 1828:/*                                                                 */
        -: 1829:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1830:                
        -: 1831:void CFE_ES_ResetPRCountCmd(CFE_SB_MsgPtr_t Msg)
        1: 1832:{                   
        1: 1833:    uint16 ExpectedLength = sizeof(CFE_ES_NoArgsCmd_t);
        -: 1834:                
        -: 1835:    /*              
        -: 1836:    ** Verify command packet length.
        -: 1837:    */
        1: 1838:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))
        -: 1839:    {               
        -: 1840:                     
        -: 1841:        /*                            
        -: 1842:        ** Reset the processor reset count
        -: 1843:        */          
        1: 1844:        CFE_ES_ResetDataPtr->ResetVars.ProcessorResetCount = 0;
        -: 1845:            
        -: 1846:        /*
        -: 1847:        ** This command will always succeed.                                       
        -: 1848:        */                                                                         
        1: 1849:        CFE_EVS_SendEvent(CFE_ES_RESET_PR_COUNT_EID, CFE_EVS_INFORMATION,          
        -: 1850:                         "Set Processor Reset Count to Zero");  
        -: 1851:                         
        1: 1852:        CFE_ES_TaskData.CmdCounter++;
        -: 1853:    }                                                                              
        -: 1854:                                                                                   
        1: 1855:} /* End of CFE_ES_ResetPRCountCmd() */                                            
        -: 1856:
        -: 1857:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */              
        -: 1858:/*                                                                 */              
        -: 1859:/* CFE_ES_SetMaxPRCountCmd() -- Set Maximum Processor reset count  */              
        -: 1860:/*                                                                 */              
        -: 1861:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */              
        -: 1862:                                                                                   
        -: 1863:void CFE_ES_SetMaxPRCountCmd(CFE_SB_MsgPtr_t Msg)                                  
        1: 1864:{                                                                                  
        1: 1865:    uint16 ExpectedLength = sizeof(CFE_ES_SetMaxPRCountCmd_t);                     
        -: 1866:                                                                                   
        -: 1867:    /*                                                                             
        -: 1868:    ** Verify command packet length.                                               
        -: 1869:    */                                                                             
        1: 1870:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))                               
        -: 1871:    {                                                                              
        1: 1872:        CFE_ES_SetMaxPRCountCmd_t *cmd = (CFE_ES_SetMaxPRCountCmd_t *) Msg;        
        -: 1873:                                                                                   
        -: 1874:        /*                                                                         
        -: 1875:        ** Set the MAX Processor reset count                                       
        -: 1876:        */                                                                         
        1: 1877:        CFE_ES_ResetDataPtr->ResetVars.MaxProcessorResetCount = cmd->MaxPRCount;   
        -: 1878:                                                                                   
        -: 1879:        /*                                                                         
        -: 1880:        ** This command will always succeed.                                       
        -: 1881:        */                                                                         
        1: 1882:        CFE_EVS_SendEvent(CFE_ES_SET_MAX_PR_COUNT_EID, CFE_EVS_INFORMATION,        
        -: 1883:                         "Maximum Processor Reset Count set to: %d", cmd->MaxPRCount);
        -: 1884:                         
        1: 1885:        CFE_ES_TaskData.CmdCounter++;
        -: 1886:        
        -: 1887:    }                                                                              
        -: 1888:                                                                                   
        1: 1889:} /* End of CFE_ES_RestartCmd() */ 
        -: 1890:
        -: 1891:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */              
        -: 1892:/*                                                                 */              
        -: 1893:/* CFE_ES_DeleteCDSCmd() -- Delete Specified Critical Data Store   */              
        -: 1894:/*                                                                 */              
        -: 1895:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */              
        -: 1896:                                                                                   
        -: 1897:void CFE_ES_DeleteCDSCmd(CFE_SB_MsgPtr_t Msg)                                  
        7: 1898:{                                                                                  
        7: 1899:    uint16 ExpectedLength = sizeof(CFE_ES_DeleteCDSCmd_t);                     
        -: 1900:    int32   Status;
        -: 1901:                                                                                   
        -: 1902:    /*                                                                             
        -: 1903:    ** Verify command packet length.                                               
        -: 1904:    */                                                                             
        7: 1905:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))                               
        -: 1906:    {                                                                              
        7: 1907:        CFE_ES_DeleteCDSCmd_t *cmd = (CFE_ES_DeleteCDSCmd_t *) Msg;
        -: 1908:        
        7: 1909:        Status = CFE_ES_DeleteCDS(cmd->CdsName, FALSE);
        -: 1910:        
        7: 1911:        if (Status == CFE_ES_CDS_WRONG_TYPE_ERR)
        -: 1912:        {
        3: 1913:            CFE_EVS_SendEvent(CFE_ES_CDS_DELETE_TBL_ERR_EID, CFE_EVS_ERROR,
        -: 1914:                              "CDS '%s' is a Critical Table CDS. Must be deleted via TBL Command", 
        -: 1915:                              cmd->CdsName);
        -: 1916:
        3: 1917:            CFE_ES_TaskData.ErrCounter++;      
        -: 1918:        }
        4: 1919:        else if (Status == CFE_ES_CDS_OWNER_ACTIVE_ERR)
        -: 1920:        {
        1: 1921:            CFE_EVS_SendEvent(CFE_ES_CDS_OWNER_ACTIVE_EID, CFE_EVS_ERROR,        
        -: 1922:                             "CDS '%s' not deleted because owning app is active", cmd->CdsName);
        -: 1923:                             
        1: 1924:            CFE_ES_TaskData.ErrCounter++;
        -: 1925:        }
        3: 1926:        else if (Status == CFE_ES_CDS_NOT_FOUND_ERR)
        -: 1927:        {
        1: 1928:            CFE_EVS_SendEvent(CFE_ES_CDS_NAME_ERR_EID, CFE_EVS_ERROR,        
        -: 1929:                             "Unable to locate '%s' in CDS Registry", cmd->CdsName);
        -: 1930:                             
        1: 1931:            CFE_ES_TaskData.ErrCounter++;
        -: 1932:        }
        2: 1933:        else if (Status != CFE_SUCCESS)
        -: 1934:        {
        1: 1935:            CFE_EVS_SendEvent(CFE_ES_CDS_DELETE_ERR_EID, CFE_EVS_ERROR,
        -: 1936:                              "Error while deleting '%s' from CDS, See SysLog.(Err=0x%08X)", 
        -: 1937:                              cmd->CdsName, Status);
        -: 1938:
        1: 1939:            CFE_ES_TaskData.ErrCounter++;      
        -: 1940:        }
        -: 1941:        else
        -: 1942:        {
        1: 1943:            CFE_EVS_SendEvent(CFE_ES_CDS_DELETED_INFO_EID, CFE_EVS_INFORMATION,
        -: 1944:                              "Successfully removed '%s' from CDS", cmd->CdsName);
        -: 1945:
        1: 1946:            CFE_ES_TaskData.CmdCounter++;      
        -: 1947:        }
        -: 1948:    }
        -: 1949:
        7: 1950:} /* End of CFE_ES_DeleteCDSCmd() */ 
        -: 1951:
        -: 1952:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */              
        -: 1953:/*                                                                 */              
        -: 1954:/* CFE_ES_TlmPoolStatsCmd() -- Telemeter Memory Pool Statistics    */              
        -: 1955:/*                                                                 */              
        -: 1956:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */              
        -: 1957:                                                                                   
        -: 1958:void CFE_ES_TlmPoolStatsCmd(CFE_SB_MsgPtr_t Msg)                                  
        2: 1959:{                                                                                  
        2: 1960:    uint16                    ExpectedLength = sizeof(CFE_ES_TlmPoolStatsCmd_t);                     
        -: 1961:    CFE_ES_TlmPoolStatsCmd_t *Cmd;
        -: 1962:    boolean                   ValidHandle;
        -: 1963:                                                                                   
        -: 1964:    /*                                                                             
        -: 1965:    ** Verify command packet length.                                               
        -: 1966:    */                                                                             
        2: 1967:    if (CFE_ES_VerifyCmdLength(Msg, ExpectedLength))                               
        -: 1968:    {                                                                              
        2: 1969:        Cmd = (CFE_ES_TlmPoolStatsCmd_t *) Msg;
        -: 1970:        
        -: 1971:        /* Verify the handle to make sure it is legit */
        2: 1972:        ValidHandle = CFE_ES_ValidateHandle(Cmd->PoolHandle);
        -: 1973:        
        2: 1974:        if (ValidHandle)
        -: 1975:        {
        -: 1976:            /* Extract the memory statistics from the memory pool */
        1: 1977:            CFE_ES_GetMemPoolStats(&CFE_ES_TaskData.MemStatsPacket.PoolStats, Cmd->PoolHandle);
        -: 1978:            
        -: 1979:            /* Echo the specified pool handle in the telemetry packet */
        1: 1980:            CFE_ES_TaskData.MemStatsPacket.PoolHandle = Cmd->PoolHandle;
        -: 1981:            
        -: 1982:            /*
        -: 1983:            ** Send memory statistics telemetry packet.
        -: 1984:            */
        1: 1985:            CFE_SB_TimeStampMsg((CFE_SB_Msg_t *) &CFE_ES_TaskData.MemStatsPacket);
        1: 1986:            CFE_SB_SendMsg((CFE_SB_Msg_t *) &CFE_ES_TaskData.MemStatsPacket);
        -: 1987:
        1: 1988:            CFE_ES_TaskData.CmdCounter++;      
        1: 1989:            CFE_EVS_SendEvent(CFE_ES_TLM_POOL_STATS_INFO_EID, CFE_EVS_DEBUG,
        -: 1990:                              "Successfully telemetered memory pool stats for 0x%08X", Cmd->PoolHandle);
        -: 1991:        }
        -: 1992:        else
        -: 1993:        {
        1: 1994:            CFE_ES_TaskData.ErrCounter++;      
        1: 1995:            CFE_EVS_SendEvent(CFE_ES_INVALID_POOL_HANDLE_ERR_EID, CFE_EVS_ERROR,
        -: 1996:                              "Cannot telemeter memory pool stats. Illegal Handle (0x%08X)", 
        -: 1997:                              Cmd->PoolHandle);
        -: 1998:        }
        -: 1999:    }
        -: 2000:
        2: 2001:} /* End of CFE_ES_TlmPoolStatsCmd() */ 
        -: 2002:
        -: 2003:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */              
        -: 2004:/*                                                                 */              
        -: 2005:/* CFE_ES_DumpCDSRegCmd() -- Dump CDS Registry to a file           */              
        -: 2006:/*                                                                 */              
        -: 2007:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */              
        -: 2008:                                                                                   
        -: 2009:void CFE_ES_DumpCDSRegCmd( const CFE_SB_Msg_t *MessagePtr )
        4: 2010:{
        -: 2011:    CFE_FS_Header_t               StdFileHeader;
        -: 2012:    int32                         FileDescriptor;
        -: 2013:    int32                         Status;
        4: 2014:    int16                         RegIndex=0;
        4: 2015:    const CFE_ES_DumpCDSRegCmd_t *CmdPtr = (const CFE_ES_DumpCDSRegCmd_t *) MessagePtr;
        -: 2016:    char                          DumpFilename[OS_MAX_PATH_LEN];
        -: 2017:    CFE_ES_CDS_RegRec_t          *RegRecPtr;
        -: 2018:    CFE_ES_CDSRegDumpRec_t        DumpRecord;
        4: 2019:    int32                         FileSize=0;
        4: 2020:    int32                         NumEntries=0;
        -: 2021:
        -: 2022:    /* Copy the commanded filename into local buffer to ensure size limitation and to allow for modification */
        4: 2023:    CFE_PSP_MemCpy(DumpFilename, (void *)CmdPtr->DumpFilename, OS_MAX_PATH_LEN);
        -: 2024:    
        -: 2025:    /* Check to see if a default filename should be used */
        4: 2026:    if (DumpFilename[0] == '\0')
        -: 2027:    {
    #####: 2028:        strncpy(DumpFilename, CFE_ES_DEFAULT_CDS_REG_DUMP_FILE, OS_MAX_PATH_LEN);
        -: 2029:    }
        -: 2030:
        -: 2031:    /* Make sure all strings are null terminated before attempting to process them */
        4: 2032:    DumpFilename[OS_MAX_PATH_LEN-1] = '\0';
        -: 2033:
        -: 2034:    /* Create a new dump file, overwriting anything that may have existed previously */
        4: 2035:    FileDescriptor = OS_creat(DumpFilename, OS_WRITE_ONLY);
        -: 2036:
        4: 2037:    if (FileDescriptor >= OS_FS_SUCCESS)
        -: 2038:    {
        -: 2039:        /* Initialize the standard cFE File Header for the Dump File */
        3: 2040:        StdFileHeader.SubType = CFE_FS_ES_CDS_REG_SUBTYPE;
        3: 2041:        strcpy(&StdFileHeader.Description[0], "CDS Registry");
        -: 2042:
        -: 2043:        /* Output the Standard cFE File Header to the Dump File */
        3: 2044:        Status = CFE_FS_WriteHeader(FileDescriptor, &StdFileHeader);
        -: 2045:        
        -: 2046:        /* Maintain statistics of amount of data written to file */
        3: 2047:        FileSize += Status;
        -: 2048:
        3: 2049:        if (Status == sizeof(CFE_FS_Header_t))
        -: 2050:        {
        2: 2051:            Status = sizeof(CFE_ES_CDSRegDumpRec_t);
      517: 2052:            while ((RegIndex < CFE_ES_CDS_MAX_NUM_ENTRIES) && (Status == sizeof(CFE_ES_CDSRegDumpRec_t)))
        -: 2053:            {
        -: 2054:                /* Make a pointer to simplify code look and to remove redundant indexing into registry */
      513: 2055:                RegRecPtr = &CFE_ES_Global.CDSVars.Registry[RegIndex];
        -: 2056:
        -: 2057:                /* Check to see if the Registry entry is empty */
      513: 2058:                if (RegRecPtr->Taken == TRUE)
        -: 2059:                {
        -: 2060:                    /* Fill CDS Registry Dump Record with relevant information */
        2: 2061:                    DumpRecord.Size             = RegRecPtr->Size;
        2: 2062:                    DumpRecord.Handle           = RegRecPtr->MemHandle;
        2: 2063:                    DumpRecord.Table            = RegRecPtr->Table;
        2: 2064:                    DumpRecord.ByteAlignSpare1  = 0;
        -: 2065:                    
        -: 2066:                    /* Zero character arrays to remove garbage text */
        2: 2067:                    CFE_PSP_MemSet(DumpRecord.Name, 0, CFE_ES_CDS_MAX_FULL_NAME_LEN);
        2: 2068:                    strncpy(DumpRecord.Name, RegRecPtr->Name, CFE_ES_CDS_MAX_FULL_NAME_LEN);
        -: 2069:
        -: 2070:                    /* Output Registry Dump Record to Registry Dump File */
        2: 2071:                    Status = OS_write(FileDescriptor,
        -: 2072:                                      &DumpRecord,
        -: 2073:                                      sizeof(CFE_ES_CDSRegDumpRec_t));
        -: 2074:                    
        2: 2075:                    FileSize += Status;
        2: 2076:                    NumEntries++;      
        -: 2077:                }
        -: 2078:
        -: 2079:                /* Look at the next entry in the Registry */
      513: 2080:                RegIndex++;
        -: 2081:            }
        -: 2082:
        2: 2083:            if (Status == sizeof(CFE_ES_CDSRegDumpRec_t))
        -: 2084:            {
        1: 2085:                CFE_EVS_SendEvent(CFE_ES_CDS_REG_DUMP_INF_EID,
        -: 2086:                                  CFE_EVS_DEBUG,
        -: 2087:                                  "Successfully dumped CDS Registry to '%s':Size=%d,Entries=%d",
        -: 2088:                                  DumpFilename, FileSize, NumEntries);
        -: 2089:
        -: 2090:                /* Increment Successful Command Counter */
        1: 2091:                CFE_ES_TaskData.CmdCounter++;      
        -: 2092:            }
        -: 2093:            else
        -: 2094:            {
        1: 2095:                CFE_EVS_SendEvent(CFE_ES_CDS_DUMP_ERR_EID,
        -: 2096:                                  CFE_EVS_ERROR,
        -: 2097:                                  "Error writing CDS Registry to '%s', Status=0x%08X",
        -: 2098:                                  DumpFilename, Status);
        -: 2099:                            
        -: 2100:                /* Increment Command Error Counter */      
        1: 2101:                CFE_ES_TaskData.ErrCounter++;      
        -: 2102:            }
        -: 2103:        }
        -: 2104:        else
        -: 2105:        {
        1: 2106:            CFE_EVS_SendEvent(CFE_ES_WRITE_CFE_HDR_ERR_EID,
        -: 2107:                              CFE_EVS_ERROR,
        -: 2108:                              "Error writing cFE File Header to '%s', Status=0x%08X",
        -: 2109:                              DumpFilename, Status);
        -: 2110:                            
        -: 2111:            /* Increment Command Error Counter */      
        1: 2112:            CFE_ES_TaskData.ErrCounter++;      
        -: 2113:        }
        -: 2114:
        -: 2115:        /* We are done outputting data to the dump file.  Close it. */
        3: 2116:        OS_close(FileDescriptor);
        -: 2117:    }
        -: 2118:    else
        -: 2119:    {
        1: 2120:        CFE_EVS_SendEvent(CFE_ES_CREATING_CDS_DUMP_ERR_EID,
        -: 2121:                          CFE_EVS_ERROR,
        -: 2122:                          "Error creating CDS dump file '%s', Status=0x%08X",
        -: 2123:                          DumpFilename, FileDescriptor);
        -: 2124:                            
        -: 2125:        /* Increment Command Error Counter */      
        1: 2126:        CFE_ES_TaskData.ErrCounter++;      
        -: 2127:    }
        -: 2128:    
        4: 2129:} /* End of CFE_ES_DumpCDSRegCmd() */
        -: 2130:
        -: 2131:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 2132:/*                                                                 */
        -: 2133:/* CFE_ES_FileWriteByteCntErr() -- Send event to inform ground that*/
        -: 2134:/*                                a byte count discrepancy has been*/
        -: 2135:/*                                detected during the file write   */
        -: 2136:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 2137:void CFE_ES_FileWriteByteCntErr(char *Filename,uint32 Requested,uint32 Actual)
       13: 2138:{
        -: 2139:
       13: 2140:    CFE_EVS_SendEvent(CFE_ES_FILEWRITE_ERR_EID,CFE_EVS_ERROR,
        -: 2141:                      "File write,byte cnt err,file %s,request=%d,actual=%d",
        -: 2142:                       Filename,Requested,Actual);
        -: 2143:
        -: 2144:
       13: 2145:}/* End of CFE_ES_FileWriteByteCntErr() */                                                
        -: 2146:
        -: 2147:/************************/
        -: 2148:/*  End of File Comment */
        -: 2149:/************************/
        -: 2150:
        -: 2151:
