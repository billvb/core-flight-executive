        -:    0:Source:/home/jdagostino/CProj/CFS/MKS/cfs-mission/cfe/fsw/cfe-core/src/es/cfe_es_erlog.c
        -:    0:Graph:cfe_es_erlog.gcno
        -:    0:Data:cfe_es_erlog.gcda
        -:    0:Runs:1
        -:    0:Programs:5
        -:    1:/*
        -:    2:**  File:  
        -:    3:**    cfe_es_erlog.c
        -:    4:**
        -:    5:**      Copyright (c) 2004-2006, United States government as represented by the 
        -:    6:**      administrator of the National Aeronautics Space Administration.  
        -:    7:**      All rights reserved. This software(cFE) was created at NASA's Goddard 
        -:    8:**      Space Flight Center pursuant to government contracts.
        -:    9:**
        -:   10:**      This software may be used only pursuant to a United States government
        -:   11:**      sponsored project and the United States government may not be charged
        -:   12:**      for use thereof. 
        -:   13:**
        -:   14:**  Purpose:  
        -:   15:**    This file implements the cFE Executive Services Exception and Reset Log functions.
        -:   16:**
        -:   17:**  References:
        -:   18:**     Flight Software Branch C Coding Standard Version 1.0a
        -:   19:**     cFE Flight Software Application Developers Guide
        -:   20:**
        -:   21:**  Notes:
        -:   22:** 
        -:   23:**  Modification History:
        -:   24:**
        -:   25:** $Log: cfe_es_erlog.c.gcov  $
        -:   25:** Revision 1.3 2010/11/04 17:46:36EDT jmdagost 
        -:   25:** Updated unit test results.
        -:   26:** Revision 1.2 2009/06/10 09:08:56EDT acudmore 
        -:   27:** Converted OS_Mem* and OS_BSP* API to CFE_PSP_* API
        -:   28:** Revision 1.1 2008/04/17 08:05:05EDT ruperera 
        -:   29:** Initial revision
        -:   30:** Member added to project c:/MKSDATA/MKS-REPOSITORY/MKS-CFE-PROJECT/fsw/cfe-core/src/es/project.pj
        -:   31:** Revision 1.5 2007/05/30 10:26:06EDT apcudmore 
        -:   32:** Added Exception handler support:
        -:   33:**  - BSP routine to attach processor exceptions
        -:   34:**  - context datatype and size define
        -:   35:**  - added default exception init for each app+task
        -:   36:** Revision 1.4 2007/03/22 10:26:22EST apcudmore 
        -:   37:** Implemented all code walkthrough items related to ES Application logic, commands, and telemetry.
        -:   38:** Revision 1.3 2007/03/13 16:10:54EST apcudmore 
        -:   39:** Implemented all ERLog and ES API code walkthrough items.
        -:   40:** Revision 1.2 2006/11/13 16:56:48EST apcudmore 
        -:   41:** Added call to get time in ER Log.
        -:   42:** Revision 1.1 2006/11/13 16:35:24EST apcudmore 
        -:   43:** Initial revision
        -:   44:** Member added to project d:/mksdata/MKS-CFE-PROJECT/fsw/cfe-core/src/es/project.pj
        -:   45:**
        -:   46:*/
        -:   47:
        -:   48:/*
        -:   49:** Required header files.
        -:   50:*/
        -:   51:#include "cfe.h"
        -:   52:#include "cfe_es.h"
        -:   53:#include "cfe_es_apps.h"
        -:   54:#include "cfe_es_global.h"
        -:   55:#include "cfe_es_log.h"
        -:   56:#include "cfe_psp.h"
        -:   57:
        -:   58:#include <string.h>
        -:   59:#include <stdio.h>
        -:   60:#include <stdarg.h>
        -:   61:
        -:   62:/*
        -:   63:** Function: CFE_ES_WriteToERLog
        -:   64:**
        -:   65:** Purpose:  Create an entry in the ES Exception and Reset Log. 
        -:   66:**
        -:   67:*/
        -:   68:int32 CFE_ES_WriteToERLog( uint32 EntryType,   uint32  ResetType, uint32 ResetSubtype,
        -:   69:                           char  *Description, uint32 *Context,   uint32 ContextSize )
       22:   70:{
        -:   71:   uint32 LogIdx;
        -:   72:
        -:   73:   /*
        -:   74:   ** Code
        -:   75:   */
        -:   76:
        -:   77:   /*
        -:   78:   ** Try to clean up an invalid ER log index variable.
        -:   79:   */
       22:   80:   if ( CFE_ES_ResetDataPtr->ERLogIndex >= CFE_ES_ER_LOG_ENTRIES )
        -:   81:   {
        1:   82:      CFE_ES_ResetDataPtr->ERLogIndex = 0;
        -:   83:   }
       22:   84:   LogIdx = CFE_ES_ResetDataPtr->ERLogIndex;
        -:   85:
        -:   86:   /*
        -:   87:   ** Now that the Local Index variable is set, increment the index for the next entry.
        -:   88:   */
       22:   89:   CFE_ES_ResetDataPtr->ERLogIndex++;
       22:   90:   if ( CFE_ES_ResetDataPtr->ERLogIndex >= CFE_ES_ER_LOG_ENTRIES )
        -:   91:   {
        1:   92:      CFE_ES_ResetDataPtr->ERLogIndex = 0;
        -:   93:   }
        -:   94:
        -:   95:
        -:   96:   /*
        -:   97:   ** Clear out the log entry we are about to use.
        -:   98:   */
       22:   99:   CFE_PSP_MemSet( (void *)&(CFE_ES_ResetDataPtr->ERLog[LogIdx]), 0, 
        -:  100:            sizeof (CFE_ES_ERLog_t));
        -:  101:
        -:  102:   /*
        -:  103:   ** Fill out the log fields
        -:  104:   */
       22:  105:   CFE_ES_ResetDataPtr->ERLog[LogIdx].LogEntryType = EntryType;
       22:  106:   CFE_ES_ResetDataPtr->ERLog[LogIdx].ResetType    = ResetType;
       22:  107:   CFE_ES_ResetDataPtr->ERLog[LogIdx].ResetSubtype = ResetSubtype;
       22:  108:   CFE_ES_ResetDataPtr->ERLog[LogIdx].BootSource   = CFE_ES_ResetDataPtr->ResetVars.BootSource;
       22:  109:   CFE_ES_ResetDataPtr->ERLog[LogIdx].ProcessorResetCount = 
        -:  110:                               CFE_ES_ResetDataPtr->ResetVars.ProcessorResetCount;
       22:  111:   CFE_ES_ResetDataPtr->ERLog[LogIdx].MaxProcessorResetCount = 
        -:  112:                               CFE_ES_ResetDataPtr->ResetVars.MaxProcessorResetCount;
        -:  113:
        -:  114:   /*
        -:  115:   ** Copy the ES Reset variables to the log (before they are modified by the log entry).
        -:  116:   */
       22:  117:   CFE_PSP_MemCpy((void *)&(CFE_ES_ResetDataPtr->ERLog[LogIdx].DebugVars), 
        -:  118:          (void *)&(CFE_ES_Global.DebugVars), 
        -:  119:          sizeof(CFE_ES_DebugVariables_t ));
        -:  120:
        -:  121:   /*
        -:  122:   ** Time Stamp the log entry with the system time 
        -:  123:   */
       22:  124:   CFE_ES_ResetDataPtr->ERLog[LogIdx].TimeCode = CFE_TIME_GetTime(); 
        -:  125:
        -:  126:   /*
        -:  127:   ** Copy the Description string to the log.
        -:  128:   */
       22:  129:   if ( Description  == NULL)
        -:  130:   {
        3:  131:      strncpy(CFE_ES_ResetDataPtr->ERLog[LogIdx].Description, "No Description String Given.", 80);
        -:  132:   }
        -:  133:   else
        -:  134:   {
       19:  135:      strncpy(CFE_ES_ResetDataPtr->ERLog[LogIdx].Description, Description, 80);
        -:  136:   }
        -:  137:
        -:  138:   /*
        -:  139:   ** In the case of an exception, copy the processor context data to the log.
        -:  140:   */
       22:  141:   if (Context != NULL )
        -:  142:   {
        -:  143:      /*
        -:  144:      ** Copy the processor context data (i.e. register dump).  Make sure that
        -:  145:      ** the passed-in context_size is not greater than the declared size in
        -:  146:      ** the ER Log log entry.
        -:  147:      */
        6:  148:      if ( ContextSize <= CFE_PSP_CPU_CONTEXT_SIZE )
        -:  149:      {
        4:  150:         CFE_PSP_MemCpy ( (void *)(CFE_ES_ResetDataPtr->ERLog[LogIdx].Context),
        -:  151:                  (void *)Context,
        -:  152:                  ContextSize);
        -:  153:      }
        -:  154:      else
        -:  155:      {
        2:  156:         CFE_PSP_MemCpy ( (void *)(CFE_ES_ResetDataPtr->ERLog[LogIdx].Context),
        -:  157:                  (void *)Context,
        -:  158:                  CFE_PSP_CPU_CONTEXT_SIZE);
        -:  159:      }   
        -:  160:      /*
        -:  161:      ** Indicate that context is valid.
        -:  162:      */
        6:  163:      CFE_ES_ResetDataPtr->ERLog[LogIdx].ContextIsPresent = TRUE;
        -:  164:   }
        -:  165:   else
        -:  166:   {
        -:  167:      /*
        -:  168:      ** Context is not valid
        -:  169:      */
       16:  170:      CFE_ES_ResetDataPtr->ERLog[LogIdx].ContextIsPresent = FALSE;
        -:  171:   } /* end if */
        -:  172:
        -:  173:   /*
        -:  174:   ** Increment the number of ER log entries made
        -:  175:   */
       22:  176:   CFE_ES_ResetDataPtr->ERLogEntries++;
        -:  177:
       22:  178:   return(CFE_SUCCESS);
        -:  179:    
        -:  180:} /* End of CFE_ES_WriteToERLog() */
        -:  181:
        -:  182:/* end of file */
