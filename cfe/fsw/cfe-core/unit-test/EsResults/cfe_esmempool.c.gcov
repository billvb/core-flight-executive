        -:    0:Source:/home/jdagostino/CProj/CFS/MKS/cfs-mission/cfe/fsw/cfe-core/src/es/cfe_esmempool.c
        -:    0:Graph:cfe_esmempool.gcno
        -:    0:Data:cfe_esmempool.gcda
        -:    0:Runs:1
        -:    0:Programs:6
        -:    1:/*
        -:    2:**  File:
        -:    3:**  cfe_esmempool.c
        -:    4:**
        -:    5:**
        -:    6:**
        -:    7:**      Copyright (c) 2004-2006, United States government as represented by the
        -:    8:**      administrator of the National Aeronautics Space Administration.
        -:    9:**      All rights reserved. This software(cFE) was created at NASA's Goddard
        -:   10:**      Space Flight Center pursuant to government contracts.
        -:   11:**
        -:   12:**      This software may be used only pursuant to a United States government
        -:   13:**      sponsored project and the United States government may not be charged
        -:   14:**      for use thereof.
        -:   15:**
        -:   16:**
        -:   17:**  Purpose:
        -:   18:**  Set of services for management of discrete sized memory pools.
        -:   19:**
        -:   20:**  References:
        -:   21:**     Flight Software Branch C Coding Standard Version 1.0a
        -:   22:**     cFE Flight Software Application Developers Guide
        -:   23:**
        -:   24:**  $Log: cfe_esmempool.c.gcov  $
        -:   24:**  Revision 1.3 2010/11/04 17:46:41EDT jmdagost 
        -:   24:**  Updated unit test results.
        -:   25:**  Revision 1.8 2010/11/04 14:17:32EDT acudmore 
        -:   26:**  Added option to disable memory pool alignment check.
        -:   27:**  Revision 1.7 2010/10/25 15:02:12EDT jmdagost 
        -:   28:**  Corrected bad apostrophe in prologue.
        -:   29:**  Revision 1.6 2010/10/20 12:34:54EDT jmdagost 
        -:   30:**  Major revision to make semaphore use for memory pool creation optional.  Also added NULL pointer tests.
        -:   31:**  Revision 1.5 2010/10/04 15:37:57EDT jmdagost 
        -:   32:**  Cleaned up copyright symbol.
        -:   33:**  Revision 1.4 2010/09/21 16:26:21EDT jmdagost 
        -:   34:**  Moved calls to CFE_ES_GetAppID() to inside error condition blocks.
        -:   35:**  Revision 1.3 2010/09/21 16:09:20EDT jmdagost 
        -:   36:**  Added cfe_es_task.h.
        -:   37:**  Revision 1.2 2009/07/29 15:55:42EDT aschoeni 
        -:   38:**  Added GetPoolBufInfo function to return size or invalidity of a buffer in a pool
        -:   39:**  Revision 1.1 2008/04/17 08:05:11EDT ruperera 
        -:   40:**  Initial revision
        -:   41:**  Member added to project c:/MKSDATA/MKS-REPOSITORY/MKS-CFE-PROJECT/fsw/cfe-core/src/es/project.pj
        -:   42:**  Revision 1.30 2007/08/07 12:52:44EDT David Kobe (dlkobe) 
        -:   43:**  Modified CFE_ES_GetPoolBuf API's first parameter to be of type uint32**
        -:   44:**  Revision 1.29 2007/05/04 20:07:53EDT dlkobe 
        -:   45:**  Added command to telemeter memory pool statistics
        -:   46:**  Revision 1.28 2007/04/04 16:27:58EDT dlkobe 
        -:   47:**  Syntax errors
        -:   48:**  Revision 1.26 2007/04/04 16:06:37EDT dlkobe 
        -:   49:**  Made numerous changes to correct issues identified during ES code walkthrough
        -:   50:**  Revision 1.25 2006/11/13 10:55:33GMT-05:00 njyanchik 
        -:   51:**  This CP fixes the errors that were found in the LDRA testing. The list of specific errors fixed is
        -:   52:**  in the solution to this DCR
        -:   53:**  Revision 1.24 2006/11/07 11:29:00GMT-05:00 dlkobe 
        -:   54:**  Changed CFE_ES_MIN_BLOCK_SIZE to CFE_ES_MEM_BLOCK_SIZE_01
        -:   55:**  Revision 1.21 2006/10/31 13:44:10GMT-05:00 dlkobe 
        -:   56:**  Replaced memory pool block sizes with symbols that are defined in the cfe_platform_cfg.h file
        -:   57:**  Revision 1.20 2006/10/31 10:35:31GMT-05:00 dlkobe 
        -:   58:**  Modified parameters to CFE_ES_GetBlockSize to be of correct uint32 type
        -:   59:**  Revision 1.19 2006/10/31 10:28:54GMT-05:00 dlkobe 
        -:   60:**  Added "Allocated" flag to memory block descriptor to prevent multiple deallocations
        -:   61:**
        -:   62:*/
        -:   63:
        -:   64:/*
        -:   65:** Includes
        -:   66:*/
        -:   67:#include "cfe.h"
        -:   68:#include "cfe_platform_cfg.h"
        -:   69:#include "cfe_es.h"
        -:   70:#include "cfe_es_task.h"
        -:   71:#include <stdio.h>
        -:   72:
        -:   73:/*****************************************************************************/
        -:   74:/*
        -:   75:** Local Macro Definitions
        -:   76:*/
        -:   77:#define CFE_ES_CHECK_PATTERN           0x5a5a
        -:   78:#define CFE_ES_MEMORY_ALLOCATED        0xaaaa
        -:   79:#define CFE_ES_MEMORY_DEALLOCATED      0xdddd
        -:   80:/*****************************************************************************/
        -:   81:/*
        -:   82:** Type Definitions
        -:   83:*/
        -:   84:
        -:   85:typedef struct
        -:   86:{
        -:   87:  uint16    CheckBits;
        -:   88:  uint16    Allocated;
        -:   89:  uint32    Size;
        -:   90:  uint32   *Next;
        -:   91:} OS_PACK BD_t;
        -:   92:
        -:   93:typedef struct
        -:   94:{
        -:   95:  BD_t    *Top;
        -:   96:  uint32   NumCreated;
        -:   97:  uint32   NumFree;
        -:   98:  uint32   MaxSize;
        -:   99:} BlockSizeDesc_t;
        -:  100:/*
        -:  101:** Memory Pool Type
        -:  102:*/
        -:  103:typedef struct {
        -:  104:   uint32          *Start;
        -:  105:   uint32           Size;
        -:  106:   uint32           End;
        -:  107:   uint32          *Current;
        -:  108:   BlockSizeDesc_t *SizeDescPtr;
        -:  109:   uint16           CheckErrCntr;
        -:  110:   uint16           RequestCntr;
        -:  111:   uint32           MutexId;
        -:  112:   uint32           UseMutex;
        -:  113:   BlockSizeDesc_t  SizeDesc[CFE_ES_MAX_MEMPOOL_BLOCK_SIZES];
        -:  114:} OS_PACK Pool_t;
        -:  115:
        -:  116:uint32 CFE_ES_MemPoolDefSize[CFE_ES_MAX_MEMPOOL_BLOCK_SIZES] = 
        -:  117:{
        -:  118:    CFE_ES_MAX_BLOCK_SIZE,
        -:  119:    CFE_ES_MEM_BLOCK_SIZE_16,
        -:  120:    CFE_ES_MEM_BLOCK_SIZE_15,
        -:  121:    CFE_ES_MEM_BLOCK_SIZE_14,
        -:  122:    CFE_ES_MEM_BLOCK_SIZE_13,
        -:  123:    CFE_ES_MEM_BLOCK_SIZE_12,
        -:  124:    CFE_ES_MEM_BLOCK_SIZE_11,
        -:  125:    CFE_ES_MEM_BLOCK_SIZE_10,
        -:  126:    CFE_ES_MEM_BLOCK_SIZE_09,
        -:  127:    CFE_ES_MEM_BLOCK_SIZE_08,
        -:  128:    CFE_ES_MEM_BLOCK_SIZE_07,
        -:  129:    CFE_ES_MEM_BLOCK_SIZE_06,
        -:  130:    CFE_ES_MEM_BLOCK_SIZE_05,
        -:  131:    CFE_ES_MEM_BLOCK_SIZE_04,
        -:  132:    CFE_ES_MEM_BLOCK_SIZE_03,
        -:  133:    CFE_ES_MEM_BLOCK_SIZE_02,
        -:  134:    CFE_ES_MEM_BLOCK_SIZE_01
        -:  135:};
        -:  136:
        -:  137:/*****************************************************************************/
        -:  138:/*
        -:  139:** Local Function Prototypes
        -:  140:*/
        -:  141:uint32 CFE_ES_GetBlockSize(Pool_t  *PoolPtr, uint32 Size);
        -:  142:
        -:  143:/*****************************************************************************/
        -:  144:/*
        -:  145:** Functions
        -:  146:*/
        -:  147:
        -:  148:/*
        -:  149:** CFE_ES_PoolCreateNoSem will initialize a pre-allocated memory pool without using a mutex.
        -:  150:*/
        -:  151:int32 CFE_ES_PoolCreateNoSem(CFE_ES_MemHandle_t  *HandlePtr,
        -:  152:                             uint8               *MemPtr,
        -:  153:                             uint32               Size )
        3:  154:{
        3:  155:    return CFE_ES_PoolCreateEx(HandlePtr, MemPtr, Size, CFE_ES_MAX_MEMPOOL_BLOCK_SIZES, 
        -:  156:                               &CFE_ES_MemPoolDefSize[0],CFE_ES_NO_MUTEX);
        -:  157:}
        -:  158:
        -:  159:/*
        -:  160:** CFE_ES_PoolCreate will initialize a pre-allocated memory pool while using a mutex.
        -:  161:*/
        -:  162:int32 CFE_ES_PoolCreate(CFE_ES_MemHandle_t  *HandlePtr,
        -:  163:                        uint8               *MemPtr,
        -:  164:                        uint32               Size )
        5:  165:{
        5:  166:    return CFE_ES_PoolCreateEx(HandlePtr, MemPtr, Size, CFE_ES_MAX_MEMPOOL_BLOCK_SIZES, 
        -:  167:                               &CFE_ES_MemPoolDefSize[0],CFE_ES_USE_MUTEX);
        -:  168:}
        -:  169:
        -:  170:
        -:  171:int32 CFE_ES_PoolCreateEx(CFE_ES_MemHandle_t  *HandlePtr,
        -:  172:                          uint8               *MemPtr,
        -:  173:                          uint32               Size,
        -:  174:                          uint32               NumBlockSizes,
        -:  175:                          uint32              *BlockSizes,
        -:  176:                          uint16               UseMutex )
       13:  177:{
        -:  178:    char     MutexName[10];
        -:  179:    uint32   i;
        -:  180:    uint32   j;
        -:  181:    uint32   k;
        -:  182:    uint32  *BlockSizeArrayPtr;
        -:  183:    uint32   BlockSizeArraySize;
        -:  184:    uint32   MinBlockSize;
        -:  185:
        -:  186:   /*
        -:  187:   ** Local Variables
        -:  188:   */
       13:  189:   Pool_t *PoolPtr = (Pool_t *)MemPtr;
       13:  190:   *HandlePtr      = (uint32)MemPtr;
        -:  191:
        -:  192:   /* Force the size given to be 32 bit aligned */
       13:  193:   Size &= 0xFFFFFFFC;
        -:  194:
        -:  195:#ifdef CFE_ES_MEMPOOL_ALIGNED
        -:  196:   /* Determine if the memory pool address is 32-bit aligned */
       13:  197:   if ((((uint32)MemPtr) & 0x00000003) != 0)
        -:  198:   {
        1:  199:      CFE_ES_WriteToSysLog("CFE_ES:poolCreate Pool Address(0x%08X) is not 32-bit aligned.\n", (uint32)MemPtr);
        1:  200:      return(CFE_ES_BAD_ARGUMENT);
        -:  201:   }
        -:  202:#endif
        -:  203:   
        -:  204:   /* If too many sizes are specified, return an error */
       12:  205:   if (NumBlockSizes > CFE_ES_MAX_MEMPOOL_BLOCK_SIZES)
        -:  206:   {
        1:  207:      CFE_ES_WriteToSysLog("CFE_ES:poolCreate Num Block Sizes (%d) greater than max (%d)\n",
        -:  208:                           NumBlockSizes, CFE_ES_MAX_MEMPOOL_BLOCK_SIZES);
        1:  209:      return(CFE_ES_BAD_ARGUMENT);
        -:  210:   }
        -:  211:
       11:  212:   if ((UseMutex != CFE_ES_USE_MUTEX) && (UseMutex != CFE_ES_NO_MUTEX))
        -:  213:   {
        1:  214:      CFE_ES_WriteToSysLog("CFE_ES:poolCreate Invalid Mutex Usage Option (%d), must be %d or %d\n",
        -:  215:                           UseMutex, CFE_ES_NO_MUTEX, CFE_ES_USE_MUTEX);
        1:  216:      return(CFE_ES_BAD_ARGUMENT);
        -:  217:   }
        -:  218:   
       10:  219:   if (UseMutex == CFE_ES_USE_MUTEX)
        -:  220:   {
        -:  221:      /*
        -:  222:      ** Construct a name for the Mutex from the address
        -:  223:      ** This is needed only because OS_MutSemCreate requires
        -:  224:      ** a unique name for each semaphore created.
        -:  225:      */
        7:  226:      sprintf(MutexName, "%08X", (unsigned int)MemPtr);
        -:  227:
        -:  228:      /* create a semphore to protect this memory pool */
        7:  229:      OS_MutSemCreate(&(PoolPtr->MutexId), MutexName, 0);
        -:  230:
        -:  231:      /* Take the semaphore to ensure the mem pool is not being used during its creation */
        7:  232:      OS_MutSemTake(PoolPtr->MutexId);
        -:  233:   }
        -:  234:   
       10:  235:   PoolPtr->Start        = (uint32 *)*HandlePtr;
       10:  236:   PoolPtr->End          = (uint32)((uint8 *)PoolPtr->Start + Size);
       10:  237:   PoolPtr->Size         = Size;
       10:  238:   PoolPtr->Current      = (uint32 *)(MemPtr + sizeof(Pool_t));
       10:  239:   PoolPtr->SizeDescPtr  = NULL;
        -:  240:
       10:  241:   PoolPtr->CheckErrCntr = 0;
       10:  242:   PoolPtr->RequestCntr  = 0;
        -:  243:   
       10:  244:   PoolPtr->UseMutex     = UseMutex;
        -:  245:
      180:  246:   for (i=0; i<CFE_ES_MAX_MEMPOOL_BLOCK_SIZES; i++)
        -:  247:   {
      170:  248:      PoolPtr->SizeDesc[i].NumCreated = 0;
      170:  249:      PoolPtr->SizeDesc[i].NumFree = 0;
      170:  250:      PoolPtr->SizeDesc[i].MaxSize = 0;
      170:  251:      PoolPtr->SizeDesc[i].Top = NULL;
        -:  252:   }
        -:  253:
        -:  254:   /* Use default block sizes if none or too many sizes are specified */
       11:  255:   if ((NumBlockSizes == 0) || (BlockSizes == NULL))
        -:  256:   {
        1:  257:       BlockSizeArrayPtr = &CFE_ES_MemPoolDefSize[0];
        1:  258:       BlockSizeArraySize = CFE_ES_MAX_MEMPOOL_BLOCK_SIZES;
        -:  259:   }
        -:  260:   else
        -:  261:   {
        9:  262:       BlockSizeArrayPtr = BlockSizes;
        9:  263:       BlockSizeArraySize = NumBlockSizes;
        -:  264:   }
        -:  265:   
        -:  266:   /* Use specified block sizes but make sure they are ordered largest to smallest */
       10:  267:   MinBlockSize = 0xffffffff;
      167:  268:   for (i=0; i<BlockSizeArraySize; i++)
        -:  269:   {
      157:  270:        if ((BlockSizeArrayPtr[i] < MinBlockSize) && (BlockSizeArrayPtr[i] != 0))
        -:  271:        {
      154:  272:            MinBlockSize = BlockSizeArrayPtr[i];
        -:  273:        }
        -:  274:        
      157:  275:        j = 0;
     1695:  276:        while (j<CFE_ES_MAX_MEMPOOL_BLOCK_SIZES)
        -:  277:        {
     1381:  278:            if (BlockSizeArrayPtr[i] > PoolPtr->SizeDesc[j].MaxSize)
        -:  279:            {
        -:  280:                /* Make space for new size */
      163:  281:                for (k=i; k>j; k--)
        -:  282:                {
        6:  283:                    PoolPtr->SizeDesc[k].MaxSize = PoolPtr->SizeDesc[k-1].MaxSize;
        -:  284:                }
        -:  285:                
        -:  286:                /* Insert the size in the correct location */
      157:  287:                PoolPtr->SizeDesc[j].MaxSize = BlockSizeArrayPtr[i];
      157:  288:                j = CFE_ES_MAX_MEMPOOL_BLOCK_SIZES;
        -:  289:            }
        -:  290:            else
        -:  291:            {
     1224:  292:                j++;
        -:  293:            }
        -:  294:        }
        -:  295:   }
        -:  296:
       10:  297:   if (Size <= (sizeof(Pool_t) + MinBlockSize + sizeof(BD_t) ) )
        -:  298:   {  /* must be able make Pool management structure and at least one of the smallest blocks  */
        4:  299:      CFE_ES_WriteToSysLog("CFE_ES:poolCreate Pool size(%d) too small for management structure, need >=(%d)\n",
        -:  300:                            (int)Size,
        -:  301:                            (int)(sizeof(Pool_t) + MinBlockSize + sizeof(BD_t)) );
        -:  302:                            
        4:  303:      if (UseMutex == CFE_ES_USE_MUTEX)
        -:  304:      {
        -:  305:         /* Mutex is no longer needed with error in initialization.  Give it and delete it */        
        3:  306:         OS_MutSemGive(PoolPtr->MutexId);
        3:  307:         OS_MutSemDelete(PoolPtr->MutexId);
        -:  308:      }        
        4:  309:      return(CFE_ES_BAD_ARGUMENT);
        -:  310:   }
        -:  311:
        6:  312:   if (UseMutex == CFE_ES_USE_MUTEX)
        -:  313:   {
        4:  314:       OS_MutSemGive(PoolPtr->MutexId);
        -:  315:   }
        -:  316:
        6:  317:   return(CFE_SUCCESS);
        -:  318:}
        -:  319:
        -:  320:/*
        -:  321:** Function:
        -:  322:**   CFE_ES_GetPoolBuf
        -:  323:**
        -:  324:** Purpose:
        -:  325:**   CFE_ES_GetPoolBuf allocates a block from the memory pool.
        -:  326:*/
        -:  327:int32 CFE_ES_GetPoolBuf(uint32             **BufPtr,
        -:  328:                        CFE_ES_MemHandle_t   Handle,
        -:  329:                        uint32               Size )
        9:  330:{
        9:  331:   Pool_t  * PoolPtr = (Pool_t *)Handle;
        -:  332:   uint32    Block;
        -:  333:   BD_t    * BdPtr;
        9:  334:   uint32    AppId= 0xFFFFFFFF;
        -:  335:
        9:  336:   if (PoolPtr != NULL)
        -:  337:   {
        8:  338:      if (Handle != (CFE_ES_MemHandle_t)PoolPtr->Start)
        -:  339:      {
        1:  340:         CFE_ES_GetAppID(&AppId);
        1:  341:         CFE_ES_WriteToSysLog("CFE_ES:getPoolBuf err:Bad handle(0x%08X) AppId=%d\n",Handle,AppId);
        1:  342:         return(CFE_ES_ERR_MEM_HANDLE);
        -:  343:      }
        -:  344:   }
        -:  345:   else
        -:  346:   {
        1:  347:      CFE_ES_GetAppID(&AppId);
        1:  348:      CFE_ES_WriteToSysLog("CFE_ES:getPoolBuf err:Bad handle(0x%08X) AppId=%d\n",Handle,AppId);
        1:  349:      return(CFE_ES_ERR_MEM_HANDLE);
        -:  350:   }
        -:  351:
        -:  352:
        7:  353:   if (PoolPtr->UseMutex == CFE_ES_USE_MUTEX)
        -:  354:   {
        7:  355:      OS_MutSemTake(PoolPtr->MutexId);
        -:  356:   }
        -:  357:
        7:  358:   *BufPtr = NULL;
        -:  359:
        7:  360:   Block = CFE_ES_GetBlockSize(PoolPtr, Size);
        7:  361:   if (Block == 0xFFFFFFFF)
        -:  362:   {
        1:  363:      CFE_ES_WriteToSysLog("CFE_ES:getPoolBuf err:size(%d) > max(%d).\n",Size,CFE_ES_MAX_BLOCK_SIZE);
        1:  364:      if (PoolPtr->UseMutex == CFE_ES_USE_MUTEX)
        -:  365:      {
        1:  366:         OS_MutSemGive(PoolPtr->MutexId);
        -:  367:      }
        1:  368:      return(CFE_ES_ERR_MEM_BLOCK_SIZE);
        -:  369:   }
        -:  370:
        -:  371:   /*
        -:  372:   ** Check if any of the requested size are available
        -:  373:   */
        6:  374:   if (PoolPtr->SizeDescPtr->Top != NULL) /* Set by GetBlockSize call */
        -:  375:   {
        -:  376:         /*
        -:  377:         ** Get it off the top on the list
        -:  378:         */
        1:  379:         BdPtr = PoolPtr->SizeDescPtr->Top;
        -:  380:
        1:  381:         BdPtr->CheckBits          = CFE_ES_CHECK_PATTERN;
        1:  382:         BdPtr->Allocated          = CFE_ES_MEMORY_ALLOCATED; /* Flag memory block as allocated */
        1:  383:         BdPtr->Size               = Block;
        1:  384:         PoolPtr->SizeDescPtr->Top = (BD_t *)BdPtr->Next;
        1:  385:         PoolPtr->SizeDescPtr->NumFree--;
        1:  386:         BdPtr->Next               = NULL;
        1:  387:         *BufPtr                   = (uint32 *)(BdPtr + 1);
        -:  388:    }
        -:  389:    else /* go make one */
        -:  390:    {
        5:  391:         BdPtr = (BD_t *)PoolPtr->Current; /* point to new memory block   */
        5:  392:         if ( ((uint32)BdPtr + sizeof(BD_t) + Block ) >= PoolPtr->End ){ /* can't fit in remaing mem */
        1:  393:            CFE_ES_WriteToSysLog("CFE_ES:getPoolBuf err:Request won't fit in remaining memory\n");
        1:  394:            if (PoolPtr->UseMutex == CFE_ES_USE_MUTEX)
        -:  395:            {
        1:  396:               OS_MutSemGive(PoolPtr->MutexId);
        -:  397:            }
        1:  398:            return(CFE_ES_ERR_MEM_BLOCK_SIZE);
        -:  399:         }
        -:  400:
        4:  401:         PoolPtr->SizeDescPtr->NumCreated++;
        4:  402:         PoolPtr->RequestCntr++;
        -:  403:
        -:  404:         /*
        -:  405:         ** create the buffer descriptor at the front of it
        -:  406:         */
        4:  407:         BdPtr->CheckBits = CFE_ES_CHECK_PATTERN;
        4:  408:         BdPtr->Allocated = CFE_ES_MEMORY_ALLOCATED; /* Flag memory block as allocated */
        4:  409:         BdPtr->Size      = Block;
        4:  410:         BdPtr->Next      = NULL;
        4:  411:         *BufPtr          = (uint32 *)(BdPtr + 1);
        -:  412:
        -:  413:         /*
        -:  414:         ** adjust pool current pointer
        -:  415:         */
        4:  416:         PoolPtr->Current = (uint32 *)( (uint8 *)PoolPtr->Current
        -:  417:                                             + Block
        -:  418:                                             + sizeof(BD_t) );
        -:  419:     }
        -:  420:
        5:  421:     if (PoolPtr->UseMutex == CFE_ES_USE_MUTEX)
        -:  422:     {
        5:  423:        OS_MutSemGive(PoolPtr->MutexId);
        -:  424:     }
        5:  425:     return (int32)Block;
        -:  426:}
        -:  427:
        -:  428:/*
        -:  429:** CFE_ES_GetPoolBufInfo gets the size of the specified block (if it exists).
        -:  430:*/
        -:  431:int32 CFE_ES_GetPoolBufInfo(CFE_ES_MemHandle_t   Handle,
        -:  432:                            uint32             * BufPtr)
        5:  433:{
        5:  434:  Pool_t   *PoolPtr =  (Pool_t *)Handle;
        5:  435:  BD_t     *BdPtr    = (BD_t *) ((uint8 *)BufPtr - sizeof(BD_t));
        -:  436:
        5:  437:  if (PoolPtr != NULL)
        -:  438:  {
        4:  439:     if ( ((uint32)BdPtr < Handle) || ((uint32)BdPtr >= (PoolPtr->End - sizeof(BD_t))) )
        -:  440:     {
        -:  441:         /* sanity check */
        1:  442:         return(CFE_ES_BUFFER_NOT_IN_POOL);
        -:  443:     }
        -:  444:  }
        -:  445:  else
        -:  446:  {
        -:  447:      /* bad handle */
        1:  448:      return(CFE_ES_ERR_MEM_HANDLE);
        -:  449:  }
        -:  450:  
        3:  451:  if (PoolPtr->UseMutex == CFE_ES_USE_MUTEX)
        -:  452:  {
        3:  453:     OS_MutSemTake(PoolPtr->MutexId);
        -:  454:  }
        -:  455:
        -:  456:  /*
        -:  457:  ** Simple sanity checks for descriptor
        -:  458:  */
        -:  459:  
        -:  460:  /* If a block is no longer allocated, report an error */
        3:  461:  if (BdPtr->Allocated != CFE_ES_MEMORY_ALLOCATED)
        -:  462:  {
        1:  463:      if (PoolPtr->UseMutex == CFE_ES_USE_MUTEX)
        -:  464:      {
        1:  465:         OS_MutSemGive(PoolPtr->MutexId);
        -:  466:      }
        1:  467:      return(CFE_ES_ERR_MEM_HANDLE);
        -:  468:  }
        -:  469:  
        2:  470:  if (BdPtr->CheckBits != CFE_ES_CHECK_PATTERN)
        -:  471:  {
        1:  472:      if (PoolPtr->UseMutex == CFE_ES_USE_MUTEX)
        -:  473:      {
        1:  474:         OS_MutSemGive(PoolPtr->MutexId);
        -:  475:      }
        1:  476:      return(CFE_ES_ERR_MEM_HANDLE);
        -:  477:  }
        -:  478:
        -:  479:  
        1:  480:  if (PoolPtr->UseMutex == CFE_ES_USE_MUTEX)
        -:  481:  {
        1:  482:     OS_MutSemGive(PoolPtr->MutexId);
        -:  483:  }
        1:  484:  return ((int32) (BdPtr->Size));
        -:  485:}
        -:  486:
        -:  487:/*
        -:  488:** CFE_ES_putPoolBuf returns a block back to the memory pool.
        -:  489:*/
        -:  490:int32 CFE_ES_PutPoolBuf(CFE_ES_MemHandle_t   Handle,
        -:  491:                        uint32             * BufPtr)
        7:  492:{
        7:  493:  Pool_t   *PoolPtr =  (Pool_t *)Handle;
        7:  494:  BD_t     *BdPtr    = (BD_t *) ((uint8 *)BufPtr - sizeof(BD_t));
        -:  495:  uint32    Block;
        -:  496:
        7:  497:  if (PoolPtr != NULL)
        -:  498:  {
        6:  499:     if ( ((uint32)BdPtr < Handle) || ((uint32)BdPtr >= (PoolPtr->End - sizeof(BD_t))) )
        -:  500:     {
        -:  501:         /* sanity check */
        1:  502:         CFE_ES_WriteToSysLog("CFE_ES:putPool-Invalid Memory Handle (0x%08X) or memory block (0x%08X).\n", 
        -:  503:                              (uint32) Handle, (uint32)BdPtr);
        1:  504:         return(CFE_ES_ERR_MEM_HANDLE);
        -:  505:     }
        -:  506:  }
        -:  507:  else
        -:  508:  {
        -:  509:      /* sanity check */
        1:  510:      CFE_ES_WriteToSysLog("CFE_ES:putPool-Invalid Memory Handle (0x%08X).\n", (uint32) Handle);
        1:  511:      return(CFE_ES_ERR_MEM_HANDLE);
        -:  512:  }
        -:  513:
        -:  514:  
        5:  515:  if (PoolPtr->UseMutex == CFE_ES_USE_MUTEX)
        -:  516:  {
        5:  517:     OS_MutSemTake(PoolPtr->MutexId);
        -:  518:  }
        -:  519:
        -:  520:  /*
        -:  521:  ** Simple sanity checks for descriptor
        -:  522:  */
        -:  523:  
        -:  524:  /* Don't allow a block that has already been deallocated to be deallocated again */
        5:  525:  if (BdPtr->Allocated != CFE_ES_MEMORY_ALLOCATED)
        -:  526:  {
        1:  527:      PoolPtr->CheckErrCntr++;
        1:  528:      CFE_ES_WriteToSysLog("CFE_ES:putPool-Deallocating unallocated memory block @ 0x%08X\n", (uint32)BdPtr);
        1:  529:      if (PoolPtr->UseMutex == CFE_ES_USE_MUTEX)
        -:  530:      {
        1:  531:         OS_MutSemGive(PoolPtr->MutexId);
        -:  532:      }
        1:  533:      return(CFE_ES_ERR_MEM_HANDLE);
        -:  534:  }
        -:  535:  
        4:  536:  if (BdPtr->CheckBits != CFE_ES_CHECK_PATTERN)
        -:  537:  {
        1:  538:      PoolPtr->CheckErrCntr++;
        1:  539:      CFE_ES_WriteToSysLog("CFE_ES:putPool-Invalid/Corrupted Memory descriptor @ 0x%08X\n", (uint32)BdPtr);
        1:  540:      if (PoolPtr->UseMutex == CFE_ES_USE_MUTEX)
        -:  541:      {
        1:  542:         OS_MutSemGive(PoolPtr->MutexId);
        -:  543:      }
        1:  544:      return(CFE_ES_ERR_MEM_HANDLE);
        -:  545:  }
        -:  546:
        3:  547:  Block = CFE_ES_GetBlockSize(PoolPtr, BdPtr->Size);
        -:  548:  
        3:  549:  if (Block == 0xFFFFFFFF)
        -:  550:  {
        1:  551:      PoolPtr->CheckErrCntr++;
        1:  552:      CFE_ES_WriteToSysLog("CFE_ES:putPool-Invalid/Corrupted Memory descriptor @ 0x%08X\n", (uint32)BdPtr);
        1:  553:      if (PoolPtr->UseMutex == CFE_ES_USE_MUTEX)
        -:  554:      {
        1:  555:         OS_MutSemGive(PoolPtr->MutexId);
        -:  556:      }
        1:  557:      return(CFE_ES_ERR_MEM_HANDLE);
        -:  558:  }
        -:  559:
        2:  560:  BdPtr->Allocated = CFE_ES_MEMORY_DEALLOCATED;
        2:  561:  BdPtr->Next = (uint32 *)PoolPtr->SizeDescPtr->Top; /* Set by GetBlockSize call */
        2:  562:  PoolPtr->SizeDescPtr->Top = BdPtr;
        2:  563:  PoolPtr->SizeDescPtr->NumFree++;
        -:  564:
        2:  565:  if (PoolPtr->UseMutex == CFE_ES_USE_MUTEX)
        -:  566:  {
        2:  567:     OS_MutSemGive(PoolPtr->MutexId);
        -:  568:  }
        2:  569:  return (int32)Block;
        -:  570:}
        -:  571:
        -:  572:/*
        -:  573:** Function:
        -:  574:**   ES_GetBlockSize
        -:  575:**
        -:  576:** Purpose:
        -:  577:**
        -:  578:*/
        -:  579:uint32 CFE_ES_GetBlockSize(Pool_t  *PoolPtr, uint32 Size)
       10:  580:{
       10:  581:  uint32 i=0;
        -:  582:
       10:  583:  PoolPtr->SizeDescPtr = NULL;
        -:  584:
        -:  585:  /* If caller is requesting a size larger than the largest allowed */
        -:  586:  /* then return an error code */  
       10:  587:  if (Size > PoolPtr->SizeDesc[0].MaxSize)
        -:  588:  {
        2:  589:        return(0xFFFFFFFF);
        -:  590:  }
        -:  591:  
        -:  592:  /* Locate the smallest size that holds the desired size */
       74:  593:  while ((i < (CFE_ES_MAX_MEMPOOL_BLOCK_SIZES-1)) &&
        -:  594:         (Size <= PoolPtr->SizeDesc[i+1].MaxSize))
        -:  595:  {
       58:  596:        i++;
        -:  597:  }
        -:  598:  
        8:  599:  PoolPtr->SizeDescPtr = &PoolPtr->SizeDesc[i];
        8:  600:  return(PoolPtr->SizeDesc[i].MaxSize);
        -:  601:}
        -:  602:
        -:  603:
        -:  604:/*
        -:  605:** Function:
        -:  606:**   CFE_ES_GetMemPoolStats
        -:  607:**
        -:  608:** Purpose:
        -:  609:**
        -:  610:*/
        -:  611:int32 CFE_ES_GetMemPoolStats(CFE_ES_MemPoolStats_t *BufPtr,
        -:  612:                             CFE_ES_MemHandle_t  Handle)
        2:  613:{
        2:  614:    uint32    AppId = 0xFFFFFFFF;
        -:  615:    Pool_t   *PoolPtr;
        -:  616:    uint32    i;
        -:  617:    
        2:  618:    PoolPtr = (Pool_t *)Handle;
        -:  619:
        2:  620:    if (Handle != (CFE_ES_MemHandle_t)PoolPtr->Start)
        -:  621:    {
        1:  622:        CFE_ES_GetAppID(&AppId);
        1:  623:        CFE_ES_WriteToSysLog("CFE_ES:getMemPoolStats err:Bad handle(0x%08X) AppId=%d\n", Handle, AppId);
        1:  624:        return(CFE_ES_ERR_MEM_HANDLE);
        -:  625:    }
        -:  626:
        1:  627:    BufPtr->PoolSize = PoolPtr->Size;
        1:  628:    BufPtr->NumBlocksRequested = PoolPtr->RequestCntr;
        1:  629:    BufPtr->CheckErrCtr = PoolPtr->CheckErrCntr;
        1:  630:    BufPtr->NumFreeBytes = PoolPtr->End - ((uint32)PoolPtr->Current);
        -:  631:    
       18:  632:    for (i=0; i<CFE_ES_MAX_MEMPOOL_BLOCK_SIZES; i++)
        -:  633:    {
       17:  634:        BufPtr->BlockStats[i].BlockSize = PoolPtr->SizeDesc[i].MaxSize;
       17:  635:        BufPtr->BlockStats[i].NumCreated = PoolPtr->SizeDesc[i].NumCreated;
       17:  636:        BufPtr->BlockStats[i].NumFree = PoolPtr->SizeDesc[i].NumFree;
        -:  637:    }
        -:  638:    
        1:  639:    return(CFE_SUCCESS);
        -:  640:}
        -:  641:
        -:  642:
        -:  643:/*
        -:  644:** Function:
        -:  645:**   CFE_ES_ValidateHandle
        -:  646:**
        -:  647:** Purpose:
        -:  648:**   Insures that the handle passed in meets all of the requirements of a valid handle.
        -:  649:*/
        -:  650:boolean CFE_ES_ValidateHandle(CFE_ES_MemHandle_t  Handle)
        6:  651:{
        6:  652:    boolean   HandleValid = TRUE;
        -:  653:    Pool_t   *PoolPtr;
        -:  654:    
        6:  655:    PoolPtr = (Pool_t *)Handle;
        -:  656:
        -:  657:    /* There are various ways to make sure the memory pool handle is valid */
        -:  658:   
        -:  659:    /* Step #1) Make sure the handle holds an address that is on a 32-bit boundary */
        6:  660:    if ((Handle & 0x03) != 0)
        -:  661:    {
        1:  662:        HandleValid = FALSE;
        -:  663:    }
        -:  664:    else 
        -:  665:    {
        -:  666:        /* Step #2) TODO!!!  INSERT CHECK TO MAKE SURE HANDLE CONTAINS A VALID MEMORY ADDRESS */
        -:  667:        /* Step #2a) Make sure Handle isn't a null pointer */
        5:  668:        if (PoolPtr == NULL)
        -:  669:        {
        1:  670:            HandleValid = FALSE;
        -:  671:        }
        -:  672:        /* Step #3) The first field of the pool structure should contain the start address of the pool */
        4:  673:        else if (Handle != (CFE_ES_MemHandle_t)PoolPtr->Start)
        -:  674:        {
        1:  675:            HandleValid = FALSE;
        -:  676:        }
        -:  677:        /* Step #4) The size of the memory pool must be a multiple of 4 bytes */
        3:  678:        else if ((PoolPtr->Size & 0x03) != 0)
        -:  679:        {
        1:  680:            HandleValid = FALSE;
        -:  681:        }
        -:  682:        /* Step #5) The pool structure should have an End pointer that is equal to the start plus the size */
        2:  683:        else if ((*PoolPtr->Start + PoolPtr->Size) != PoolPtr->End)
        -:  684:        {
        1:  685:            HandleValid = FALSE;
        -:  686:        }
        -:  687:    }
        -:  688:    
        6:  689:    return(HandleValid);
        -:  690:}
