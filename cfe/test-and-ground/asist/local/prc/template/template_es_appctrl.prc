PROC $sc_$cpu_es_appctrl
;*******************************************************************************
;  Test Name:  $sc_$cpu_es_appctrl
;  Test Level: Build Verification 
;  Test Type:  Functional
; 
;  Test Description
;	The purpose of this test is to verify the cFE Executive Services (ES)
;	software meets the requirements defined in the SRS for Application
;	control.
;
;  Requirements Tested
;    cES1005	Upon receipt of a Command, the cFE shall create the Command
;		specified Application by defining the Application in the System
;		Resources Definition using information from the Command
;		specified file, and beginning execution of the Application.
;    cES1005.1	The Command shall include the following parameters: 
;			a) Application Name
;			b) Application Entry Point
;			c) Application File Name
;			d) Application Stack Size
;			e) Application Priority
;			f) Application Memory Start Page
;			g) Application Memory Page Count
;    cES1005.2	The Command specified cFE Application file shall be in any valid
;		cFE file system including the volatile file system and the
;		non-volatile file system.
;    cES1005.3	If the Command specified Application is undefined then the cFE
;		shall reject the Command, increment the invalid command counter
;		and generate an event message.
;    cES1005.4	If the Command specified Application is already defined and
;		executing, then the cFE shall reject the Command, increment the
;		invalid Command counter and generate an event message.
;    cES1006	Upon receipt of a Command, the cFE shall delete the Command
;		specified Application including all child tasks.
;    cES1006.1	If the specified Application is undefined then the cFE shall
;		reject the Command, increment the invalid command counter and
;		generate an event message.
;    cES1007	Upon receipt of a Command, the cFE shall Restart the Command
;		specified Application.
;    cES1007.1	If the Command specified Application is undefined then the cFE
;		shall reject the Command, increment the invalid command counter
;		and generate an event message.
;    cES1007.2	If the original cFE Application file is not found then the cFE
;		shall reject the Command, increment the invalid Command counter,
;		and generate an event message.
;    cES1007.3	If the cFE Application Restart fails due to a non-parameter
;		error, then the cFE shall delete the Application, increment the
;		invalid Command counter, and generate an event message.
;    cES1008	Upon receipt of a Command, the cFE shall Reload the Command
;		specified cFE Application from the Command specified cFE
;		Application file.
;    cES1008.1	If the specified Application is undefined then the cFE shall
;		reject the Command, increment the invalid Command counter and
;		generate an event message.
;    cES1008.2	If the specified cFE Application file does not exist then the
;		cFE shall reject the command, increment the invalid Command
;		counter and generate an event message.
;    cES1008.3	If the cFE Application Reload fails due to a non-parameter
;		error, then the cFE shall delete the Application, increment the
;		invalid Command counter and generate an event message.
;    cES1011	Upon receipt of a Command, the cFE shall generate a message that
;		contains a summary of the Command specified Application's
;		properties and state as defined in the Systems Resources
;		Definition including:
;			a) cFE Application Name
;			b) cFE Application Filename
;			c) cFE Application Entry Point
;			d) cFE Application Priority
;			e) cFE Application Stack Size
;			f) cFE Application Memory Start Address
;			g) cFE Application Memory Size
;			h) cFE Application Child Task Count
;    cES1012	Upon receipt of a Command, the cFE shall generate a Command
;		specified file that contains all properties and states of all
;		cFE Applications that are defined in the Systems Resources
;		Definition.
;    cES1012.1	If a file is not specified, the cFE shall use the
;		<PLATFORM_DEFINED> filename.
;    cES1013	Upon receipt of a Command, the cFE shall submit to the operating
;		system shell, the string supplied as a parameter.
;    cES1013.1	Upon execution of the operating system Command, the cFE shall
;		generate one or more messages containing the ascii output
;		generated by the operating system command.
;    cES1026	Upon receipt of a Command, the cFE shall copy the following
;		Critical Data Store information to the Command specified file:
;			a) Critical Data Store Name
;			b) Size
;			c) Data Integrity Value
;    cES1027	Upon receipt of a Command, the cFE shall delete the Command
;		specified Critical Data Store.
;    cES1300	Upon receipt of a Request, the cFE shall register the calling
;		cFE Application with the system.
;    cES1302	Upon receipt of a Request, the cFE shall provide the Processor
;		ID on which the Request was made.
;    cES1303	Upon receipt of a Request, the cFE shall provide the Spacecraft
;		ID on which the Request was made.
;    cES1304	Upon receipt of a Request, the cFE shall provide the cFE
;		Application ID of the calling cFE Application.
;    cES1305	Upon receipt of a Request, the cFE shall provide the cFE Task
;		Name and cFE Application Name which corresponds to the specified
;		cFE Task ID.
;    cES1306	Upon receipt of a Request, the cFE shall provide the cFE
;		Application ID which corresponds to the specified cFE
;		Application Name.
;    cES1307	Upon receipt of a Request, the cFE shall provide the cFE
;		Application Name which corresponds to the specified cFE
;		Application ID.
;    cES1309	Upon receipt of a Request, the cFE shall delete the specified
;		Application including all child tasks.
;    cES1309.1	If the specified Application is undefined then the cFE shall
;		record the error in the System Log and return an error code.
;    cES1310	Upon receipt of a Request, the cFE shall Restart the specified
;		Application.
;    cES1310.1	If the specified Application is undefined then the cFE shall
;		record the error in the System Log and return an error code.
;    cES1310.2	If the original Application file is not found then the cFE shall
;		record the error in the System Log and return an error code.
;    cES1310.3	If the Application Restart fails due to a non-parameter error,
;		then the cFE shall record the error in the System Log and return
;		an error code.
;    cES1311	Upon receipt of a Request, the cFE shall create the specified
;		cFE Child Task within the cFE Application that owns the task and
;		begin execution of the task.
;    cES1311.1	In the event that the cFE Child Task cannot be created, the cFE
;		shall record the error in the System Log and return an error
;		code.
;    cES1311.2	In the event a child task attempts to create another child task
;		the cFE shall record the error in the System Log, and return an
;		error code.
;    cES1312	Upon receipt of a Request, the cFE shall delete the specified
;		cFE Child Task within the cFE Application that owns the task.
;    cES1312.1	If the specified task is the cFE Application Main Task, the
;		request shall record the error in the System Log and return an
;		error code.
;    cES1313	Upon receipt of a Request, the cFE shall register the calling
;		cFE Child Task with the system.
;    cES1314	Upon receipt of a Request, the cFE shall end the execution of
;		the calling cFE Child Task.
;    cES1314.1	If the specified task is the cFE Application Main Task, the
;		request shall record the error in the System Log and return an
;		error code.
;    cES1315	Upon receipt of a Request, the cFE shall reserve the the
;		specified amount of memory in the Critical Data Store for the
;		cFE Application using the specified name as an identifier.
;    cES1315.1	If the Critical Data Store exists for the Request specified name
;		but has a different size than what is specified in the Request,
;		the cFE shall remove the existing Critical Data Store and create
;		a new one using the Request specified name and size.
;    cES1315.2	If the Critical Data Store exists for the Request specified name
;		but the Data Integrity value is invalid, the cFE shall remove
;		the existing Critical Data Store and create a new one using the
;		Request specified name and size.
;    cES1316	Upon receipt of a Request, the cFE shall copy the contents from
;		the Request specified Critical Data Store to the Request
;		specified address.
;    cES1316.1	If the Data Integrity Value is invalid then the data shall not
;		be copied from the Critical Data Store.
;    cES1316.2	If the Request specified Critical Data Store does not exist then
;		the data shall not be copied.
;    cES1319	Upon receipt of a Request, the cFE shall exit the calling cFE
;		Application and delete the Applications' resources.
;    cES1320	Upon receipt of a Request, the cFE shall prepare a Memory Pool
;		for runtime memory allocation/de-allocation.
;    cES1320.1	If the specified size is not an integral multiple of 32 bit
;		words, the size shall be rounded up to an integral number of 32
;		bit words.
;    cES1320.2	If the specified address is not aligned on a 32 bit memory
;		boundary, the request shall return an error.
;    cES1321	Upon receipt of a Request, the cFE shall allocate a block of
;		memory of the specified size from the specified Memory Pool.
;    cES1321.1	If the specified size is not an integral multiple of 32 bit
;		words, the size shall be rounded up to an integral number of 32
;		bit words.
;    cES1321.2	If the specified Memory Pool identifier is invalid then the cFE
;		shall record the error in the System Log and return an error
;		code.
;    cES1321.3	If the specified size is too large for the specified Memory
;		Pool, the cFE shall record the error in the System Log and
;		return an error code.
;    cES1322	Upon receipt of a Request, the cFE shall deallocate the
;		specified block of memory from the specified Memory Pool
;    cES1322.1	If the specified Memory Pool identifier is invalid, then the cFE
;		shall record the error in the System Log and return an error
;		code.
;    cES1323	Upon receipt of a Request, the cFE shall calculate a Data
;		Integrity value over the given range of memory using the
;		specified algorithm. The algorithm shall be one of the
;		following:
;			XOR   - Exclusive OR
;			CRC16 - 16 Bit Cyclic Redundancy Check
;			CRC32 - 32 Bit Cyclic Redundancy Check
;    cES1324	Upon receipt of a Request, the cFE shall load and initialize a
;		hardware device driver and connect it with the specified
;		hardware handshaking and device processing code.
;    cES1325	Upon receipt of a Request, the cFE shall unload a specified
;		hardware device driver and de-allocate all previously allocated
;		resources used by the driver.
;    cES1326	Upon receipt of a Request, the cFE shall disable a specified
;		hardware device driver.
;    cES1326.1	If the specified hardware device driver is not loaded, then the
;		cFE shall record the error in the System Log and return an error
;		code.
;    cES1327	Upon receipt of a Request, the cFE shall re-enable a specified
;		hardware device driver.
;    cES1327.1	If the specified hardware device driver is not loaded, then the
;		cFE shall record the error in the System Log and return an error
;		code.
;    cES1328	Upon receipt of a Request, the cFE shall copy the data starting
;		at the Request specified address to the Request specified
;		Critical Data Store.
;    cES1328.1	The cFE shall calculate a Data Integrity Value for the Request
;		specified Critical Data Store and store it.
;    cES1328.2	If the Request specified Critical Data Store does not exist then
;		the data shall not be copied.
;    cES1700	The cFE shall support a <PLATFORM_DEFINED, TBD> cFE Applications
;    cES1708	The cFE shall support a (PLATFORM_DEFINED, TBD> byte Critical
;		Data Store.
;
;  Prerequisite Conditions
;       The ASIST ground station is up and running.
;
;  Assumptions and Constraints
;
;  Change History
;	Date		Name			Description
;	02/01/07	W. Moleski	Initial development.
;	02/06/12	W. Moleski	Added variable for ram disk.
;	02/21/12	W. Moleski	Replaced setupevt with setupevents.
;	09/09/14	W. Moleski	Reformatted the requirements text.
;	05/04/16	W. Moleski      Updated for 6.5.0 testing using CPU1 for
;                               	commanding and added a hostCPU variable
;					for the utility procs that connect to
;					the host IP.
;
;  Arguments
;	None 
;
;  Procedures Called
;	Name					Description
;  	ut_pfindicate		Directive to print the pass fail status
;				of a particular requirement number.
;  	ut_setupevents		Directive to look for a particular event
;				and increment a value in the CVT to
;				indicate receipt.
;  	ut_setrequirements	Directive to status cfe requirements.
;	ut_sendcmd     		Directive to send EVS commands Verifies command
;				processed and command error counters.
;
;  Expected Test Results and Analysis
;**********************************************************************
local logging = %liv (log_procedure)
%liv (log_procedure) = FALSE

#include "cfe_platform_cfg.h"
#include "ut_statusdefs.h"
#include "cfe_es_events.h"
#include "cfe_es_resetTypes.h"
#include "cfe_evs_events.h"
#include "cfe_sb_events.h"
#include "tst_es_events.h"
#include "osconfig.h"

%liv (log_procedure) = logging

;**********************************************************************
; Setup requirements checking
;**********************************************************************

#define ES_1005		0
#define ES_10051	1
#define ES_10052	2
#define ES_10053	3
#define ES_10054	4
#define ES_1006		5
#define ES_10061	6
#define ES_1007		7
#define ES_10071	8
#define ES_10072	9
#define ES_10073	10
#define ES_1008		11
#define ES_10081	12
#define ES_10082	13
#define ES_10083	14
#define ES_1011		15
#define ES_1012		16
#define ES_10121	17
#define ES_1013		18
#define ES_10131	19
#define ES_1026		20
#define ES_1027		21
#define ES_1300		22
#define ES_1302		23
#define ES_1303		24
#define ES_1304		25
#define ES_1305		26
#define ES_1306		27
#define ES_1307		28
#define ES_1309		29
#define ES_13091	30
#define ES_1310		31
#define ES_13101	32
#define ES_13102	33
#define ES_13103	34
#define ES_1311		35
#define ES_13111	36
#define ES_13112	37
#define ES_1312		38
#define ES_13121	39
#define ES_1313		40
#define ES_1314		41
#define ES_13141	42
#define ES_1315		43
#define ES_13151	44
#define ES_13152	45
#define ES_1316		46
#define ES_13161	47
#define ES_13162	48
#define ES_1319		49
#define ES_1320		50
#define ES_13201	51
#define ES_13202	52
#define ES_1321		53
#define ES_13211	54
#define ES_13212	55
#define ES_13213	56
#define ES_1322		57
#define ES_13221	58
#define ES_1323		59
#define ES_1324		60
#define ES_1325		61
#define ES_1326		62
#define ES_13261	63
#define ES_1327		64
#define ES_13271	65
#define ES_1328		66
#define ES_13281	67
#define ES_13282	68
#define ES_1700		69
#define ES_1708		70

global ut_req_array_size = 70
global ut_requirement[0 .. ut_req_array_size]

;**********************************************************************
;  Define local variables
;**********************************************************************
LOCAL i,j, numMaxErrors
LOCAL cmdcnt, errcnt
local found_app1

;**********************************************************************
; Initialize the global requirement values to "U" for Untested.
;**********************************************************************
FOR i = 0 to ut_req_array_size DO
   ut_requirement[i] = "U"
ENDDO

;**********************************************************************
; Set the local values 
;**********************************************************************
local cfe_requirements[0 .. ut_req_array_size] = ["ES_1005","ES_1005.1","ES_1005.2","ES_1005.3","ES_1005.4","ES_1006","ES_1006.1","ES_1007","ES_1007.1","ES_1007.2","ES_1007.3","ES_1008","ES_1008.1","ES_1008.2","ES_1008.3","ES_1011","ES_1012","ES_1012.1","ES_1013","ES_1013.1","ES_1026","ES_1027","ES_1300","ES_1302","ES_1303","ES_1304","ES_1305","ES_1306","ES_1307","ES_1309","ES_1309.1","ES_1310","ES_1310.1","ES_1310.2","ES_1310.3","ES_1311","ES_1311.1","ES_1311.2","ES_1312","ES_1312.1","ES_1313","ES_1314","ES_1314.1","ES_1315","ES_1315.1","ES_1315.2","ES_1316","ES_1316.1","ES_1316.2","ES_1319","ES_1320","ES_1320.1","ES_1320.2","ES_1321","ES_1321.1","ES_1321.2","ES_1321.3","ES_1322","ES_1322.1","ES_1323","ES_1324","ES_1325","ES_1326","ES_1326.1","ES_1327","ES_1327.1","ES_1328","ES_1328.1","ES_1328.2","ES_1700","ES_1708" ]

local work_dir = %env("WORK")
local filename
local ramDir = "RAM:0"
local hostCPU = "$CPU"

write ";*********************************************************************"
write "; Step 1.0: Application Control Command Test"
write ";*********************************************************************"
write "; Step 1.1: Command a Power-On Reset on $CPU"
write ";*********************************************************************"
/$SC_$CPU_ES_POWERONRESET
wait 10

close_data_center
wait 60

cfe_startup $CPU
wait 5

write ";*********************************************************************"
write "; Enable DEBUG Event Messages "
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", "CFE_EVS", CFE_EVS_ENAEVTTYPE_EID, "DEBUG", 1

ut_sendcmd "$SC_$CPU_EVS_ENAEVENTTYPE DEBUG"
if (UT_SC_Status = UT_SC_Success) then
  write "<*> Passed - Debug events have been enabled."
  if ($SC_$CPU_find_event[1].num_found_messages = 1) then
    Write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  else
    Write "<!> Failed - Event Message not received for ENAEVENTTYPE command."
  endif
else
  write "<!> Failed - Could not enable Debug events."
endif

write ";*********************************************************************"
write "; Step 1.2: Retrieve the properties for all running applications using"
write "; 	   a single command. "
write ";*********************************************************************"
;; Open the ES_APP_INFO page
page $SC_$CPU_ES_HK
page $SC_$CPU_ES_APP_INFO
wait 5

;  Dump the properties of all running apps
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_ALL_APPS_EID, "DEBUG", 1
s get_file_to_cvt (ramDir,"cfe_es_app_info.log","$sc_$cpu_es_app_info.log",hostCPU)
wait 5

if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1012) - App Info retrieval. Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_1012, "P"
else
  write "<!> Failed (1012) - App Info retrieval. Expected Event message ",CFE_ES_ALL_APPS_EID, " was not received"
  ut_setrequirements ES_1012, "F"
endif

write ";*********************************************************************"
write "; Step 1.3: Get the properties of each running application using the "
write "; 	   get single application property command. "
write ";*********************************************************************"
local stream

; Send commands to subscribe to the CFE_ES App Info packet
;; CPU1 is the default
stream = x'80b'

if ("$CPU" = "CPU2") then
   stream = x'82b'
elseif ("$CPU" = "CPU3") then
   stream = x'84b'
endif

;; Open the ES_APP_INFO page
page $SC_$CPU_ES_1APP_TLM
wait 5

;; Loop for each application getting the properties for each
for app_index = 1 to CFE_ES_MAX_APPLICATIONS do
  if ($SC_$CPU_ES_ALE[app_index].ES_AL_AppName <> "") then
    ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_ONE_APP_EID, "DEBUG", 1
    cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

    write "Sending Query App Info for '", $SC_$CPU_ES_ALE[app_index].ES_AL_AppName,"'"
    ;; Send the QueryApp command
    /$SC_$CPU_ES_QUERYAPP APPLICATION=$SC_$CPU_ES_ALE[app_index].ES_AL_AppName
    wait 5

    ; Look for the event
    if ($SC_$CPU_find_event[1].num_found_messages = 1) then
      write "<*> Passed (1011) - App Info event message ",$SC_$CPU_find_event[1].eventid, " received."
      ut_setrequirements ES_1011, "P"
    else
      write "<!> Failed (1011) - Expected Event message ",CFE_ES_ONE_APP_EID, " was not received"
      ut_setrequirements ES_1011, "F"
    endif

    ; write the app information
    write "QUERYAPP Packet Telemetry"
    write "AppName   = ",$SC_$CPU_ES_APPNAME
    write "AppID     = ",$SC_$CPU_ES_APPID
    write "Type      = ",$SC_$CPU_ES_APPTYPE
    write "StackSize = ",$SC_$CPU_ES_STACKSIZE
    write "ModuleID  = ",$SC_$CPU_ES_MODULEID
    write "AddrValid = ",$SC_$CPU_ES_ADDRSVALID
    write "Code Addr = ",$SC_$CPU_ES_CODEADDRESS
    write "Code Size = ",$SC_$CPU_ES_CODESIZE
    write "Data Addr = ",$SC_$CPU_ES_DATAADDRESS
    write "Data Size = ",$SC_$CPU_ES_DATASIZE
    write "BSS Addr = ",$SC_$CPU_ES_BSSADDRESS
    write "BSS Size = ",$SC_$CPU_ES_BSSSIZE
    write "StartAddr = ",$SC_$CPU_ES_STARTADDR
    write "ExcptnActn= ",$SC_$CPU_ES_EXCEPTNACTN
    write "Priority  = ",$SC_$CPU_ES_PRIORITY
    write "Task ID   = ",$SC_$CPU_ES_MAINTASKID
    write "ExeCtr    = ",$SC_$CPU_ES_EXECUTIONCTR
    write "ChildTasks= ",$SC_$CPU_ES_CHILDTASKS
    write "Entry Pt  = ",$SC_$CPU_ES_APPENTRYPT
    write "Load File = ",$SC_$CPU_ES_APPFILENAME
    write "Task Name = ",$SC_$CPU_ES_MAINTASKNAME

    write "App File Telemetry"
    write "AppName   = ",$SC_$CPU_ES_ALE[app_index].ES_AL_APPNAME
    write "AppID     = ",$SC_$CPU_ES_ALE[app_index].ES_AL_APPID
    write "Type      = ",$SC_$CPU_ES_ALE[app_index].ES_AL_APPTYPE
    write "StackSize = ",$SC_$CPU_ES_ALE[app_index].ES_AL_STACKSIZE
    write "ModuleID  = ",$SC_$CPU_ES_ALE[app_index].ES_AL_MODULEID
    write "AddrValid = ",$SC_$CPU_ES_ALE[app_index].ES_AL_ADDRSVALID
    write "Code Addr = ",$SC_$CPU_ES_ALE[app_index].ES_AL_CODEADDR
    write "Code Size = ",$SC_$CPU_ES_ALE[app_index].ES_AL_CODESIZE
    write "Data Addr = ",$SC_$CPU_ES_ALE[app_index].ES_AL_DATAADDR
    write "Data Size = ",$SC_$CPU_ES_ALE[app_index].ES_AL_DATASIZE
    write "BSS Addr = ",$SC_$CPU_ES_ALE[app_index].ES_AL_BSSADDR
    write "BSS Size = ",$SC_$CPU_ES_ALE[app_index].ES_AL_BSSSIZE
    write "StartAddr = ",$SC_$CPU_ES_ALE[app_index].ES_AL_STARTADDR
    write "ExcptnActn= ",$SC_$CPU_ES_ALE[app_index].ES_AL_EXCEPTIONACTION
    write "Priority  = ",$SC_$CPU_ES_ALE[app_index].ES_AL_PRIORITY
    write "Task ID   = ",$SC_$CPU_ES_ALE[app_index].ES_AL_TASKID
    write "ExeCtr    = ",$SC_$CPU_ES_ALE[app_index].ES_AL_EXECUTIONCTR
    write "ChildTasks= ",$SC_$CPU_ES_ALE[app_index].ES_AL_CHILDTASKS
    write "Entry Pt  = ",$SC_$CPU_ES_ALE[app_index].ES_AL_ENTRYPOINT
    write "Load File = ",$SC_$CPU_ES_ALE[app_index].ES_AL_FILENAME
    write "Task Name = ",$SC_$CPU_ES_ALE[app_index].ES_AL_TASKNAME
  endif
enddo

write ";*********************************************************************"
write "; Step 1.4: Startup three test applications. Make sure at least one "
write "; 	   resides in the non-volatile memory."
write ";*********************************************************************"
;; Setup events to capture for TST_ES start
ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_START_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES, TST_ES_INIT_INF_EID, INFO, 2
ut_setupevents $SC, $CPU, CFE_SB, CFE_SB_PIPE_ADDED_EID, DEBUG, 3
ut_setupevents $SC, $CPU, CFE_SB, CFE_SB_SUBSCRIPTION_RCVD_EID, DEBUG, 4

;; Start the TST_ES app
write "; Starting the TST_ES application. "
s load_start_app ("TST_ES", hostCPU)
wait 5

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1005;1005.1) - TST_ES app started"
  write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1005, "P"
  ut_setrequirements ES_10051, "P"
else
  write "<!> Failed (1005;1005.1) - TST_ES app did not start."
  write "<!> Failed - Expected Event Message ", CFE_ES_START_INF_EID, " not received."
  ut_setrequirements ES_1005, "F"
  ut_setrequirements ES_10051, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1005;1005.1) - TST_ES app started"
  write "<*> Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1005, "P"
  ut_setrequirements ES_10051, "P"

  ; Send commands to subscribe to the TST_ES HK packet
  ;; CPU1 is the default
  stream = x'90D'

  if ("$CPU" = "CPU2") then
     stream = x'A0D'
  elseif ("$CPU" = "CPU3") then
     stream = x'B0D'
  endif

  ;; Start the TST_ES HK TLM packet
  /$SC_$CPU_TO_ADDPACKET STREAM=stream PKT_SIZE=X'0' PRIORITY=X'0' RELIABILITY=X'0' BUFLIMIT=x'4'

  ;; Add an Event Filter for the TST_ES HK Request Event in order to
  ;; only receive this event 1 time rather than every 4 seconds
  /$SC_$CPU_EVS_ADDEVTFLTR Application="TST_ES" Event_ID=39 Event_Mask=X'ffff'
else
  write "<!> Failed (1005;1005.1) - TST_ES app did not start."
  write "<!> Failed - TST_ES expected Event Message ", TST_ES_INIT_INF_EID, " not received."
  ut_setrequirements ES_1005, "F"
  ut_setrequirements ES_10051, "F"
endif

;; Report the count for expected events #3 & #4
if ($SC_$CPU_find_event[3].num_found_messages > 0) then
  write "<*> Event Msg ",$SC_$CPU_find_event[3].eventid," rcv'd; count = ", $SC_$CPU_find_event[3].num_found_messages
endif

if ($SC_$CPU_find_event[4].num_found_messages > 0) then
  write "<*> Event Msg ",$SC_$CPU_find_event[4].eventid," rcv'd; count = ", $SC_$CPU_find_event[4].num_found_messages
endif

;; Upload the TST_ES2 table load data files to /ram
s ftp_file (ramDir,"firsttbldef.dat","FirstTblDef.dat",hostCPU,"P")
wait 5
s ftp_file (ramDir,"secondtbldef.dat","SecondTblDef.dat",hostCPU,"P")
wait 5

;; Setup events to capture for TST_ES2 start
ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_START_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES2, TST_ES_INIT_INF_EID, INFO, 2
ut_setupevents $SC, $CPU, CFE_SB, CFE_SB_PIPE_ADDED_EID, DEBUG, 3
ut_setupevents $SC, $CPU, CFE_SB, CFE_SB_SUBSCRIPTION_RCVD_EID, DEBUG, 4

;; Start the TST_ES2 app
write "; Starting the TST_ES2 application. "
s load_start_app ("TST_ES2", hostCPU)
wait 5

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1005;1005.1) - TST_ES2 app started"
  write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1005, "P"
  ut_setrequirements ES_10051, "P"
else
  write "<!> Failed (1005;1005.1) - TST_ES2 app did not start."
  write "<!> Failed - Expected Event Message ", CFE_ES_START_INF_EID, " not received."
  ut_setrequirements ES_1005, "F"
  ut_setrequirements ES_10051, "F"
endif
                                                                                
;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1005;1005.1) - TST_ES2 app started"
  write "<*> Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1005, "P"
  ut_setrequirements ES_10051, "P"
else
  write "<!> Failed (1005;1005.1) - TST_ES2 app did not start."
  write "<!> Failed - Expected Event Message ", TST_ES_INIT_INF_EID, " not received."
  ut_setrequirements ES_1005, "F"
  ut_setrequirements ES_10051, "F"
endif

;; Report the count for expected events #3 & #4
if ($SC_$CPU_find_event[3].num_found_messages > 0) then
  write "<*> Event Msg ",$SC_$CPU_find_event[3].eventid," rcv'd; count = ", $SC_$CPU_find_event[3].num_found_messages
endif

if ($SC_$CPU_find_event[4].num_found_messages > 0) then
  write "<*> Event Msg ",$SC_$CPU_find_event[4].eventid," rcv'd; count = ", $SC_$CPU_find_event[4].num_found_messages
endif

;; Setup events to capture for TST_ES3 start
ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_START_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES3, TST_ES_INIT_INF_EID, INFO, 2
ut_setupevents $SC, $CPU, CFE_SB, CFE_SB_PIPE_ADDED_EID, DEBUG, 3
ut_setupevents $SC, $CPU, CFE_SB, CFE_SB_SUBSCRIPTION_RCVD_EID, DEBUG, 4
ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_START_ERR_EID, ERROR, 5

;; Load the TST_ES3 app into non-volatile memory
s load_app ("CF:0/apps","TST_ES3", hostCPU)
wait 5

;; Start the TST_ES3 app
cmdcnt = $SC_$CPU_ES_CMDPC + 1

/$SC_$CPU_ES_STARTAPP APPLICATION="TST_ES3" APP_ENTRY_PT="TST_ES3_TaskMain" APP_FILE_NAME="/cf/apps/tst_es3.o" STACKSIZE=x'2000' PRIORITY=x'c8' RESTARTCPU
wait 5

;; If the Start Error event was received, try to load the app again
if ($SC_$CPU_find_event[5].num_found_messages = 1) then
  ;; Load the TST_ES3 app into non-volatile memory
  s load_app ("CF:0/apps","TST_ES3", hostCPU)
  wait 5

  /$SC_$CPU_ES_STARTAPP APPLICATION="TST_ES3" APP_ENTRY_PT="TST_ES3_TaskMain" APP_FILE_NAME="/cf/apps/tst_es3.o" STACKSIZE=x'2000' PRIORITY=x'c8' RESTARTCPU
  wait 5
endif

ut_tlmwait $SC_$CPU_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1005.2) - TST_ES3 app in non-volatile memory started"
  ut_setrequirements ES_10052, "P"
else
  write "<!> Failed (1005.2) - TST_ES3 app in non-volatile memory did not start"
  ut_setrequirements ES_10052, "F"
  goto end_it
endif
wait 5

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1005;1005.1) - TST_ES3 app started"
  write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1005, "P"
  ut_setrequirements ES_10051, "P"
else
  write "<!> Failed (1005;1005.1) - TST_ES3 app did not start."
  write "<!> Failed - Expected Event Message ", CFE_ES_START_INF_EID, " not received."
  ut_setrequirements ES_1005, "F"
  ut_setrequirements ES_10051, "F"
endif
                                                                                
;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1005;1005.1) - TST_ES3 app started"
  write "<*> Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1005, "P"
  ut_setrequirements ES_10051, "P"
else
  write "<!> Failed (1005;1005.1) - TST_ES3 app did not start."
  write "<!> Failed - Expected Event Message ", TST_ES_INIT_INF_EID, " not received."
  ut_setrequirements ES_1005, "F"
  ut_setrequirements ES_10051, "F"
endif

;; Report the count for expected events #3 & #4
if ($SC_$CPU_find_event[3].num_found_messages > 0) then
  write "<*> Event Msg ",$SC_$CPU_find_event[3].eventid," rcv'd; count = ", $SC_$CPU_find_event[3].num_found_messages
endif

if ($SC_$CPU_find_event[4].num_found_messages > 0) then
  write "<*> Event Msg ",$SC_$CPU_find_event[4].eventid," rcv'd; count = ", $SC_$CPU_find_event[4].num_found_messages
endif

;; Dump all running apps again to verify that the TST_ES app is running
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_ALL_APPS_EID, "DEBUG", 1
s get_file_to_cvt (ramDir,"","$sc_$cpu_es_app_info.log",hostCPU,"ES_INFO")
wait 5

if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1012.1) - App Info retrieval. Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_10121, "P"
else
  write "<!> Failed (1012.1) - App Info retrieval. Expected Event message ",CFE_ES_ALL_APPS_EID, " was not received"
  ut_setrequirements ES_10121, "F"
endif

;; Check if the TST_ES app is in the info tlm
found_app1 = FALSE
for app_index = 1 to CFE_ES_MAX_APPLICATIONS do
  if ($SC_$CPU_ES_ALE[app_index].ES_AL_AppName = "TST_ES") then
    found_app1 = TRUE
  endif
enddo

if (found_app1 = TRUE) then
  ut_setrequirements ES_1300, "P"
else
  ut_setrequirements ES_1300, "F"
endif

write ";*********************************************************************"
write "; Step 1.5: Try to start an undefined application."
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_START_ERR_EID, "ERROR", 1

;; Start the TST_ES4 app
errcnt = $SC_$CPU_ES_CMDEC + 1

/$SC_$CPU_ES_STARTAPP APPLICATION="TST_ES4" APP_ENTRY_PT="TST_ES4_TaskMain" APP_FILE_NAME="/ram/tst_es4.o" STACKSIZE=x'2000' PRIORITY=x'c8' RESTARTCPU 

ut_tlmwait $SC_$CPU_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1005.3) - Start TST_ES4 app command failed as expected."
  ut_setrequirements ES_10053, "P"
else
  write "<!> Failed (1005.3) - Start of TST_ES4 app succeeded when failure was expected."
  ut_setrequirements ES_10053, "F"
endif

;; Check if the ERROR event was rcv'd
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1005.3) - Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_10053, "P"
else
  write "<!> Failed (1005.3) - Expected Event message ",CFE_ES_START_ERR_EID, " was not received"
  ut_setrequirements ES_10053, "F"
endif

write ";*********************************************************************"
write "; Step 1.6: Try to start an application that is already executing."
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_START_ERR_EID, "ERROR", 1

;; Start the TST_ES app
errcnt = $SC_$CPU_ES_CMDEC + 1

/$SC_$CPU_ES_STARTAPP APPLICATION="TST_ES" APP_ENTRY_PT="TST_ES_TaskMain" APP_FILE_NAME="/ram/tst_es.o" STACKSIZE=x'2000' PRIORITY=x'c8' RESTARTCPU 

ut_tlmwait $SC_$CPU_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1005.4) - Start of TST_ES app command failed as expected."
  ut_setrequirements ES_10054, "P"
else
  write "<!> Failed (1005.4) - Start of TST_ES app succeeded when failure was expected."
  ut_setrequirements ES_10054, "F"
endif

;; Check if the ERROR event was rcv'd
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1005.4) - Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_10054, "P"
else
  write "<!> Failed (1005.4) - Expected Event message ",CFE_ES_START_ERR_EID, " was not received"
  ut_setrequirements ES_10054, "F"
endif

write ";*********************************************************************"
write "; Step 1.7: Try to start an application without a filename specified."
write ";*********************************************************************"
ut_setupevents $SC,$CPU,CFE_ES,CFE_ES_START_INVALID_FILENAME_ERR_EID,ERROR,1

errcnt = $SC_$CPU_ES_CMDEC + 1

/$SC_$CPU_ES_STARTAPP APPLICATION="TST_ES3" APP_ENTRY_PT="TST_ES3_TaskMain" APP_FILE_NAME="" STACKSIZE=x'2000' PRIORITY=x'c8' RESTARTCPU 

ut_tlmwait $SC_$CPU_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed - STARTAPP command without a filename failed as expected."
else
  write "<!> Failed - STARTAPP command without a filename did not increment the error counter."
endif
wait 5

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed - Event message ",$SC_$CPU_find_event[1].eventid, " received"
else
  write "<!> Failed - Expected Event message ",CFE_ES_START_INVALID_FILENAME_ERR_EID, " was not received"
endif

write ";*********************************************************************"
write "; Step 1.8: Try to start an application with a stacksize < 8192."
write ";*********************************************************************"
ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_START_STACK_ERR_EID, ERROR, 1

errcnt = $SC_$CPU_ES_CMDEC + 1

/$SC_$CPU_ES_STARTAPP APPLICATION="TST_ES3" APP_ENTRY_PT="TST_ES3_TaskMain" APP_FILE_NAME="/ram/tst_es3.o" STACKSIZE=4096 PRIORITY=x'c8' RESTARTCPU 

ut_tlmwait $SC_$CPU_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed - STARTAPP command with a stack size < 8192 failed as expected."
else
  write "<!> Failed - STARTAPP command with a stack size < 8192 did not increment the error counter."
endif
wait 5

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed - Event message ",$SC_$CPU_find_event[1].eventid, " received"
else
  write "<!> Failed - Expected Event message ",CFE_ES_START_STACK_ERR_EID, " was not received"
endif

write ";*********************************************************************"
write "; Step 1.9: Delete an application."
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_STOP_DBG_EID, "DEBUG", 1
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_STOP_INF_EID, "INFO", 2

cmdcnt = $SC_$CPU_ES_CMDPC + 1

;; Check to make sure that TST_ES3 started
; Delete the TST_ES3 application
/$SC_$CPU_ES_DELETEAPP APPLICATION="TST_ES3"
wait 5

ut_tlmwait $SC_$CPU_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1006) - DeleteApp command executed properly."
  ut_setrequirements ES_1006, "P"
else
  write "<!> Failed (1006) - DeleteApp command failed."
  ut_setrequirements ES_1006, "F"
endif

;; Check if the event was rcv'd
ut_tlmwait $SC_$CPU_find_event[1].num_found_messages, 1
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1006) - Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_1006, "P"
else
  write "<!> Failed (1006) - Expected Event message ",CFE_ES_STOP_DBG_EID, " was not received"
  ut_setrequirements ES_1006, "F"
endif

;; Check if the second event was rcv'd (may need to wait for this one)
ut_tlmwait $SC_$CPU_find_event[2].num_found_messages, 1
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1006) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1006, "P"
else
  write "<!> Failed - Expected Event Message ",CFE_ES_STOP_INF_EID," not received."
  ut_setrequirements ES_1006, "F"
endif

;; Dump all running apps again to verify that the TST_ES app is running
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_ALL_APPS_EID, "DEBUG", 1
s get_file_to_cvt (ramDir,"cfe_es_app_info.log","$sc_$cpu_es_app_info.log",hostCPU)
wait 5

if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1012) - App Info retrieval. Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_1012, "P"
else
  write "<!> Failed (1012) - App Info retrieval. Expected Event message ",CFE_ES_ALL_APPS_EID, " was not received"
  ut_setrequirements ES_1012, "F"
endif

;; Verify that TST_ES3 is no longer listed
found_app1 = FALSE
for app_index = 1 to CFE_ES_MAX_APPLICATIONS do
  if ($SC_$CPU_ES_ALE[app_index].ES_AL_AppName = "TST_ES3") then
    found_app1 = TRUE
  endif
enddo

if (found_app1 = FALSE) then
  ut_setrequirements ES_1006, "P"
else
  ut_setrequirements ES_1006, "F"
endif

write ";*********************************************************************"
write "; Step 1.10: Try to delete an application that is not executing."
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_STOP_ERR2_EID, "ERROR", 1

errcnt = $SC_$CPU_ES_CMDEC + 1

; Delete a non-existing application
/$SC_$CPU_ES_DELETEAPP APPLICATION="TST_ES5"

ut_tlmwait $SC_$CPU_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1006.1) - DeleteApp command failed as expected."
  ut_setrequirements ES_10061, "P"
else
  write "<!> Failed (1006.1) - DeleteApp command worked when failure was expected."
  ut_setrequirements ES_10061, "F"
endif

;; Check if the event was rcv'd
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1006.1) - Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_10061, "P"
else
  write "<!> Failed (1006.1) - Expected Event message ",CFE_ES_STOP_ERR2_EID, " was not received"
  ut_setrequirements ES_10061, "F"
endif

write ";*********************************************************************"
write "; Step 1.11: Try to delete a CFE_CORE application."
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_STOP_ERR1_EID, "ERROR", 1

errcnt = $SC_$CPU_ES_CMDEC + 1

; Delete a non-existing application
/$SC_$CPU_ES_DELETEAPP APPLICATION="CFE_TBL"

ut_tlmwait $SC_$CPU_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed - Delete of a CFE_Core App failed as expected."
else
  write "<!> Failed - Delete of a CFE_Core App worked when failure was expected."
endif

;; Check if the event was rcv'd
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed - Event message ",$SC_$CPU_find_event[1].eventid, " received"
else
  write "<!> Failed - Expected Event message ",CFE_ES_STOP_ERR2_EID, " was not received"
endif

write ";*********************************************************************"
write "; Step 1.12: Restart an application."
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_RESTART_APP_DBG_EID, "DEBUG", 1
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_RESTART_APP_INF_EID, "INFO", 2

cmdcnt = $SC_$CPU_ES_CMDPC + 1

; Restart the TST_ES2 application
/$SC_$CPU_ES_RESTARTAPP APPLICATION="TST_ES2"
wait 5

ut_tlmwait $SC_$CPU_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1007) - Restart App command executed properly."
  ut_setrequirements ES_1007, "P"
else
  write "<!> Failed (1007) - Restart App command failed."
  ut_setrequirements ES_1007, "F"
endif

;; Check if the event was rcv'd
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1007) - Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_1007, "P"
else
  write "<!> Failed (1007) - Expected Event message ",CFE_ES_RESTART_APP_DBG_EID, " was not received"
  ut_setrequirements ES_1007, "F"
endif

;; Check if the second event was rcv'd (may need to wait for this one)
ut_tlmwait $SC_$CPU_find_event[2].num_found_messages, 1

if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1007) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1007, "P"
else
  write "<!> Failed (1007) - Expected Event Message ",CFE_ES_RESTART_APP_INF_EID," not received."
  ut_setrequirements ES_1007, "F"
endif

write ";*********************************************************************"
write "; Step 1.13: Try to restart an application that was not defined."
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_RESTART_APP_ERR2_EID, "ERROR", 1

errcnt = $SC_$CPU_ES_CMDEC + 1

; Restart a non-existing application
/$SC_$CPU_ES_RESTARTAPP APPLICATION="TST_ES5"
wait 5

ut_tlmwait $SC_$CPU_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1007.1) - Restart App command failed as expected."
  ut_setrequirements ES_10071, "P"
else
  write "<!> Failed (1007.1) - Restart App command worked when failure was expected."
  ut_setrequirements ES_10071, "F"
endif

;; Check if the event was rcv'd
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1007.1) - Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_10071, "P"
else
  write "<!> Failed (1007.1) - Expected Event message ",CFE_ES_RESTART_APP_ERR2_EID, " was not received"
  ut_setrequirements ES_10071, "F"
endif

write ";*********************************************************************"
write "; Step 1.14: Try to restart an application whose original startup file"
write "; 	    is missing."
write ";*********************************************************************"
;; Need to delete the original startup file on $CPU and then issue the command
s ftp_file (ramDir,"na","tst_es2.o",hostCPU,"R")

ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_RESTART_APP_DBG_EID, "DEBUG" 1
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_RESTART_APP_ERR3_EID, "ERROR" 2

cmdcnt = $SC_$CPU_ES_CMDPC + 1

; Restart a non-existing application
/$SC_$CPU_ES_RESTARTAPP APPLICATION="TST_ES2"
wait 5

ut_tlmwait $SC_$CPU_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1007.2) - Restart App command sent."
  ut_setrequirements ES_10072, "P"
else
  write "<!> Failed (1007.2) - Restart App command."
  ut_setrequirements ES_10072, "F"
endif

;; Check if the event was rcv'd
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1007.2) - Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_10072, "P"
else
  write "<!> Failed (1007.2) - Expected Event message ",CFE_ES_RESTART_APP_DBG_EID, " was not received"
  ut_setrequirements ES_10072, "F"
endif

;; Wait for the error event
ut_tlmwait $SC_$CPU_find_event[2].num_found_messages, 1
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1007.2) - Event message ",$SC_$CPU_find_event[2].eventid, " received"
  ut_setrequirements ES_10072, "P"
else
  write "<!> Failed (1007.2) - Expected Event message ",CFE_ES_RESTART_APP_ERR3_EID, " was not received"
  ut_setrequirements ES_10072, "F"
endif

;; Dump all running apps again to verify that the TST_ES2 app is not running
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_ALL_APPS_EID, "DEBUG", 1
s get_file_to_cvt (ramDir,"cfe_es_app_info.log","$sc_$cpu_es_app_info.log",hostCPU)
wait 5

if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1012) - App Info retrieval. Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_1012, "P"
else
  write "<!> Failed (1012) - App Info retrieval. Expected Event message ",CFE_ES_ALL_APPS_EID, " was not received"
  ut_setrequirements ES_1012, "F"
endif

;; Verify that TST_ES2 is no longer listed
found_app1 = FALSE
for app_index = 1 to CFE_ES_MAX_APPLICATIONS do
  if ($SC_$CPU_ES_ALE[app_index].ES_AL_AppName = "TST_ES2") then
    found_app1 = TRUE
  endif
enddo

if (found_app1 = FALSE) then
  ut_setrequirements ES_10072, "P"
else
  ut_setrequirements ES_10072, "F"
endif

write ";*********************************************************************"
write "; Step 1.15: Restart an application that will fail due to a "
write "; 	    non-parameter error."
write ";*********************************************************************"
;; Setup events to capture for TST_ES4 start
ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_START_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES4, TST_ES_INIT_INF_EID, INFO, 2
ut_setupevents $SC, $CPU, CFE_SB, CFE_SB_PIPE_ADDED_EID, DEBUG, 3
ut_setupevents $SC, $CPU, CFE_SB, CFE_SB_SUBSCRIPTION_RCVD_EID, DEBUG, 4

;; Start the TST_ES4 app
write "; Starting the TST_ES4 application. "
s load_start_app ("TST_ES4", hostCPU)
wait 5

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1005;1005.1) - TST_ES4 app started"
  write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1005, "P"
  ut_setrequirements ES_10051, "P"
else
  write "<!> Failed (1005;1005.1) - TST_ES4 app did not start."
  write "<!> Failed - Expected Event Message ", CFE_ES_START_INF_EID, " not received."
  ut_setrequirements ES_1005, "F"
  ut_setrequirements ES_10051, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1005;1005.1) - TST_ES4 app started"
  write "<*> Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1005, "P"
  ut_setrequirements ES_10051, "P"
else
  write "<!> Failed (1005;1005.1) - TST_ES4 app did not start."
  write "<!> Failed - Expected Event Message ", TST_ES_INIT_INF_EID, " not received."
  ut_setrequirements ES_1005, "F"
  ut_setrequirements ES_10051, "F"
endif

;; Report the count for expected events #3 & #4
if ($SC_$CPU_find_event[3].num_found_messages > 0) then
  write "<*> Event Msg ",$SC_$CPU_find_event[3].eventid," rcv'd; count = ", $SC_$CPU_find_event[3].num_found_messages
endif

if ($SC_$CPU_find_event[4].num_found_messages > 0) then
  write "<*> Event Msg ",$SC_$CPU_find_event[4].eventid," rcv'd; count = ", $SC_$CPU_find_event[4].num_found_messages
endif

;; Dump all running apps again to verify that the TST_ES4 app is running
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_ALL_APPS_EID, "DEBUG", 1
s get_file_to_cvt (ramDir,"cfe_es_app_info.log","$sc_$cpu_es_app_info.log",hostCPU)
wait 5

if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1012) - App Info retrieval. Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_1012, "P"
else
  write "<!> Failed (1012) - App Info retrieval. Expected Event message ",CFE_ES_ALL_APPS_EID, " was not received"
  ut_setrequirements ES_1012, "F"
endif

;; Verify that TST_ES4 is listed
found_app1 = FALSE
for app_index = 1 to CFE_ES_MAX_APPLICATIONS do
  if ($SC_$CPU_ES_ALE[app_index].ES_AL_AppName = "TST_ES4") then
    found_app1 = TRUE
  endif
enddo

;; Load a bad .o file for the app that you are going to restart
s ftp_file (ramDir,"secondtbldef.dat","tst_es4.o",hostCPU,"P")
wait 5

;; Restart TST_ES4 with a bad startup file
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_RESTART_APP_DBG_EID, "DEBUG" 1
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_RESTART_APP_ERR3_EID, "ERROR" 2

cmdcnt = $SC_$CPU_ES_CMDPC + 1

/$SC_$CPU_ES_RESTARTAPP APPLICATION="TST_ES4"
wait 5

ut_tlmwait $SC_$CPU_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1007.3) - Restart App command sent."
  ut_setrequirements ES_10073, "P"
else
  write "<!> Failed (1007.3) - Restart App command."
  ut_setrequirements ES_10073, "F"
endif

;; Check if the event was rcv'd
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1007.3) - Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_10073, "P"
else
  write "<!> Failed (1007.3) - Expected Event message ",CFE_ES_RESTART_APP_ERR2_EID, " was not received"
  ut_setrequirements ES_10073, "F"
endif

;; Look for expected error event
ut_tlmwait $SC_$CPU_find_event[2].num_found_messages, 1
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1007.3) - TST_ES4 app did not restart as expected."
  write "<*> Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_10073, "P"
else
  write "<!> Failed (1007.3) - TST_ES4 app restarted when failure was expected."
  ut_setrequirements ES_10073, "F"
endif

;; Dump all running apps again to verify that the TST_ES4 app is not running
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_ALL_APPS_EID, "DEBUG", 1
s get_file_to_cvt (ramDir,"cfe_es_app_info.log","$sc_$cpu_es_app_info.log",hostCPU)
wait 5

if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1012) - App Info retrieval. Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_1012, "P"
else
  write "<!> Failed (1012) - App Info retrieval. Expected Event message ",CFE_ES_ALL_APPS_EID, " was not received"
  ut_setrequirements ES_1012, "F"
endif

;; Verify that TST_ES4 is not listed
found_app1 = FALSE
for app_index = 1 to CFE_ES_MAX_APPLICATIONS do
  if ($SC_$CPU_ES_ALE[app_index].ES_AL_AppName = "TST_ES4") then
    found_app1 = TRUE
  endif
enddo

if (found_app1 = FALSE) then
  ut_setrequirements ES_10073, "P"
else
  ut_setrequirements ES_10073, "F"
endif

write ";*********************************************************************"
write "; Step 1.16: Try to restart a CFE_Core application."
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_RESTART_APP_ERR1_EID, "ERROR", 1

errcnt = $SC_$CPU_ES_CMDEC + 1

; Restart a non-existing application
/$SC_$CPU_ES_RESTARTAPP APPLICATION="CFE_TBL"
wait 5

ut_tlmwait $SC_$CPU_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed - Restart CFE_Core App failed as expected."
else
  write "<!> Failed - Restart CFE_Core App worked when failure was expected."
endif

;; Check if the event was rcv'd
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed - Event message ",$SC_$CPU_find_event[1].eventid, " received"
else
  write "<!> Failed - Expected Event message ",CFE_ES_RESTART_APP_ERR2_EID, " was not received"
endif

write ";*********************************************************************"
write "; Step 1.17: Reload an application."
write ";*********************************************************************"
;; Setup events to capture for TST_ES2 start
ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_START_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES2, TST_ES_INIT_INF_EID, INFO, 2
ut_setupevents $SC, $CPU, CFE_SB, CFE_SB_PIPE_ADDED_EID, DEBUG, 3
ut_setupevents $SC, $CPU, CFE_SB, CFE_SB_SUBSCRIPTION_RCVD_EID, DEBUG, 4

;; Start the TST_ES2 app
write "; Starting the TST_ES2 application. "
s load_start_app ("TST_ES2", hostCPU)
wait 5

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1005;1005.1) - TST_ES2 app started"
  write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1005, "P"
  ut_setrequirements ES_10051, "P"
else
  write "<!> Failed (1005;1005.1) - TST_ES2 app did not start."
  write "<!> Failed - Expected Event Message ", CFE_ES_START_INF_EID, " not received."
  ut_setrequirements ES_1005, "F"
  ut_setrequirements ES_10051, "F"
endif
                                                                                
;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1005;1005.1) - TST_ES2 app started"
  write "<*> Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1005, "P"
  ut_setrequirements ES_10051, "P"
else
  write "<!> Failed (1005;1005.1) - TST_ES2 app did not start."
  write "<!> Failed - Expected Event Message ", TST_ES_INIT_INF_EID, " not received."
  ut_setrequirements ES_1005, "F"
  ut_setrequirements ES_10051, "F"
endif

;; Report the count for expected events #3 & #4
if ($SC_$CPU_find_event[3].num_found_messages > 0) then
  write "<*> Event Msg ",$SC_$CPU_find_event[3].eventid," rcv'd; count = ", $SC_$CPU_find_event[3].num_found_messages
endif

if ($SC_$CPU_find_event[4].num_found_messages > 0) then
  write "<*> Event Msg ",$SC_$CPU_find_event[4].eventid," rcv'd; count = ", $SC_$CPU_find_event[4].num_found_messages
endif

;; Setup events for the Reload of TST_ES2
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_RELOAD_APP_DBG_EID, "DEBUG", 1
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_RELOAD_APP_INF_EID, "INFO", 2

cmdcnt = $SC_$CPU_ES_CMDPC + 1

; Reload the TST_ES2 application
/$SC_$CPU_ES_RELOADAPP APPLICATION="TST_ES2" APPFILENAME="/ram/tst_es2.o"
wait 5

ut_tlmwait $SC_$CPU_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1008) - Reload App command executed properly."
  ut_setrequirements ES_1008, "P"
else
  write "<!> Failed (1008) - Reload App command failed."
  ut_setrequirements ES_1008, "F"
endif

;; Check if the event was rcv'd
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1008) - Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_1008, "P"
else
  write "<!> Failed (1008) - Expected Event message ",CFE_ES_RELOAD_APP_DBG_EID, " was not received"
  ut_setrequirements ES_1008, "F"
endif

;; Look for event #2
ut_tlmwait $SC_$CPU_find_event[2].num_found_messages, 1
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1008) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1008, "P"
else
  write "<!> Failed (1008) - Expected Event Message ",CFE_ES_RELOAD_APP_INF_EID," not received."
  ut_setrequirements ES_1008, "F"
endif

write ";*********************************************************************"
write "; Step 1.18: Try to reload an application that was not defined."
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_RELOAD_APP_ERR2_EID, "ERROR", 1

errcnt = $SC_$CPU_ES_CMDEC + 1

; Restart a non-existing application
/$SC_$CPU_ES_RELOADAPP APPLICATION="TST_ES5" APPFILENAME="/ram/tst_es5.o"

ut_tlmwait $SC_$CPU_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1008.1) - Reload App command failed as expected."
  ut_setrequirements ES_10081, "P"
else
  write "<!> Failed (1008.1) - Reload App command worked when failure was expected."
  ut_setrequirements ES_10081, "F"
endif

;; Check if the event was rcv'd
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1008.1) - Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_10081, "P"
else
  write "<!> Failed (1008.1) - Expected Event message ",CFE_ES_RELOAD_APP_ERR2_EID, " was not received"
  ut_setrequirements ES_10081, "F"
endif

write ";*********************************************************************"
write "; Step 1.19: Try to reload an application with a file does not exist."
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_RELOAD_APP_DBG_EID, "DEBUG", 1
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_RELOAD_APP_ERR3_EID, "ERROR" 2

cmdcnt = $SC_$CPU_ES_CMDPC + 1

; Restart an existing application with a non-existing object file
/$SC_$CPU_ES_RELOADAPP APPLICATION="TST_ES2" APPFILENAME="/ram/tst_es5.o"
wait 5

ut_tlmwait $SC_$CPU_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1008.2) - Reload App command sent."
  ut_setrequirements ES_10082, "P"
else
  write "<!> Failed (1008.2) - Reload App command."
  ut_setrequirements ES_10082, "F"
endif

;; Check if the event was rcv'd
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1008.2) - Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_10082, "P"
else
  write "<!> Failed (1008.2) - Expected Event message ",CFE_ES_RELOAD_APP_DBG_EID, " was not received"
  ut_setrequirements ES_10082, "F"
endif

;; Look for event #2
ut_tlmwait $SC_$CPU_find_event[2].num_found_messages, 1
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1008.2) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_10082, "P"
else
  write "<!> Failed (1008.2) - Expected Event Message ",CFE_ES_RELOAD_APP_ERR3_EID," not received."
  ut_setrequirements ES_10082, "F"
endif

write ";*********************************************************************"
write "; Step 1.20: Reload an application that will fail due to a "
write "; 	    non-parameter error."
write ";*********************************************************************"
;; Setup events to capture for TST_ES2 start
ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_START_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES2, TST_ES_INIT_INF_EID, INFO, 2
ut_setupevents $SC, $CPU, CFE_SB, CFE_SB_PIPE_ADDED_EID, DEBUG, 3
ut_setupevents $SC, $CPU, CFE_SB, CFE_SB_SUBSCRIPTION_RCVD_EID, DEBUG, 4

;; Start the TST_ES2 app AGAIN
write "; Starting the TST_ES2 application. "
s load_start_app ("TST_ES2", hostCPU)
wait 5

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1005;1005.1) - TST_ES2 app started"
  write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1005, "P"
  ut_setrequirements ES_10051, "P"
else
  write "<!> Failed (1005;1005.1) - TST_ES2 app did not start."
  write "<!> Failed - Expected Event Message ", CFE_ES_START_INF_EID, " not received."
  ut_setrequirements ES_1005, "F"
  ut_setrequirements ES_10051, "F"
endif
                                                                                
;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1005;1005.1) - TST_ES2 app started"
  write "<*> Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1005, "P"
  ut_setrequirements ES_10051, "P"
else
  write "<!> Failed (1005;1005.1) - TST_ES2 app did not start."
  write "<!> Failed - Expected Event Message ", TST_ES_INIT_INF_EID, " not received."
  ut_setrequirements ES_1005, "F"
  ut_setrequirements ES_10051, "F"
endif

;; Report the count for expected events #3 & #4
if ($SC_$CPU_find_event[3].num_found_messages > 0) then
  write "<*> Event Msg ",$SC_$CPU_find_event[3].eventid," rcv'd; count = ", $SC_$CPU_find_event[3].num_found_messages
endif

if ($SC_$CPU_find_event[4].num_found_messages > 0) then
  write "<*> Event Msg ",$SC_$CPU_find_event[4].eventid," rcv'd; count = ", $SC_$CPU_find_event[4].num_found_messages
endif

;; Attempt to Reload TST_ES2 with a bad load file
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_RELOAD_APP_DBG_EID, "DEBUG", 1
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_RELOAD_APP_ERR3_EID, "ERROR" 2

cmdcnt = $SC_$CPU_ES_CMDPC + 1

; Restart an existing application with a non-existing object file
/$SC_$CPU_ES_RELOADAPP APPLICATION="TST_ES2" APPFILENAME="/ram/secondtbldef.dat"
wait 5

ut_tlmwait $SC_$CPU_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1008.3) - Reload App command sent."
  ut_setrequirements ES_10083, "P"
else
  write "<!> Failed (1008.3) - Reload App command."
  ut_setrequirements ES_10083, "F"
endif

;; Check if the event was rcv'd
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1008.3) - Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_10083, "P"
else
  write "<!> Failed (1008.3) - Expected Event message ",CFE_ES_RELOAD_APP_DBG_EID, " was not received"
  ut_setrequirements ES_10083, "F"
endif

;; Look for event #2
ut_tlmwait $SC_$CPU_find_event[2].num_found_messages, 1
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1008.3) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_10083, "P"
else
  write "<!> Failed (1008.3) - Expected Event Message ",CFE_ES_RELOAD_APP_ERR3_EID," not received."
  ut_setrequirements ES_10083, "F"
endif

write ";*********************************************************************"
write "; Step 1.21: Attempt to reload a CFE_Core Application."
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_RELOAD_APP_ERR1_EID, "ERROR", 1

errcnt = $SC_$CPU_ES_CMDEC + 1

; Restart a non-existing application
/$SC_$CPU_ES_RELOADAPP APPLICATION="CFE_TBL" APPFILENAME=""

ut_tlmwait $SC_$CPU_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed - Reload a CFE_Core App failed as expected."
else
  write "<!> Failed (1008.1) - Reload a CFE_Core App worked when failure was expected."
endif

;; Check if the event was rcv'd
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed - Event message ",$SC_$CPU_find_event[1].eventid, " received"
else
  write "<!> Failed - Expected Event message ",CFE_ES_RELOAD_APP_ERR2_EID, " was not received"
endif

write ";*********************************************************************"
write "; Step 1.22: Startup two test applications so that a total of 3 are"
write "; 	    running."
write ";*********************************************************************"
;; Setup events to capture for TST_ES2 start
ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_START_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES2, TST_ES_INIT_INF_EID, INFO, 2
ut_setupevents $SC, $CPU, CFE_SB, CFE_SB_PIPE_ADDED_EID, DEBUG, 3
ut_setupevents $SC, $CPU, CFE_SB, CFE_SB_SUBSCRIPTION_RCVD_EID, DEBUG, 4

;; Start the TST_ES2 app
write "; Starting the TST_ES2 application. "
s load_start_app ("TST_ES2", hostCPU)
wait 5

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1005;1005.1) - TST_ES2 app started"
  write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1005, "P"
  ut_setrequirements ES_10051, "P"
else
  write "<!> Failed (1005;1005.1) - TST_ES2 app did not start."
  write "<!> Failed - Expected Event Message ", CFE_ES_START_INF_EID, " not received."
  ut_setrequirements ES_1005, "F"
  ut_setrequirements ES_10051, "F"
endif
                                                                                
;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1005;1005.1) - TST_ES2 app started"
  write "<*> Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1005, "P"
  ut_setrequirements ES_10051, "P"
else
  write "<!> Failed (1005;1005.1) - TST_ES2 app did not start."
  write "<!> Failed - Expected Event Message ", TST_ES_INIT_INF_EID, " not received."
  ut_setrequirements ES_1005, "F"
  ut_setrequirements ES_10051, "F"
endif

;; Report the count for expected events #3 & #4
if ($SC_$CPU_find_event[3].num_found_messages > 0) then
  write "<*> Event Msg ",$SC_$CPU_find_event[3].eventid," rcv'd; count = ", $SC_$CPU_find_event[3].num_found_messages
endif

if ($SC_$CPU_find_event[4].num_found_messages > 0) then
  write "<*> Event Msg ",$SC_$CPU_find_event[4].eventid," rcv'd; count = ", $SC_$CPU_find_event[4].num_found_messages
endif

;; Setup events to capture for TST_ES3 start
ut_setupevents $SC, $CPU, TST_ES3, TST_ES_INIT_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_START_INF_EID, INFO, 2
ut_setupevents $SC, $CPU, CFE_SB, CFE_SB_PIPE_ADDED_EID, DEBUG, 3
ut_setupevents $SC, $CPU, CFE_SB, CFE_SB_SUBSCRIPTION_RCVD_EID, DEBUG, 4

;; Start the TST_ES3 app
cmdcnt = $SC_$CPU_ES_CMDPC + 1

/$SC_$CPU_ES_STARTAPP APPLICATION="TST_ES3" APP_ENTRY_PT="TST_ES3_TaskMain" APP_FILE_NAME="/cf/apps/tst_es3.o" STACKSIZE=x'2000' PRIORITY=x'c8' RESTARTCPU 

ut_tlmwait $SC_$CPU_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1005.2) - TST_ES3 app in non-volatile memory started"
  ut_setrequirements ES_10052, "P"
else
  write "<!> Failed (1005.2) - TST_ES3 app in non-volatile memory did not start"
  ut_setrequirements ES_10052, "F"
endif
wait 5

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1005;1005.1) - TST_ES3 app started"
  write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1005, "P"
  ut_setrequirements ES_10051, "P"
else
  write "<!> Failed (1005;1005.1) - TST_ES3 app did not start."
  write "<!> Failed - Expected Event Message ", CFE_ES_START_INF_EID, " not received."
  ut_setrequirements ES_1005, "F"
  ut_setrequirements ES_10051, "F"
endif
                                                                                
;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1005;1005.1) - TST_ES3 app started"
  write "<*> Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1005, "P"
  ut_setrequirements ES_10051, "P"
else
  write "<!> Failed (1005;1005.1) - TST_ES3 app did not start."
  write "<!> Failed - Expected Event Message ", TST_ES_INIT_INF_EID, " not received."
  ut_setrequirements ES_1005, "F"
  ut_setrequirements ES_10051, "F"
endif

;; Report the count for expected events #3 & #4
if ($SC_$CPU_find_event[3].num_found_messages > 0) then
  write "<*> Event Msg ",$SC_$CPU_find_event[3].eventid," rcv'd; count = ", $SC_$CPU_find_event[3].num_found_messages
endif

if ($SC_$CPU_find_event[4].num_found_messages > 0) then
  write "<*> Event Msg ",$SC_$CPU_find_event[4].eventid," rcv'd; count = ", $SC_$CPU_find_event[4].num_found_messages
endif

write ";*********************************************************************"
write "; Step 2.0: Application Control Requests Test."
write ";*********************************************************************"
write "; Step 2.1: Verify that the TST_ES application is running. If it is not"
write "; 	   then start it."
write ";*********************************************************************"
;; Dump all running apps again to verify that the TST_ES app is running
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_ALL_APPS_EID, "DEBUG", 1
s get_file_to_cvt (ramDir,"cfe_es_app_info.log","$sc_$cpu_es_app_info.log",hostCPU)
wait 5

if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1012) - App Info retrieval. Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_1012, "P"
else
  write "<!> Failed (1012) - App Info retrieval. Expected Event message ",CFE_ES_ALL_APPS_EID, " was not received"
  ut_setrequirements ES_1012, "F"
endif

;;Loop thru the table of apps to verify that the apps are running
local found_app1 = FALSE

for app_index = 1 to CFE_ES_MAX_APPLICATIONS do
  if ($SC_$CPU_ES_ALE[app_index].ES_AL_AppName = "TST_ES") then
    found_app1 = TRUE
  endif
enddo

if (found_app1 = FALSE) then
  ;; Setup events to capture for TST_ES start
  ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_START_INF_EID, INFO, 1
  ut_setupevents $SC, $CPU, TST_ES, TST_ES_INIT_INF_EID, INFO, 2
  ut_setupevents $SC, $CPU, CFE_SB, CFE_SB_PIPE_ADDED_EID, DEBUG, 3
  ut_setupevents $SC, $CPU, CFE_SB, CFE_SB_SUBSCRIPTION_RCVD_EID, DEBUG, 4

  write "; Starting the TST_ES application. "
  s load_start_app ("TST_ES", hostCPU)
  wait 5

  ;; Look for expected event #1
  if ($SC_$CPU_find_event[1].num_found_messages = 1) then
    write "<*> Passed (1005;1005.1) - TST_ES app started"
    write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  else
    write "<!> Failed (1005;1005.1) - TST_ES app did not start."
    write "<!> Failed - Expected Event Message ", CFE_ES_START_INF_EID, " not received."
  endif
                                                                                
  ;; Look for expected event #2
  if ($SC_$CPU_find_event[2].num_found_messages = 1) then
    write "<*> Passed (1005;1005.1) - TST_ES app started"
    write "<*> Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
    ut_setrequirements ES_1005, "P"
    ut_setrequirements ES_10051, "P"
  else
    write "<!> Failed (1005;1005.1) - TST_ES app did not start."
    write "<!> Failed - Expected Event Message ", CFE_ES_START_INF_EID, " not received."
  endif

  ;; Report the count for expected events #3 & #4
  if ($SC_$CPU_find_event[3].num_found_messages > 0) then
    write "<*> Event Msg ",$SC_$CPU_find_event[3].eventid," rcv'd; count = ", $SC_$CPU_find_event[3].num_found_messages
  endif

  if ($SC_$CPU_find_event[4].num_found_messages > 0) then
    write "<*> Event Msg ",$SC_$CPU_find_event[4].eventid," rcv'd; count = ", $SC_$CPU_find_event[4].num_found_messages
  endif
else
  write "; TST_ES application is already running."
endif

write ";*********************************************************************"
write "; Step 2.2: Send the request to retrieve the Processor ID."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_PROCESSORID_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES, TST_ES_GETPROCESSORID_INF_EID, INFO, 2

cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_GETPROCESSORID
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1302) - Get Processor ID command sent successfully."
  ut_setrequirements ES_1302, "P"
else
  write "<!> Failed (1302) - Get Processor ID command did not increment valid command counter."
  ut_setrequirements ES_1302, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1302) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1302, "P"
else
  write "<!> Failed (1302) - Expected Event Message ", TST_ES_PROCESSORID_INF_EID, " not received."
  ut_setrequirements ES_1302, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1302) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1302, "P"
else
  write "<!> Failed (1302) - Expected Event Message ", TST_ES_GETPROCESSORID_INF_EID, " not received."
  ut_setrequirements ES_1302, "F"
endif

write ";*********************************************************************"
write "; Step 2.3: Send the request to retrieve the Spacecraft ID."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_SPACECRAFTNUM_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES, TST_ES_SPACECRAFTID_INF_EID, INFO, 2

cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_GETSCID
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1303) - Get Processor ID command sent successfully."
  ut_setrequirements ES_1303, "P"
else
  write "<!> Failed (1303) - Get Processor ID command did not increment valid command counter."
  ut_setrequirements ES_1303, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1303) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1303, "P"
else
  write "<!> Failed (1303) - Expected Event Message ", TST_ES_SPACECRAFTNUM_INF_EID, " not received."
  ut_setrequirements ES_1303, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1303) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1303, "P"
else
  write "<!> Failed (1303) - Expected Event Message ", TST_ES_SPACECRAFTID_INF_EID, " not received."
  ut_setrequirements ES_1303, "F"
endif

write ";*********************************************************************"
write "; Step 2.4: Send the request to retrieve the Application ID."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_CALLAPPID_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES, TST_ES_GETCALLAPPID_INF_EID, INFO, 2

cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_GETCALLINGAPPID
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1304) - Get Processor ID command sent successfully."
  ut_setrequirements ES_1304, "P"
else
  write "<!> Failed (1304) - Get Processor ID command did not increment valid command counter."
  ut_setrequirements ES_1304, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1304) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1304, "P"
else
  write "<!> Failed (1304) - Expected Event Message ", TST_ES_CALLAPPID_INF_EID, " not received."
  ut_setrequirements ES_1304, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1304) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1304, "P"
else
  write "<!> Failed (1304) - Expected Event Message ", TST_ES_GETCALLAPPID_INF_EID, " not received."
  ut_setrequirements ES_1304, "F"
endif

write ";*********************************************************************"
write "; Step 2.5: Send the request to retrieve the Application Name of the "
write "; 	   supplied Task ID."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_GETAPPTASKNAMES_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES, TST_ES_GETAPPTASKNAMESPASS_INF_EID, INFO, 2

cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_GETAPPTASKNAMES TASKID=3
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1305) - Get App & Task Name command sent successfully."
  ut_setrequirements ES_1305, "P"
else
  write "<!> Failed (1305) - Get App & Task Name command did not increment valid command counter."
  ut_setrequirements ES_1305, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1305) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1305, "P"
else
  write "<!> Failed (1305) - Expected Event Message ", TST_ES_GETAPPTASKNAMES_INF_EID, " not received."
  ut_setrequirements ES_1305, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1305) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1305, "P"
else
  write "<!> Failed (1305) - Expected Event Message ", TST_ES_GETAPPNAME_INF_EID, " not received."
  ut_setrequirements ES_1305, "F"
endif

write ";*********************************************************************"
write "; Step 2.6: Send the request to retrieve the Application ID of the "
write "; 	   supplied Application."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_APPID_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES, TST_ES_GETAPPID_INF_EID, INFO, 2

cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_GETAPPID APPNAME="TST_ES"
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1306) - Get App & Task Name command sent successfully."
  ut_setrequirements ES_1306, "P"
else
  write "<!> Failed (1306) - Get App & Task Name command did not increment valid command counter."
  ut_setrequirements ES_1306, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1306) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1306, "P"
else
  write "<!> Failed (1306) - Expected Event Message ", TST_ES_APPID_INF_EID, " not received."
  ut_setrequirements ES_1306, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1306) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1306, "P"
else
  write "<!> Failed (1306) - Expected Event Message ", TST_ES_GETAPPID_INF_EID, " not received."
  ut_setrequirements ES_1306, "F"
endif

write ";*********************************************************************"
write "; Step 2.7: Send the request to retrieve the Application Name of the "
write "; 	   supplied Application ID."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_APPNAME_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES, TST_ES_GETAPPNAME_INF_EID, INFO, 2

cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_GETAPPNAME APPID=x'a'
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1307) - Get App Name command sent successfully."
  ut_setrequirements ES_1307, "P"
else
  write "<!> Failed (1307) - Get App Name command did not increment valid command counter."
  ut_setrequirements ES_1307, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1307) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1307, "P"
else
  write "<!> Failed (1307) - Expected Event Message ", TST_ES_APPNAME_INF_EID, " not received."
  ut_setrequirements ES_1307, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1307) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1307, "P"
else
  write "<!> Failed (1307) - Expected Event Message ", TST_ES_GETAPPNAME_INF_EID, " not received."
  ut_setrequirements ES_1307, "F"
endif

write ";*********************************************************************"
write "; Step 2.8: Send the request to start an application that allocates all"
write "; 	   types of resources that an application can use."
write ";*********************************************************************"
;; Setup events to capture for TST_ES4 start
ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_START_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES4, TST_ES_INIT_INF_EID, INFO, 2
ut_setupevents $SC, $CPU, CFE_SB, CFE_SB_PIPE_ADDED_EID, DEBUG, 3
ut_setupevents $SC, $CPU, CFE_SB, CFE_SB_SUBSCRIPTION_RCVD_EID, DEBUG, 4

;; Start the TST_ES4 app
write "; Starting the TST_ES4 application. "
s load_start_app ("TST_ES4", hostCPU)
wait 5

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1005;1005.1) - TST_ES4 app started"
  write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1005, "P"
  ut_setrequirements ES_10051, "P"
else
  write "<!> Failed (1005;1005.1) - TST_ES4 app did not start."
  write "<!> Failed - Expected Event Message ", CFE_ES_START_INF_EID, " not received."
  ut_setrequirements ES_1005, "F"
  ut_setrequirements ES_10051, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1005;1005.1) - TST_ES4 app started"
  write "<*> Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1005, "P"
  ut_setrequirements ES_10051, "P"
else
  write "<!> Failed (1005;1005.1) - TST_ES4 app did not start."
  write "<!> Failed - Expected Event Message ", TST_ES_INIT_INF_EID, " not received."
  ut_setrequirements ES_1005, "F"
  ut_setrequirements ES_10051, "F"
endif

;; Report the count for expected events #3 & #4
if ($SC_$CPU_find_event[3].num_found_messages > 0) then
  write "<*> Event Msg ",$SC_$CPU_find_event[3].eventid," rcv'd; count = ", $SC_$CPU_find_event[3].num_found_messages
endif

if ($SC_$CPU_find_event[4].num_found_messages > 0) then
  write "<*> Event Msg ",$SC_$CPU_find_event[4].eventid," rcv'd; count = ", $SC_$CPU_find_event[4].num_found_messages
endif

write ";*********************************************************************"
write "; Step 2.9: Send the request to delete the application that was "
write "; 	   started above."
write ";*********************************************************************"
;; Send the queryapp command for the app started above.
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_ONE_APP_EID, "DEBUG", 1

;; Send the QueryApp command
/$SC_$CPU_ES_QUERYAPP APPLICATION="TST_ES4"
wait 5

; Look for the event
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1011) - App Info event message ",$SC_$CPU_find_event[1].eventid, " received."
  ut_setrequirements ES_1011, "P"
else
  write "<!> Failed (1011) - Expected Event message ",CFE_ES_ONE_APP_EID, " was not received"
  ut_setrequirements ES_1011, "F"
endif

;; Use the $SC_$CPU_ES_APPID tlm point in the command
write "AppId = ",$SC_$CPU_ES_APPID

;; Send the TST_ES command to delete the app
ut_setupevents "$SC", "$CPU", "TST_ES", TST_ES_DELETEAPP_INF_EID, "INFO", 1
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_STOP_INF_EID, "INFO", 2
cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

/$SC_$CPU_TST_ES_DELETEAPP APPID=$SC_$CPU_ES_APPID
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1309) - Delete App request sent successfully."
  ut_setrequirements ES_1309, "P"
else
  write "<!> Failed (1309) - Delete App request did not increment valid command counter."
  ut_setrequirements ES_1309, "F"
endif

;; Look for expected event #1
; Look for the event
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1309) - Delete App event message ",$SC_$CPU_find_event[1].eventid, " received."
  ut_setrequirements ES_1309, "P"
else
  write "<!> Failed (1309) - Expected Event message ",TST_ES_DELETEAPP_INF_EID, " was not received"
  ut_setrequirements ES_1309, "F"
endif

;; Wait until you get the event that indicates the stop app has completed
ut_tlmwait $SC_$CPU_find_event[2].num_found_messages, 1
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1309) - Delete App event message ",$SC_$CPU_find_event[2].eventid, " received."
  ut_setrequirements ES_1309, "P"
else
  write "<!> Failed (1309) - Expected Event message ",CFE_ES_STOP_INF_EID, " was not received"
  ut_setrequirements ES_1309, "F"
endif

;; Dump all running apps again to verify that the TST_ES4 app was deleted
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_ALL_APPS_EID, "DEBUG", 1
s get_file_to_cvt (ramDir,"cfe_es_app_info.log","$sc_$cpu_es_app_info.log",hostCPU)
wait 5

if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1012) - App Info retrieval. Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_1012, "P"
else
  write "<!> Failed (1012) - App Info retrieval. Expected Event message ",CFE_ES_ALL_APPS_EID, " was not received"
  ut_setrequirements ES_1012, "F"
endif

;; Check if the TST_ES4 app is not in the info tlm
found_app1 = FALSE
for app_index = 1 to CFE_ES_MAX_APPLICATIONS do
  if ($SC_$CPU_ES_ALE[app_index].ES_AL_AppName = "TST_ES4") then
    found_app1 = TRUE
  endif
enddo

;; Verify that the app was deleted
if (found_app1 = FALSE) then
  write "<*> Passed (1309;1319) - TST_ES4 not found in App List"
  ut_setrequirements ES_1309, "P"
  ut_setrequirements ES_1319, "P"
else
  write "<!> Failed (1309;1319) - TST_ES4 still exists in App List"
  ut_setrequirements ES_1309, "F"
  ut_setrequirements ES_1319, "F"
endif

write ";*********************************************************************"
write "; Step 2.10: Send the request to delete an undefined application. "
write ";*********************************************************************"
;; Send the TST_ES command to delete an undefined app
ut_setupevents "$SC", "$CPU", "TST_ES", TST_ES_APPIDNOTFOUND_ERR_EID, "ERROR", 1
ut_setupevents "$SC", "$CPU", "TST_ES", TST_ES_DELETEAPP_INF_EID, "INFO", 2
errcnt = $SC_$CPU_TST_ES_CMDEC + 1

/$SC_$CPU_TST_ES_DELETEAPP APPID=25
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1309.1) - Delete App command failed as expected."
  ut_setrequirements ES_13091, "P"
else
  write "<!> Failed (1309.1) - Delete App command worked when failure was expected."
  ut_setrequirements ES_13091, "F"
endif

;; Look for expected event #1
; Look for the event
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1309.1) - Delete App event message ",$SC_$CPU_find_event[1].eventid, " received."
  ut_setrequirements ES_13091, "P"
else
  write "<!> Failed (1309.1) - Expected Event message ",TST_ES_APPIDNOTFOUND_ERR_EID, " was not received"
  ut_setrequirements ES_13091, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1309.1) - Delete App event message ",$SC_$CPU_find_event[2].eventid, " received."
  ut_setrequirements ES_13091, "P"
else
  write "<!> Failed (1309.1) - Expected Event message ",TST_ES_DELETEAPP_INF_EID, " was not received"
  ut_setrequirements ES_13091, "F"
endif

write ";*********************************************************************"
write "; Step 2.11: Send the request to restart an application. "
write ";*********************************************************************"
;; Send the TST_ES command to restart an application
ut_setupevents "$SC", "$CPU", "TST_ES", TST_ES_RESTARTAPP_INF_EID, "INFO", 1
cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

/$SC_$CPU_TST_ES_RESTARTAPP APPNAME="TST_ES3"
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1310) - Restart App command sent successfully."
  ut_setrequirements ES_1310, "P"
else
  write "<!> Failed (1310) - Restart App command did not increment valid command counter."
  ut_setrequirements ES_1310, "F"
endif

;; Look for expected event #1
; Look for the event
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1310) - Restart App event message ",$SC_$CPU_find_event[1].eventid, " received."
  ut_setrequirements ES_1310, "P"
else
  write "<!> Failed (1310) - Expected Event message ",TST_ES_DELETEAPP_INF_EID, " was not received"
  ut_setrequirements ES_1310, "F"
endif

;; Dump all running apps again to verify that the TST_ES4 app was deleted
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_ALL_APPS_EID, "DEBUG", 1
s get_file_to_cvt (ramDir,"cfe_es_app_info.log","$sc_$cpu_es_app_info.log",hostCPU)
wait 5

if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1012) - App Info retrieval. Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_1012, "P"
else
  write "<!> Failed (1012) - App Info retrieval. Expected Event message ",CFE_ES_ALL_APPS_EID, " was not received"
  ut_setrequirements ES_1012, "F"
endif

;; Check if the TST_ES3 app is in the info tlm
found_app1 = FALSE
for app_index = 1 to CFE_ES_MAX_APPLICATIONS do
  if ($SC_$CPU_ES_ALE[app_index].ES_AL_AppName = "TST_ES3") then
    found_app1 = TRUE
  endif
enddo

;; Verify that the app was restarted
if (found_app1 = TRUE) then
  ut_setrequirements ES_1310, "P"
else
  ut_setrequirements ES_1310, "F"
endif

write ";*********************************************************************"
write "; Step 2.12: Send the request to restart an undefined application. "
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", "TST_ES", TST_ES_APPIDNOTFOUND_ERR_EID, "ERROR", 1
errcnt = $SC_$CPU_TST_ES_CMDEC + 1

/$SC_$CPU_TST_ES_RESTARTAPP APPNAME="TST_ES5"
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1310.1) - Restart App command sent successfully."
  ut_setrequirements ES_13101, "P"
else
  write "<!> Failed (1310.1) - Restart App command did not increment valid command counter."
  ut_setrequirements ES_13101, "F"
endif

;; Look for expected event #1
; Look for the event
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1310.1) - Restart App event message ",$SC_$CPU_find_event[1].eventid, " received."
  ut_setrequirements ES_13101, "P"
else
  write "<!> Failed (1310.1) - Expected Event message ",TST_ES_APPIDNOTFOUND_ERR_EID, " was not received"
  ut_setrequirements ES_13101, "F"
endif

write ";*********************************************************************"
write "; Step 2.13: Send the request to restart an application whose original"
write "; 	    startup file is missing."
write ";*********************************************************************"
;;;; TST_ES2 needs to be running for this step to work
;; Need to delete the original startup file on $CPU and then issue the command
s ftp_file (ramDir,"na","tst_es2.o",hostCPU,"R")

ut_setupevents "$SC", "$CPU", "TST_ES", TST_ES_RESTARTAPPPASS_INF_EID, "INFO", 1
ut_setupevents "$SC", "$CPU", "TST_ES", TST_ES_RESTARTAPP_INF_EID, "INFO", 2
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_RESTART_APP_ERR3_EID, "ERROR", 3
cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

/$SC_$CPU_TST_ES_RESTARTAPP APPNAME="TST_ES2"
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1310.2) - Restart App command sent successfully."
  ut_setrequirements ES_13102, "P"
else
  write "<!> Failed (1310.2) - Restart App command did not increment valid command counter."
  ut_setrequirements ES_13102, "F"
endif

;; Look for expected event #1
; Look for the event
ut_tlmwait $SC_$CPU_find_event[1].num_found_messages, 1
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1310.2) - Restart App event message ",$SC_$CPU_find_event[1].eventid, " received."
  ut_setrequirements ES_13102, "P"
else
  write "<!> Failed (1310.2) - Expected Event message ",TST_ES_RESTARTAPPPASS_INF_EID, " was not received"
  ut_setrequirements ES_13102, "F"
endif

;; Look for expected event #2
ut_tlmwait $SC_$CPU_find_event[2].num_found_messages, 1
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1310.2) - Delete App event message ",$SC_$CPU_find_event[2].eventid, " received."
  ut_setrequirements ES_13102, "P"
else
  write "<!> Failed (1310.2) - Expected Event message ",TST_ES_RESTARTAPP_INF_EID, " was not received"
  ut_setrequirements ES_13102, "F"
endif

;; Look for expected event #3
ut_tlmwait $SC_$CPU_find_event[3].num_found_messages, 1
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1310.2) - Delete App event message ",$SC_$CPU_find_event[3].eventid, " received."
  ut_setrequirements ES_13102, "P"
else
  write "<!> Failed (1310.2) - Expected Event message ",CFE_ES_RESTART_APP_ERR3_EID, " was not received"
  ut_setrequirements ES_13102, "F"
endif

write ";*********************************************************************"
write "; Step 2.14: Send the request to restart an application that will fail"
write "; 	    due to a non-parameter error."
write ";*********************************************************************"
;; Setup events to capture for TST_ES4 start
ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_START_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES4, TST_ES_INIT_INF_EID, INFO, 2
ut_setupevents $SC, $CPU, CFE_SB, CFE_SB_PIPE_ADDED_EID, DEBUG, 3
ut_setupevents $SC, $CPU, CFE_SB, CFE_SB_SUBSCRIPTION_RCVD_EID, DEBUG, 4

;; Start the TST_ES4 app
write "; Starting the TST_ES4 application. "
s load_start_app ("TST_ES4", hostCPU)
wait 5

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1005;1005.1) - TST_ES4 app started"
  write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1005, "P"
  ut_setrequirements ES_10051, "P"
else
  write "<!> Failed (1005;1005.1) - TST_ES4 app did not start."
  write "<!> Failed - Expected Event Message ", CFE_ES_START_INF_EID, " not received."
  ut_setrequirements ES_1005, "F"
  ut_setrequirements ES_10051, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1005;1005.1) - TST_ES4 app started"
  write "<*> Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1005, "P"
  ut_setrequirements ES_10051, "P"
else
  write "<!> Failed (1005;1005.1) - TST_ES4 app did not start."
  write "<!> Failed - Expected Event Message ", TST_ES_INIT_INF_EID, " not received."
  ut_setrequirements ES_1005, "F"
  ut_setrequirements ES_10051, "F"
endif

;; Report the count for expected events #3 & #4
if ($SC_$CPU_find_event[3].num_found_messages > 0) then
  write "<*> Event Msg ",$SC_$CPU_find_event[3].eventid," rcv'd; count = ", $SC_$CPU_find_event[3].num_found_messages
endif

if ($SC_$CPU_find_event[4].num_found_messages > 0) then
  write "<*> Event Msg ",$SC_$CPU_find_event[4].eventid," rcv'd; count = ", $SC_$CPU_find_event[4].num_found_messages
endif

;; Load a bad .o file for the app that you are going to restart
s ftp_file (ramDir,"secondtbldef.dat","tst_es4.o",hostCPU,"P")
wait 5

ut_setupevents "$SC", "$CPU", "TST_ES", TST_ES_RESTARTAPPPASS_INF_EID, "INFO", 1
ut_setupevents "$SC", "$CPU", "TST_ES", TST_ES_RESTARTAPP_INF_EID, "INFO", 2
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_RESTART_APP_ERR3_EID, "ERROR", 3
cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

/$SC_$CPU_TST_ES_RESTARTAPP APPNAME="TST_ES4"
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1310.3) - Restart App command sent successfully."
  ut_setrequirements ES_13103, "P"
else
  write "<!> Failed (1310.3) - Restart App command did not increment valid command counter."
  ut_setrequirements ES_13103, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1310.3) - Restart App event message ",$SC_$CPU_find_event[1].eventid, " received."
  ut_setrequirements ES_13103, "P"
else
  write "<!> Failed (1310.3) - Expected Event message ",TST_ES_RESTARTAPPPASS_INF_EID, " was not received"
  ut_setrequirements ES_13103, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1310.3) - Delete App event message ",$SC_$CPU_find_event[2].eventid, " received."
  ut_setrequirements ES_13103, "P"
else
  write "<!> Failed (1310.3) - Expected Event message ",TST_ES_RESTARTAPP_INF_EID, " was not received"
  ut_setrequirements ES_13103, "F"
endif

;; Look for expected event #3
ut_tlmwait $SC_$CPU_find_event[3].num_found_messages, 1
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1310.3) - Delete App event message ",$SC_$CPU_find_event[3].eventid, " received."
  ut_setrequirements ES_13103, "P"
else
  write "<!> Failed (1310.3) - Expected Event message ",CFE_ES_RESTART_APP_ERR3_EID, " was not received"
  ut_setrequirements ES_13103, "F"
endif

write ";*********************************************************************"
write "; Step 2.15: Send the QUERYAPP command without an application name."
write ";*********************************************************************"
;; Send a QueryApp command for TST_ES application to get the # of child tasks
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_ONE_APPID_ERR_EID, "ERROR", 1
errcnt = $SC_$CPU_ES_CMDEC + 1

;; Send the QueryApp command
/$SC_$CPU_ES_QUERYAPP APPLICATION=""
wait 5

ut_tlmwait $SC_$CPU_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed - Query App command without a name failed as expected."
else
  write "<!> Failed - Query App command without a name did not increment the error counter."
endif

; Look for the event
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed - Event message ",$SC_$CPU_find_event[1].eventid, " received."
else
  write "<!> Failed - Expected Event message ",CFE_ES_ONE_APPID_ERR_EID, " was not received"
endif

write ";*********************************************************************"
write "; Step 2.16: Send the WRITEAPPINFO2FILE command without a path "
write "; 	    specification for the filename."
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_OSCREATE_ERR_EID, "ERROR", 1
errcnt = $SC_$CPU_ES_CMDEC + 1

;; Send the QueryApp command
/$SC_$CPU_ES_WRITEAPPINFO2FILE APPFILENAME="nopathname.log"
wait 5

ut_tlmwait $SC_$CPU_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed - WriteAppInfo command failed as expected."
else
  write "<!> Failed - WriteAppInfo command did not increment the error counter."
endif

; Look for the event
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed - Event message ",$SC_$CPU_find_event[1].eventid, " received."
else
  write "<!> Failed - Expected Event message ",CFE_ES_OSCREATE_ERR_EID, " was not received"
endif

write ";*********************************************************************"
write "; Step 3.0: Child Task Control Test."
write ";*********************************************************************"
write "; Step 3.1: Send the request to create and start a child task."
write ";*********************************************************************"
;; Send a QueryApp command for TST_ES application to get the # of child tasks
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_ONE_APP_EID, "DEBUG", 1

;; Send the QueryApp command
/$SC_$CPU_ES_QUERYAPP APPLICATION="TST_ES"
wait 5

; Look for the event
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1011) - App Info event message ",$SC_$CPU_find_event[1].eventid, " received."
  ut_setrequirements ES_1011, "P"
else
  write "<!> Failed (1011) - Expected Event message ",CFE_ES_ONE_APP_EID, " was not received"
  ut_setrequirements ES_1011, "F"
endif

local expectedChildren = $SC_$CPU_ES_ChildTasks + 1
local TST_ES_TaskId = $SC_$CPU_ES_MainTaskId
local TST_ES_AppId = $SC_$CPU_ES_APPID

;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_CREATESTARTCHILDTSK_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES, TST_ES_CREATESTARTCHILDTSKPASS_INF_EID, INFO, 2

cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_CREATECHILDTASK TASKNAME="ES_CHILD1" NOERROR
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1311) - Create Child Task command sent successfully."
  ut_setrequirements ES_1311, "P"
else
  write "<!> Failed (1311) - Create Child Task command did not increment valid command counter."
  ut_setrequirements ES_1311, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1311) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1311, "P"
else
  write "<!> Failed (1311) - Expected Event Message ", TST_ES_CREATESTARTCHILDTSK_INF_EID, " not received."
  ut_setrequirements ES_1311, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1311) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1311, "P"
else
  write "<!> Failed (1311) - Expected Event Message ", TST_ES_CREATESTARTCHILDTSKPASS_INF_EID, " not received."
  ut_setrequirements ES_1311, "F"
endif

;; Open the ES_Task_INFO page
page $SC_$CPU_ES_TASK_INFO
wait 5

;  Dump the properties of all running Tasks
s get_file_to_cvt (ramDir,"cfe_es_task_info.log","$sc_$cpu_es_task_info.log",hostCPU)
wait 5

;; Send a QueryApp command for TST_ES application to get the # of child tasks
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_ONE_APP_EID, "DEBUG", 1

;; Send the QueryApp command
/$SC_$CPU_ES_QUERYAPP APPLICATION="TST_ES"
wait 5

; Look for the event
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1011) - App Info event message ",$SC_$CPU_find_event[1].eventid, " received."
  ut_setrequirements ES_1011, "P"
else
  write "<!> Failed (1011) - Expected Event message ",CFE_ES_ONE_APP_EID, " was not received"
  ut_setrequirements ES_1011, "F"
endif

ut_tlmwait $SC_$CPU_ES_ChildTasks, {expectedChildren}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1311;1313) - TST_ES Child Task counter incremented as expected."
  ut_setrequirements ES_1311, "P"
  ut_setrequirements ES_1313, "P"
else
  write "<!> Failed (1311;1313) - TST_ES Child Task did not increment counter."
  ut_setrequirements ES_1311, "F"
  ut_setrequirements ES_1313, "F"
endif

write ";*********************************************************************"
write "; Step 3.2: Send the request to create an undefined child task."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_CREATESTARTCHILDTSKERR_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES, TST_ES_CREATESTARTCHILDTSK_INF_EID, INFO, 2

cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_CREATECHILDTASK TASKNAME="" ERROR
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1311.1) - Create undefined Child Task command sent successfully."
  ut_setrequirements ES_13111, "P"
else
  write "<!> Failed (1311.1) - Create undefined Child Task command did not increment valid command counter."
  ut_setrequirements ES_13111, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1311.1) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_13111, "P"
else
  write "<!> Failed (1311.1) - Expected Event Message ", TST_ES_CREATESTARTCHILDTSKERR_EID, " not received."
  ut_setrequirements ES_13111, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1311.1) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_13111, "P"
else
  write "<!> Failed (1311.1) - Expected Event Message ", TST_ES_CREATESTARTCHILDTSK_INF_EID, " not received."
  ut_setrequirements ES_13111, "F"
endif

write ";*********************************************************************"
write "; Step 3.3: Set the System Log Write Mode to overwrite in order to "
write "; 	   verify that the cFE generates the required messages for"
write "; 	   the steps below."
write ";*********************************************************************"
;; Send the command to set the mode to OVERWRITE
cmdcnt = $SC_$CPU_ES_CMDPC + 1
                                                                                
/$SC_$CPU_ES_OVERWRITESYSLOGMODE OVERWRITE
                                                                                
ut_tlmwait $SC_$CPU_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed - Set SysLogMode to OVERWRITE command."
else
  write "<!> Failed - Set SysLogMode command."
endif

write ";*********************************************************************"
write "; Step 3.4: Send the request to create a child task that will attempt"
write "; 	   to create another child task."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_CHILDCREATESTARTCHILDTSKPASS_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES, TST_ES_CHILDCREATESTARTCHILDTSK_INF_EID, INFO, 2

cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_CHILDCREATECHILD TASKNAME="ES_Child2"
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1311.2) - Create grandchild Task command sent successfully."
  ut_setrequirements ES_13112, "A"
else
  write "<!> Failed (1311.2) - Create grandchild Task command did not increment valid command counter."
  ut_setrequirements ES_13112, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1311.2) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_13112, "A"
else
  write "<!> Failed (1311.2) - Expected Event Message ", TST_ES_CHILDCREATESTARTCHILDTSK_ERR_EID, " not received."
  ut_setrequirements ES_13112, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1311.2) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_13112, "A"
else
  write "<!> Failed (1311.2) - Expected Event Message ", TST_ES_CREATESTARTCHILDTSKPASS_INF_EID, " not received."
  ut_setrequirements ES_13112, "F"
endif

;; Need to dump the System Log to see if the above error was written to it
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_SYSLOG2_EID, "DEBUG", 1
                                                                                
ut_sendcmd "$SC_$CPU_ES_WRITESYSLOG2FILE SYSLOGFILENAME="""""
if (UT_SC_Status = UT_SC_Success) then
  if ($SC_$CPU_find_event[1].num_found_messages = 1) then
    write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  else
    write "<!> Failed - Expected Event Message", CFE_ES_SYSLOG2_EID, " not received."
  endif
                                                                                
  ;; Get the file to the ground whether or not the event msg was rcv'd
  s ftp_file (ramDir,"cfe_es_syslog.log","$sc_$cpu_es_app33syslog.log",hostCPU,"G")
  wait 5

  ;; Check if the file above exists and pass the requirement if it does
  filename = work_dir & "/image/$sc_$cpu_es_app33syslog.log"
  if file_exists(filename) then
    write "<*> Passed - ES System Log file downloaded successfully!"
  else
    write "<!> Failed - Did not download ES system log."
  endif
else
  write "<!> Failed - Did not write system log."
endif

write ";*********************************************************************"
write "; Step 3.5: Send the request to delete the child task started in "
write "; 	   Step 3.1 above."
write ";*********************************************************************"
;  Dump the properties of all running Tasks
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_TASKINFO_EID, "DEBUG", 1
s get_file_to_cvt (ramDir,"cfe_es_task_info.log","$sc_$cpu_es_task_info.log",hostCPU)
wait 5

;; Check if the event was generated
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
else
  write "<!> Failed - Expected Event Message", CFE_ES_TASKINFO_EID, " not received."
endif

;; Search the task info for the ES_CHILD1 task
local found_task = FALSE
local childTaskId = 0
for task_index = 1 to CFE_ES_MAX_APPLICATIONS do
  if ($SC_$CPU_ES_TL[task_index].TaskName = "ES_CHILD1") then
    found_task = TRUE
    childTaskId = $SC_$CPU_ES_TL[task_index].TaskId
    if ($SC_$CPU_ES_TL[task_index].APPID = TST_ES_AppId) AND ;;
       ($SC_$CPU_ES_TL[task_index].APPNAME = "TST_ES") then
      write "ES_Child1 task is a child of the TST_ES app."
    else
      write "ES_Child1 task's parent app is not TST_ES."
    endif
  endif
enddo

if (found_task = TRUE) then
  ;; Setup events to capture
  ut_setupevents $SC, $CPU, TST_ES, TST_ES_DELETECHILDTSK_INF_EID, INFO, 1
  ut_setupevents $SC, $CPU, TST_ES, TST_ES_DELETECHILDTSKPASS_INF_EID, INFO, 2

  ;; Send the command to the TST_ES application
  /$SC_$CPU_TST_ES_DELETECHILDTASK TASKID=childTaskId
  wait 5

  ;; Look for expected events
  if (($SC_$CPU_find_event[1].num_found_messages = 1) AND ;;
      ($SC_$CPU_find_event[2].num_found_messages = 1)) then
    write "<*> Passed (1312) - Expected Event Msgs ",$SC_$CPU_find_event[1].eventid," & ", $SC_$CPU_find_event[2].eventid," Found!"
    ut_setrequirements ES_1312, "P"
  else
    write "<!> Failed (1312) - Expected Event Msgs ",TST_ES_DELETECHILDTSK_INF_EID, " & ", TST_ES_DELETECHILDTSKPASS_INF_EID, " not received."
    ut_setrequirements ES_1312, "F"
  endif
endif

wait 10
;  Dump the properties of all running Tasks
s get_file_to_cvt (ramDir,"cfe_es_task_info.log","$sc_$cpu_es_task_info.log",hostCPU)
wait 10

;; Verify that the ES_Child1 task no longer exists
if (found_task = TRUE) then
  ;; Search the task info for the ES_CHILD1 task
  found_task = FALSE
  for task_index = 1 to CFE_ES_MAX_APPLICATIONS do
    if ($SC_$CPU_ES_TL[task_index].TaskName = "ES_CHILD1") then
      found_task = TRUE
    endif
  enddo

  if (found_task = TRUE) then
    write "<!> Failed (1312) - Child Task 'ES_CHILD1' is still executing."
    ut_setrequirements ES_1312, "F"
  else
    write "<*> Passed (1312) - Child Task 'ES_CHILD1' is no longer executing."
    ut_setrequirements ES_1312, "P"
  endif
endif

write ";*********************************************************************"
write "; Step 3.6: Send the request to delete the child task specifying its  "
write "; 	   own Application Main Task."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_DELETECHILDTSK_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES, TST_ES_DELETECHILDTSKFAIL_ERR_EID, ERROR, 2

errcnt = $SC_$CPU_TST_ES_CMDEC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_DELETECHILDTASK TASKID=TST_ES_TaskId
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1312.1) - Delete Child Task command sent successfully."
  ut_setrequirements ES_13121, "P"
else
  write "<!> Failed (1312.1) - Delete Child Task command did not increment error command counter."
  ut_setrequirements ES_13121, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1312.1) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_13121, "P"
else
  write "<!> Failed (1312.1) - Expected Event Message ",TST_ES_DELETECHILDTSK_INF_EID, " not received."
  ut_setrequirements ES_13121, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1312.1) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_13121, "P"
else
  write "<!> Failed (1312.1) - Expected Event Message ",TST_ES_DELETECHILDTSKFAIL_ERR_EID, " not received."
  ut_setrequirements ES_13121, "F"
endif

write ";*********************************************************************"
write "; Step 3.7: Send the request to end a child task with its own "
write "; 	   Application Main Task."
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", "TST_ES", TST_ES_ENDEXECCHILDTSK_INF_EID, "INFO", 1
cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_STOPCHILDTASK
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1314.1) - Stop Child Task command sent successfully."
  ut_setrequirements ES_13141, "A"
else
  write "<!> Failed (1314.1) - Stop Child Task command did not increment valid command counter."
  ut_setrequirements ES_13141, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1314.1) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_13141, "A"
else
  write "<!> Failed (1314.1) - Expected Event Message ",TST_ES_ENDEXECCHILDTSK_INF_EID, " not received."
  ut_setrequirements ES_13141, "F"
endif

;; Need to dump the System Log to see if the above error was written to it
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_SYSLOG2_EID, "DEBUG", 1
                                                                                
ut_sendcmd "$SC_$CPU_ES_WRITESYSLOG2FILE SYSLOGFILENAME="""""
if (UT_SC_Status = UT_SC_Success) then
  if ($SC_$CPU_find_event[1].num_found_messages = 1) then
    write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  else
    write "<!> Failed - Expected Event Message", CFE_ES_SYSLOG2_EID, " not received."
  endif
                                                                                
  ;; Get the file to the ground whether or not the event msg was rcv'd
  s ftp_file (ramDir,"cfe_es_syslog.log","$sc_$cpu_es_app36syslog.log",hostCPU,"G")
  wait 5

  ;; Check if the file above exists and pass the requirement if it does
  filename = work_dir & "/image/$sc_$cpu_es_app36syslog.log"
  if file_exists(filename) then
    write "<*> Passed - ES System Log file downloaded successfully!"
  else
    write "<!> Failed - Did not download ES system log."
  endif
else
  write "<!> Failed - Did not write system log."
endif

write ";*********************************************************************"
write "; Step 3.8: Send the request to start a child task & then stop it. "
write ";*********************************************************************"
;ut_setupevents "$SC", "$CPU", "TST_ES", TST_ES_STARTSTOPCHILD_INF_EID, "INFO", 1
cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_STARTNSTOPCHILD
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1314) - Start & Stop Child Task command sent successfully."
  ut_setrequirements ES_1314, "A"
else
  write "<!> Failed (1314) - Start & Stop Child Task command did not increment valid command counter."
  ut_setrequirements ES_1314, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1314) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1314, "A"
else
  write "<!> Failed (1314) - Expected Event Message ",TST_ES_STARTSTOPCHILD_INF_EID, " not received."
  ut_setrequirements ES_1314, "F"
endif

write ";*********************************************************************"
write "; Step 3.9: Send the WRITETASKINFO2FILE command without a path "
write "; 	   specification for the filename."
write ";*********************************************************************"
ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_TASKINFO_OSCREATE_ERR_EID, ERROR, 1

errcnt = $SC_$CPU_ES_CMDEC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_ES_WRITETASKINFO2FILE TASKFILENAME="nopathname"
wait 5

ut_tlmwait $SC_$CPU_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed - WriteTaskInfo command failed as expected."
else
  write "<!> Failed - WriteTaskInfo command did not increment the CMDEC."
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
else
  write "<!> Failed - Expected Event Message ", CFE_ES_TASKINFO_OSCREATE_ERR_EID, " not received."
endif

write ";*********************************************************************"
write "; Step 4.0: Memory Pool Tests"
write ";*********************************************************************"
write "; Step 4.1: Send the request to prepare a memory pool for runtime "
write "; 	   allocation and de-allocation."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_MEMORYPOOL_INF_EID, INFO, 1

cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_GETMEMPOOL PoolSize=1024
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1320) - Get Memory Pool command sent successfully."
  ut_setrequirements ES_1320, "P"
else
  write "<!> Failed (1320) - Get Memory Pool command did not increment valid command counter."
  ut_setrequirements ES_1320, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1320) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1320, "P"
else
  write "<!> Failed (1320) - Expected Event Message ", TST_ES_MEMORYPOOL_INF_EID, " not received."
  ut_setrequirements ES_1320, "F"
endif

write ";*********************************************************************"
write "; Step 4.2: Verify that the above Memory Pool was created."
write ";*********************************************************************"
;$SC_$CPU_TST_ES_MEMPOOL1 contains the handle to pass to CFE_ES_POOLSTATS

; Send the command
page $SC_$CPU_ES_MEMSTATS
wait 5

/$SC_$CPU_ES_POOLSTATS APPLICATION="TST_ES" HANDLE=$SC_$CPU_TST_ES_MEMPOOL1
wait 5

if ($SC_$CPU_ES_POOLHANDLE = $SC_$CPU_TST_ES_MEMPOOL1) AND ;;
   ($SC_$CPU_ES_POOLSIZE = 1024) then
  write "<*> Passed - Memory Pool Handle & Size are correct."
else
  write "<!> Failed - Memory Pool handle and/or size is not correct."
  write "Expected Handle of ", $SC_$CPU_TST_ES_MEMPOOL1, ". Rcv;d ",$SC_$CPU_ES_POOLHANDLE
  write "Expected Size of 1024. Rcv;d ",$SC_$CPU_ES_POOLSIZE
endif

;; Write the other info for the Memory Pool
write "Blocks Requested = ",$SC_$CPU_ES_BLKSREQ
write "Block Error Ctr  = ",$SC_$CPU_ES_BLKERRCTR
write "Free bytes       = ",$SC_$CPU_ES_FREEBYTES

write ";*********************************************************************"
write "; Step 4.3: Send the request to prepare a memory pool with a size that"
write "; 	   is not an integral multiple of 32 bit words. The cFE should"
write "; 	   adjust the size to be 32 bit word aligned."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_MEMORYPOOL_INF_EID, INFO, 1

cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_GETMEMPOOL PoolSize=1023
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1320.1) - Get Memory Pool command sent successfully."
  ut_setrequirements ES_13201, "P"
else
  write "<!> Failed (1320.1) - Get Memory Pool command did not increment valid command counter."
  ut_setrequirements ES_13201, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1320.1) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_13201, "P"
else
  write "<!> Failed (1320.1) - Expected Event Message ", TST_ES_CREATESTARTCHILDTSK_INF_EID, " not received."
  ut_setrequirements ES_13201, "F"
endif

write ";*********************************************************************"
write "; Step 4.4: Verify that the above Memory Pool was created with the "
write ";           correct size."
write ";*********************************************************************"
ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_TLM_POOL_STATS_INFO_EID, DEBUG, 1

;$SC_$CPU_TST_ES_MEMPOOL2 contains the handle to pass to CFE_ES_POOLSTATS
; Send the command
/$SC_$CPU_ES_POOLSTATS APPLICATION="TST_ES" HANDLE=$SC_$CPU_TST_ES_MEMPOOL2
wait 5

if ($SC_$CPU_ES_POOLHANDLE = $SC_$CPU_TST_ES_MEMPOOL2) AND ;;
   ($SC_$CPU_ES_POOLSIZE = 1020) then
  write "<*> Passed (1320.1) - Memory Pool Handle & Size are correct."
  ut_setrequirements ES_13201, "P"
else
  write "<!> Failed (1320.1) - Memory Pool Handle and/or size is not correct."
  write "Expected Handle of ", $SC_$CPU_TST_ES_MEMPOOL2, ". Rcv;d ",$SC_$CPU_ES_POOLHANDLE
  write "Expected Size of 1020. Rcv;d ",$SC_$CPU_ES_POOLSIZE
  ut_setrequirements ES_13201, "F"
endif

;; Look for expected event
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
else
  write "<!> Failed - Expected Event Message ", CFE_ES_TLM_POOL_STATS_INFO_EID, " not received."
endif

;; Write the other info for the Memory Pool
write "Blocks Requested = ",$SC_$CPU_ES_BLKSREQ
write "Block Error Ctr  = ",$SC_$CPU_ES_BLKERRCTR
write "Free bytes       = ",$SC_$CPU_ES_FREEBYTES

write ";*********************************************************************"
write "; Step 4.5: Send the request to prepare a memory pool that is not "
write "; 	   aligned on a 32 bit memory boundary."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_BADADDRMEMORYPOOL_INF_EID, INFO, 1

cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_BADADDRMEMPOOL
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1320.2) - Bad Memory Pool Address command sent successfully."
  ut_setrequirements ES_13202, "P"
else
  write "<!> Failed (1320.2) - Bad Memory Pool Address command did not increment valid command counter."
  ut_setrequirements ES_13202, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1320.2) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_13202, "P"
else
  write "<!> Failed (1320.2) - Expected Event Message ", TST_ES_BADADDRMEMORYPOOL_INF_EID, " not received."
  ut_setrequirements ES_13202, "F"
endif

write ";*********************************************************************"
write "; Step 4.6: Send the request to allocate a memory block from the "
write ";	   memory pool created above."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_ALLOCATEMEMSIZE_INF_EID, INFO, 1

cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_GETMEMBLOCK PoolID=0 BLKSIZE=16
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1321) - Get Memory Block command sent successfully."
  ut_setrequirements ES_1321, "P"
else
  write "<!> Failed (1321) - Get Memory Block command did not increment valid command counter."
  ut_setrequirements ES_1321, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1321) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1321, "P"
else
  write "<!> Failed (1321) - Expected Event Message ", TST_ES_ALLOCATEMEMSIZE_INF_EID, " not received."
  ut_setrequirements ES_1321, "F"
endif
wait 5

; Send the command to refresh the Memory Pool Statistics page
/$SC_$CPU_ES_POOLSTATS APPLICATION="TST_ES" HANDLE=$SC_$CPU_TST_ES_MEMPOOL1
wait 5

;; Write the other info for the Memory Pool
write "Pool Handle      = ",$SC_$CPU_ES_POOLHANDLE
write "Pool Size        = ",$SC_$CPU_ES_POOLSIZE
write "Blocks Requested = ",$SC_$CPU_ES_BLKSREQ
write "Block Error Ctr  = ",$SC_$CPU_ES_BLKERRCTR
write "Free bytes       = ",$SC_$CPU_ES_FREEBYTES

;; Loop for each Block Statistic in the Memory Pool Statistics packet
local blkIndex = 0
for i = 1 to 17 do
  write "  Size  = ",$SC_$CPU_ES_BLKSTATS[i].BLOCKSIZE 
  if ($SC_$CPU_ES_BLKSTATS[i].BLOCKSIZE = 16) then
    blkIndex = i
  endif
  write "Created = ",$SC_$CPU_ES_BLKSTATS[i].BLOCKSCREATED
  write "  Free  = ",$SC_$CPU_ES_BLKSTATS[i].BLOCKSFREE
enddo

if (blkIndex <> 0) then
  if ($SC_$CPU_ES_BLKSTATS[blkIndex].BLOCKSCREATED = 1) then
    write "<*> Passed (1321) - Memory Pool block created successfully"
    ut_setrequirements ES_1321, "P"
  else
    write "<!> Failed (1321) - Memory Pool block count is not correct."
    ut_setrequirements ES_1321, "F"
  endif
endif

write ";*********************************************************************"
write "; Step 4.7: Send the request to allocate a memory block with a size "
write ";	   that is not an integral multiple of 32 bit words."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_ALLOCATEMEMSIZE_INF_EID, INFO, 1

cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_GETMEMBLOCK PoolID=0 BLKSIZE=15
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1321.1) - Get Memory Block command sent successfully."
  ut_setrequirements ES_13211, "P"
else
  write "<!> Failed (1321.1) - Get Memory Block command did not increment valid command counter."
  ut_setrequirements ES_13211, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1321.1) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_13211, "P"
else
  write "<!> Failed (1321.1) - Expected Event Message ", TST_ES_ALLOCATEMEMSIZE_INF_EID, " not received."
  ut_setrequirements ES_13211, "F"
endif
wait 5

; Send the command to refresh the Memory Pool Statistics page
/$SC_$CPU_ES_POOLSTATS APPLICATION="TST_ES" HANDLE=$SC_$CPU_TST_ES_MEMPOOL1
wait 5

;; Write the other info for the Memory Pool
write "Pool Handle      = ",$SC_$CPU_ES_POOLHANDLE
write "Pool Size        = ",$SC_$CPU_ES_POOLSIZE
write "Blocks Requested = ",$SC_$CPU_ES_BLKSREQ
write "Block Error Ctr  = ",$SC_$CPU_ES_BLKERRCTR
write "Free bytes       = ",$SC_$CPU_ES_FREEBYTES

;; Loop for each Block Statistic in the Memory Pool Statistics packet
for i = 1 to 17 do
  write "  Size  = ",$SC_$CPU_ES_BLKSTATS[i].BLOCKSIZE 
  write "Created = ",$SC_$CPU_ES_BLKSTATS[i].BLOCKSCREATED
  write "  Free  = ",$SC_$CPU_ES_BLKSTATS[i].BLOCKSFREE
enddo

;; Check to see if another block of size 16 was created
if ($SC_$CPU_ES_BLKSTATS[blkIndex].BLOCKSCREATED = 2) then
  write "<*> Passed (1321.1) - Memory Pool block created successfully"
  ut_setrequirements ES_13211, "P"
else
  write "<!> Failed (1321.1) - Memory Pool block count is not correct."
  ut_setrequirements ES_13211, "F"
endif

write ";*********************************************************************"
write "; Step 4.8: Send the request to allocate a memory block from a memory"
write ";	    pool that does not exist."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_ALLOCATEMEMSIZE_INF_EID, INFO, 1

errcnt = $SC_$CPU_TST_ES_CMDEC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_GETMEMBLOCK PoolID=75 BLKSIZE=16
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1321.2) - Get Memory Block command sent successfully."
  ut_setrequirements ES_13212, "A"
else
  write "<!> Failed (1321.2) - Get Memory Block command did not increment error command counter."
  ut_setrequirements ES_13212, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1321.2) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_13212, "A"
else
  write "<!> Failed (1321.2) - Expected Event Message ", TST_ES_ALLOCATEMEMSIZE_INF_EID, " not received."
  ut_setrequirements ES_13212, "F"
endif

;; Need to dump the System Log to see if the above error was written to it
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_SYSLOG2_EID, "DEBUG", 1
                                                                                
ut_sendcmd "$SC_$CPU_ES_WRITESYSLOG2FILE SYSLOGFILENAME="""""
wait 5

if (UT_SC_Status = UT_SC_Success) then
  if ($SC_$CPU_find_event[1].num_found_messages = 1) then
    write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  else
    write "<!> Failed - Expected Event Message", CFE_ES_SYSLOG2_EID, " not received."
  endif

  ;; Get the file to the ground whether or not the event msg was rcv'd
  s ftp_file (ramDir,"cfe_es_syslog.log","$sc_$cpu_es_app48syslog.log",hostCPU,"G")
  wait 5

  ;; Check if the file above exists and pass the requirement if it does
  filename = work_dir & "/image/$sc_$cpu_es_app48syslog.log"
  if file_exists(filename) then
    write "<*> Passed - ES System Log file downloaded successfully!"
  else
    write "<!> Failed - Did not download ES system log."
  endif
else
  write "<!> Failed - Did not write system log."
endif

write ";*********************************************************************"
write "; Step 4.9: Send the request to allocate a memory block that is too "
write ";	   large for the memory pool allocated in Step 4.3."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_ALLOCATEMEMSIZE_INF_EID, INFO, 1

errcnt = $SC_$CPU_TST_ES_CMDEC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_GETMEMBLOCK PoolID=0 BLKSIZE=1028
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1321.3) - Get Memory Block command sent successfully."
  ut_setrequirements ES_13213, "P"
else
  write "<!> Failed (1321.3) - Get Memory Block command did not increment error command counter."
  ut_setrequirements ES_13213, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1321.3) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_13213, "P"
else
  write "<!> Failed (1321.3) - Expected Event Message ", TST_ES_ALLOCATEMEMSIZE_INF_EID, " not received."
  ut_setrequirements ES_13213, "F"
endif

write ";*********************************************************************"
write "; Step 4.10: Send the request to de-allocate the memory block allocated"
write ";	    in Step 4.6."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_DEALLOCATEMEMSIZE_INF_EID, INFO, 1

cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_DELETEMEMBLOCK PoolID=0 BLOCKID=0
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1322) - Get Memory Block command sent successfully."
  ut_setrequirements ES_1322, "P"
else
  write "<!> Failed (1322) - Get Memory Block command did not increment valid command counter."
  ut_setrequirements ES_1322, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1322) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1322, "P"
else
  write "<!> Failed (1322) - Expected Event Message ", TST_ES_DEALLOCATEMEMSIZE_INF_EID, " not received."
  ut_setrequirements ES_1322, "F"
endif
wait 5

; Send the command to refresh the Memory Pool Statistics page
/$SC_$CPU_ES_POOLSTATS APPLICATION="TST_ES" HANDLE=$SC_$CPU_TST_ES_MEMPOOL1
wait 5

;; Write the other info for the Memory Pool
write "Pool Handle      = ",$SC_$CPU_ES_POOLHANDLE
write "Pool Size        = ",$SC_$CPU_ES_POOLSIZE
write "Blocks Requested = ",$SC_$CPU_ES_BLKSREQ
write "Block Error Ctr  = ",$SC_$CPU_ES_BLKERRCTR
write "Free bytes       = ",$SC_$CPU_ES_FREEBYTES

;; Loop for each Block Statistic in the Memory Pool Statistics packet
for i = 1 to 17 do
  write "  Size  = ",$SC_$CPU_ES_BLKSTATS[i].BLOCKSIZE 
  write "Created = ",$SC_$CPU_ES_BLKSTATS[i].BLOCKSCREATED
  write "  Free  = ",$SC_$CPU_ES_BLKSTATS[i].BLOCKSFREE
enddo

write ";*********************************************************************"
write "; Step 4.11: Send the request to de-allocate a memory block with an"
write ";	    invalid memory pool identifier."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_DEALLOCATEMEMSIZE_INF_EID, INFO, 1

errcnt = $SC_$CPU_TST_ES_CMDEC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_DELETEMEMBLOCK PoolID=75 BLOCKID=1
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1322.1) - Get Memory Block command sent successfully."
  ut_setrequirements ES_13221, "P"
else
  write "<!> Failed (1322.1) - Get Memory Block command did not increment valid command counter."
  ut_setrequirements ES_13221, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1322.1) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_13221, "P"
else
  write "<!> Failed (1322.1) - Expected Event Message ", TST_ES_DEALLOCATEMEMSIZE_INF_EID, " not received."
  ut_setrequirements ES_13221, "F"
endif

write ";*********************************************************************"
write "; Step 4.12: Send the PoolStats command with an invalid pool handle."
write ";*********************************************************************"
ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_INVALID_POOL_HANDLE_ERR_EID, ERROR, 1

errcnt = $SC_$CPU_ES_CMDEC + 1

/$SC_$CPU_ES_POOLSTATS APPLICATION="TST_ES" HANDLE=0
wait 5

ut_tlmwait $SC_$CPU_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed - Invalid PoolStats command failed as expected."
else
  write "<!> Failed - Invalid PoolStats command did not increment the error command counter."
endif

;; Look for expected event
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
else
  write "<!> Failed - Expected Event Message ", CFE_ES_INVALID_POOL_HANDLE_ERR_EID, " not received."
endif

write ";*********************************************************************"
write "; Step 5.0: Device Driver Tests"
write ";*********************************************************************"
write "; Not Implemented!!!"

write ";*********************************************************************"
write "; Step 6.0: Maximum Applications Test"
write ";*********************************************************************"
write "; Step 6.1: Start the maximum number of cFE Applications. "
write ";*********************************************************************"
write "; Step 6.1.1: Perform a Power-On Reset of $CPU."
write ";*********************************************************************"
/$SC_$CPU_ES_POWERONRESET
wait 10

close_data_center
wait 60

cfe_startup $CPU
wait 5

write ";*********************************************************************"
write "; Enable DEBUG Event Messages "
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", "CFE_EVS", CFE_EVS_ENAEVTTYPE_EID, "DEBUG", 1

ut_sendcmd "$SC_$CPU_EVS_ENAEVENTTYPE DEBUG"
if (UT_SC_Status = UT_SC_Success) then
  write "<*> Passed - Debug events have been enabled."
  if ($SC_$CPU_find_event[1].num_found_messages = 1) then
    Write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  else
    Write "<!> Failed - Event Message not received for ENAEVENTTYPE command."
  endif
else
  write "<!> Failed - Could not enable Debug events."
endif

;  Dump the properties of all running apps
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_ALL_APPS_EID, "DEBUG", 1
s get_file_to_cvt (ramDir,"cfe_es_app_info.log","$sc_$cpu_es_app_info.log",hostCPU)
wait 5

if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1012) - App Info retrieval. Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_1012, "P"
else
  write "<!> Failed (1012) - App Info retrieval. Expected Event message ",CFE_ES_ALL_APPS_EID, " was not received"
  ut_setrequirements ES_1012, "F"
endif

write ";*********************************************************************"
write "; Step 6.1.2: Determine the number of applications that need to be "
write "; 	     started in order to start the maximum and start that "
write ";             many TST_ESx applications. "
write ";*********************************************************************"
;; Determine how many applications need to be started
local currentApps = $SC_$CPU_ES_REGCoreAPPS + $SC_$CPU_ES_REGExtApps
local appsToStart = CFE_ES_MAX_APPLICATIONS - currentApps
write "; current Apps running = ", currentApps
write "; Apps to start = ", appsToStart

;; Upload the TST_ES2 table load data files to /ram
s ftp_file (ramDir,"firsttbldef.dat","FirstTblDef.dat",hostCPU,"P")
wait 5
s ftp_file (ramDir,"secondtbldef.dat","SecondTblDef.dat",hostCPU,"P")
wait 5

local newAppName
;; Now start the TST_ESx apps
for i = 1 to appsToStart do
  ;; Build the Application name
  if (i = 1) then
    newAppName = "TST_ES"
  else
    newAppName = "TST_ES"&i
  endif

  write "; Attempting to start App '", newAppName, "'"
  ;; Setup events to capture for TST_ES start
  ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_START_INF_EID, INFO, 1
  ut_setupevents $SC, $CPU, {newAppName}, TST_ES_INIT_INF_EID, INFO, 2

  s load_start_app (newAppName, hostCPU)
  wait 5

  ;; Look for expected event #1
  if ($SC_$CPU_find_event[1].num_found_messages = 1) then
    write "<*> Passed (1005;1005.1) - ", newAppName, " app started"
    write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
    ut_setrequirements ES_1005, "P"
    ut_setrequirements ES_10051, "P"
  else
    write "<!> Failed (1005;1005.1) - ", newAppName, " app did not start."
    write "<!> Failed - Expected Event Message ", CFE_ES_START_INF_EID, " not received."
    ut_setrequirements ES_1005, "F"
    ut_setrequirements ES_10051, "F"
  endif
                                                                                
  ;; Look for expected event #2
  if ($SC_$CPU_find_event[2].num_found_messages = 1) then
    write "<*> Passed (1005;1005.1) - ", newAppName, " app started"
    write "<*> Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
    ut_setrequirements ES_1005, "P"
    ut_setrequirements ES_10051, "P"

    ;; Check if this is the TST_ES app
    if (newAppName = "TST_ES") then
      ;; Start the TST_ES HK TLM packet
      /$SC_$CPU_TO_ADDPACKET STREAM=stream PKT_SIZE=X'0' PRIORITY=X'0' RELIABILITY=X'0' BUFLIMIT=x'4'

      ;; Add an Event Filter for the TST_ES HK Request Event in order to
      ;; only receive this event 1 time rather than every 4 seconds
      /$SC_$CPU_EVS_ADDEVTFLTR Application="TST_ES" Event_ID=39 Event_Mask=X'ffff'
    endif
  else
    write "<!> Failed (1005;1005.1) - ", newAppName, " app did not start."
    write "<!> Failed - Expected Event Message ", TST_ES_INIT_INF_EID, " not received."
    ut_setrequirements ES_1005, "F"
    ut_setrequirements ES_10051, "F"
  endif
enddo

write ";*********************************************************************"
write "; Step 6.2: Retrieve all Applications properties and verify that the "
write "; 	   maximum number of applications have been started."
write ";*********************************************************************"
;  Dump the properties of all running apps
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_ALL_APPS_EID, "DEBUG", 1
s get_file_to_cvt (ramDir,"cfe_es_app_info.log","$sc_$cpu_es_app_info.log",hostCPU)
wait 5

if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1012) - App Info retrieval. Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_1012, "P"
else
  write "<!> Failed (1012) - App Info retrieval. Expected Event message ",CFE_ES_ALL_APPS_EID, " was not received"
  ut_setrequirements ES_1012, "F"
endif

write ";*********************************************************************"
write "; Step 6.3: Attempt to start another cFE Application. Verify that an "
write "; 	   error is generated and the application did not start."
write ";*********************************************************************"
write "; Attempting to start App 'TST_TBL"
;; Setup error event to capture
ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_START_ERR_EID, ERROR, 1

s load_start_app ("TST_TBL", hostCPU)
wait 5

;; Look for expected error event
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1700) - TST_TBL app did not start because the maximum applications have been started "
  write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1700, "P"
else
  write "<!> Failed (1700) - Expected Event Message ", CFE_ES_START_INF_EID, " not received."
  ut_setrequirements ES_1700, "F"
endif

write ";*********************************************************************"
write "; Step 7.0: Critical Data Store Tests"
write ";*********************************************************************"
write "; Step 7.1: Attempt to allocate a block in the Critical Data Store that"
write "; 	   is larger than the maximum size defined in the cFE. "
write "; 	   Verify that an error is generated. "
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_RESERVECDS_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES, CFE_ES_CDS_REGISTER_ERR_EID, ERROR, 2

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_RESERVECDS CDSNAME="CDSTooBig" CDSSIZE=CFE_ES_CDS_SIZE+10
wait 5

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1315) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1315, "P"
else
  write "<!> Failed (1315) - Expected Event Message ", TST_ES_RESERVECDS_INF_EID, " not received."
  ut_setrequirements ES_1315, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1708) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1708, "P"
else
  write "<!> Failed (1708) - Expected Event Message ", CFE_ES_CDS_REGISTER_ERR_EID, " not received."
  ut_setrequirements ES_1708, "F"
endif

;; Dump the CDS Registry in order to verify that the CDS above was not created
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_CDS_REG_DUMP_INF_EID, "DEBUG", 1
s get_file_to_cvt (ramDir,"cfe_cds_reg.log","$sc_$cpu_cds_reg.log",hostCPU)
wait 5

if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1026) - CDS Registry info written. Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_1026, "P"
else
  write "<!> Failed (1026) - CDS Registry info retrieval. Expected Event message ",CFE_ES_CDS_REG_DUMP_INF_EID, " was not received"
  ut_setrequirements ES_1026, "F"
endif

;; Check if the CDS is in the Registry
local found_CDS = FALSE
local cds_index = 0
for cds_index = 1 to CFE_ES_CDS_MAX_NUM_ENTRIES do
  if ($SC_$CPU_ES_CDSREG[cds_index].CDSName = "TST_ES.CDSTooBig") then
    found_CDS = TRUE
  endif
enddo

if (found_CDS = FALSE) then
  write "<*> Passed (1708) - CDSTooBig was not found in Registry."
  ut_setrequirements ES_1708, "P"
else
  write "<!> Failed (1708) - CDSTooBig was found in Registry."
  ut_setrequirements ES_1708, "F"
endif

write ";*********************************************************************"
write "; Step 7.2: Allocate a block in the Critical Data Store for the TST_ES"
write "; 	   application. Verify that the block is created."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_RESERVECDS_INF_EID, INFO, 1

cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_RESERVECDS CDSNAME="TestCDS2" CDSSIZE=24
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1315) - Reserve CDS command sent successfully."
  ut_setrequirements ES_1315, "P"
else
  write "<!> Failed (1315) - Reserve CDS command did not increment valid command counter."
  ut_setrequirements ES_1315, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1315) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1315, "P"
else
  write "<!> Failed (1315) - Expected Event Message ", TST_ES_RESERVECDS_INF_EID, " not received."
  ut_setrequirements ES_1315, "F"
endif

;; Dump the CDS Registry in order to verify that the CDS above was not created
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_CDS_REG_DUMP_INF_EID, "DEBUG", 1
s get_file_to_cvt (ramDir,"cfe_cds_reg.log","$sc_$cpu_cds_reg.log",hostCPU)
wait 5

if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1026) - CDS Registry Info retrieval. Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_1026, "P"
else
  write "<!> Failed (1026) - CDS Registry Info retrieval. Expected Event message ",CFE_ES_ALL_APPS_EID, " was not received"
  ut_setrequirements ES_1026, "F"
endif

;; Check if the CDS is in the Registry
found_CDS = FALSE
for cds_index = 1 to CFE_ES_CDS_MAX_NUM_ENTRIES do
  if ($SC_$CPU_ES_CDSREG[cds_index].CDSName = "TST_ES.TestCDS2") then
    found_CDS = TRUE
  endif
enddo

if (found_CDS = TRUE) then
  write "<*> Passed (1315) - TestCDS2 was found in Registry."
  ut_setrequirements ES_1315, "P"
else
  write "<!> Failed (1315) - TestCDS2 was not found in Registry."
  ut_setrequirements ES_1315, "F"
endif

write ";*********************************************************************"
write "; Step 7.3: Send the command to allocate the same block in the Critical"
write ";	   Data Store as in the step above but with a different size."
write ";	   The block should be created and an event msg generated."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_RESERVECDS_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES, TST_ES_CDSRESIZED_ERR_EID, INFO, 2

cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_RESERVECDS CDSNAME="TestCDS2" CDSSIZE=28
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1315) - Reserve CDS command sent successfully."
  ut_setrequirements ES_1315, "P"
else
  write "<!> Failed (1315) - Reserve CDS command did not increment valid command counter."
  ut_setrequirements ES_1315, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1315) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1315, "P"
else
  write "<!> Failed (1315) - Expected Event Message ", TST_ES_RESERVECDS_INF_EID, " not received."
  ut_setrequirements ES_1315, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1315.1) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_13151, "P"
else
  write "<!> Failed (1315.1) - Expected Event Message ", TST_ES_CDSRESIZED_ERR_EID, " not received."
  ut_setrequirements ES_13151, "F"
endif

;; Dump the CDS Registry in order to verify that the CDS above was not created
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_CDS_REG_DUMP_INF_EID, "DEBUG", 1
s get_file_to_cvt (ramDir,"cfe_cds_reg.log","$sc_$cpu_cds_reg.log",hostCPU)
wait 5

if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1026) - CDS Registry Info retrieval. Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_1026, "P"
else
  write "<!> Failed (1026) - CDS Registry Info retrieval. Expected Event message ",CFE_ES_ALL_APPS_EID, " was not received"
  ut_setrequirements ES_1026, "F"
endif

;; Check if the CDS is in the Registry
found_CDS = FALSE
local cdsSize = 0
for cds_index = 1 to CFE_ES_CDS_MAX_NUM_ENTRIES do
  if ($SC_$CPU_ES_CDSREG[cds_index].CDSName = "TST_ES.TestCDS2") then
    found_CDS = TRUE
    cdsSize = $SC_$CPU_ES_CDSREG[cds_index].CDSSIZE
  endif
enddo

if (found_CDS = TRUE AND cdsSize = 28) then
  write "<*> Passed (1315.1) - TestCDS2 was found in Registry with the correct size."
  ut_setrequirements ES_13151, "P"
elseif (found_CDS = TRUE) then
  write "<!> Failed (1315.1) - TestCDS2 was found in Registry but did not resize."
  ut_setrequirements ES_13151, "F"
else
  write "<!> Failed (1315.1) - TestCDS2 was not found in Registry."
  ut_setrequirements ES_13151, "F"
endif

write ";*********************************************************************"
write "; Step 7.4: Send the request to retrieve data for a CDS that "
write ";           does not exist. Verify that an error msg is generated. "
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_GETCDSDATA_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES, TST_ES_CDSNAMENOTFOUND_ERR_EID, ERROR, 2

errcnt = $SC_$CPU_TST_ES_CMDEC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_GETCDSDATA CDSNAME="invalidCDSName"
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1316) - Get CDS Data command sent successfully."
  ut_setrequirements ES_1316, "P"
else
  write "<!> Failed (1316) - Get CDS Data command did not increment valid command counter."
  ut_setrequirements ES_1316, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1316) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1316, "P"
else
  write "<!> Failed (1316) - Expected Event Message ", TST_ES_GETCDSDATA_INF_EID, " not received."
  ut_setrequirements ES_1316, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1316.2) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_13162, "P"
else
  write "<!> Failed (1316.2) - Expected Event Message ", TST_ES_CDSNAMENOTFOUND_ERR_EID, " not received."
  ut_setrequirements ES_13162, "F"
endif

write ";*********************************************************************"
write "; Step 7.5: Send the request to update the CDS variables."
write ";*********************************************************************"
;;;; Save the current values of the CDS Variables
local cdsVar1, cdsVar2, cdsVar3, cdsVar4, cdsVar5

cdsVar1 = $SC_$CPU_TST_ES_CDSVAR1
cdsVar2 = $SC_$CPU_TST_ES_CDSVAR2
cdsVar3 = $SC_$CPU_TST_ES_CDSVAR3
cdsVar4 = $SC_$CPU_TST_ES_CDSVAR4
cdsVar5 = $SC_$CPU_TST_ES_CDSVAR5
                                                                                
write "CDS Variable #1 = ", cdsVar1
write "CDS Variable #2 = ", cdsVar2
write "CDS Variable #3 = ", cdsVar3
write "CDS Variable #4 = ", cdsVar4
write "CDS Variable #5 = ", cdsVar5
                                                                                
;; Set the variables to the expected values
cdsVar1 = $SC_$CPU_TST_ES_CDSVAR1 + 1
cdsVar2 = $SC_$CPU_TST_ES_CDSVAR2 + 1
cdsVar3 = $SC_$CPU_TST_ES_CDSVAR3 + 1
cdsVar4 = $SC_$CPU_TST_ES_CDSVAR4 + 1
cdsVar5 = $SC_$CPU_TST_ES_CDSVAR5 + 1
                                                                                
cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1
                                                                                
/$SC_$CPU_TST_ES_MODIFYCDSVARS
ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}

if (UT_TW_Status = UT_Success) then
  write "<*> Passed - Modify CDS Variables command sent successfully."
else
  write "<!> Failed - Modify CDS Variables command."
endif
wait 5
                                                                                
local newCDSVar1, newCDSVar2, newCDSVar3, newCDSVar4, newCDSVar5
newCDSVar1 = $SC_$CPU_TST_ES_CDSVAR1
newCDSVar2 = $SC_$CPU_TST_ES_CDSVAR2
newCDSVar3 = $SC_$CPU_TST_ES_CDSVAR3
newCDSVar4 = $SC_$CPU_TST_ES_CDSVAR4
newCDSVar5 = $SC_$CPU_TST_ES_CDSVAR5

write "updated CDS Variable #1 = ", newCDSVar1
write "updated CDS Variable #2 = ", newCDSVar2
write "updated CDS Variable #3 = ", newCDSVar3
write "updated CDS Variable #4 = ", newCDSVar4
write "updated CDS Variable #5 = ", newCDSVar5
wait 5

;; Check if the values were incremented as expected
if ((newCDSVar1 = cdsVar1) AND (newCDSVar2 = cdsVar2) AND ;;
    (newCDSVar3 = cdsVar3) AND (newCDSVar4 = cdsVar4) AND ;;
    (newCDSVar5 = cdsVar5)) then
  write "<*> Passed (1328) - CDS Updated successfully."
  ut_setrequirements ES_1328, "P"
else
  write "<!> Failed (1328) - CDS did not update properly."
  ut_setrequirements ES_1328, "F"
endif

write ";*********************************************************************"
write "; Step 7.6: Send the request to write data to a CDS that does not "
write ";           exist. Verify that an error msg is generated. "
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_WRITECDSDATA_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES, TST_ES_CDSNAMENOTFOUND_ERR_EID, ERROR, 2

errcnt = $SC_$CPU_TST_ES_CMDEC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_WRITECDSDATA CDSNAME="invalidCDSName"
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1328) - Get CDS Data command sent successfully."
  ut_setrequirements ES_1328, "P"
else
  write "<!> Failed (1328) - Get CDS Data command did not increment valid command counter."
  ut_setrequirements ES_1328, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1328) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1328, "P"
else
  write "<!> Failed (1328) - Expected Event Message ", TST_ES_GETCDSDATA_INF_EID, " not received."
  ut_setrequirements ES_1328, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1328.2) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_13282, "P"
else
  write "<!> Failed (1328.2) - Expected Event Message ", TST_ES_CDSNAMENOTFOUND_ERR_EID, " not received."
  ut_setrequirements ES_13282, "F"
endif

write ";*********************************************************************"
write "; Step 7.7: Corrupt the TestCDS2 Critical Data Store. "
write ";*********************************************************************"
local addval = 16 + CFE_ES_RESET_AREA_SIZE + (CFE_ES_RAM_DISK_SECTOR_SIZE * CFE_ES_RAM_DISK_NUM_SECTORS) + 20 + 4

write " Corrupt the TestCDS2 Critical Data Store by entering the following"
write " commands in the UART window:"
write "     1. sysMemTop ""OS_BSPReservedMemoryPtr"""
write "     2. Add ", addval, " to the displayed value"
write "     3. Add the CDS Handle of TestCDS2 to the sum calculated in Step 2."
write "     4. m <value calculated in 3>,2"
write "     5. Enter a value and hit the enter or return key"
write "     6. Type <CTRL-C> to end the modification command."
write " Type 'g' or 'go' in the ASIST command input field to continue."
wait

write ";*********************************************************************"
write "; Step 7.8: Send the request to retrieve data from TestCDS2. An error "
write "; 	   message should be generated indicating the CDS data is bad."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_GETCDSDATA_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES, TST_ES_GETCDSDATAFAIL_ERR_EID, ERROR, 2

errcnt = $SC_$CPU_TST_ES_CMDEC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_GETCDSDATA CDSNAME="TestCDS2"
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1316) - Get CDS Data command sent successfully."
  ut_setrequirements ES_1316, "P"
else
  write "<!> Failed (1316) - Get CDS Data command did not increment valid command counter."
  ut_setrequirements ES_1316, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1316) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1316, "P"
else
  write "<!> Failed (1316) - Expected Event Message ", TST_ES_GETCDSDATA_INF_EID, " not received."
  ut_setrequirements ES_1316, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1316.1) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_13161, "P"
else
  write "<!> Failed (1316.1) - Expected Event Message ", TST_ES_GETCDSDATAFAIL_ERR_EID, " not received."
  ut_setrequirements ES_13161, "F"
endif

write ";*********************************************************************"
write "; Step 7.9: Send the request to write data to TestCDS2. This should "
write ";           calculate a new Data Integrity Value."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_WRITECDSDATA_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES, TST_ES_WRITECDSDATAPASS_INF_EID, INFO, 2

cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_WRITECDSDATA CDSNAME="TestCDS2"
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1328) - Write CDS Data command sent successfully."
  ut_setrequirements ES_1328, "P"
else
  write "<!> Failed (1328) - Write CDS Data command did not increment valid command counter."
  ut_setrequirements ES_1328, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1328) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1328, "P"
else
  write "<!> Failed (1328) - Expected Event Message ", TST_ES_WRITECDSDATA_INF_EID, " not received."
  ut_setrequirements ES_1328, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1323;1328.1) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1323, "P"
  ut_setrequirements ES_13281, "P"
else
  write "<!> Failed (1323;1328.1) - Expected Event Message ", TST_ES_CDSNAMENOTFOUND_ERR_EID, " not received."
  ut_setrequirements ES_1323, "F"
  ut_setrequirements ES_13281, "F"
endif

write ";***********************************************************************"
write "; Step 7.10: Corrupt the TestCDS2 Critical Data Store again. "
write ";***********************************************************************"
write " Corrupt the TestCDS2 Critical Data Store by entering the following"
write " commands in the UART window:"
write "     1. sysMemTop ""OS_BSPReservedMemoryPtr"""
write "     2. Add ", addval, " to the displayed value"
write "     3. Add the CDS Handle of TestCDS2 to the sum calculated in Step 2."
write "     4. m <value calculated in 3>,2"
write "     5. Enter a value and hit the enter or return key"
write "     6. Type <CTRL-C> to end the modification command."
write " Type 'g' or 'go' in the ASIST command input field to continue."
wait

write ";***********************************************************************"
write "; Step 7.11: Send the command to allocate the same block in the Critical"
write ";	   Data Store that was corrupted above."
write ";	   The block should be created and an event msg generated."
write ";***********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_RESERVECDS_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES, TST_ES_CDSRESIZED_ERR_EID, INFO, 2

cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_RESERVECDS CDSNAME="TestCDS2" CDSSIZE=24
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1315) - Reserve CDS command sent successfully."
  ut_setrequirements ES_1315, "P"
else
  write "<!> Failed (1315) - Reserve CDS command did not increment valid command counter."
  ut_setrequirements ES_1315, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1315) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1315, "P"
else
  write "<!> Failed (1315) - Expected Event Message ", TST_ES_RESERVECDS_INF_EID, " not received."
  ut_setrequirements ES_1315, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1315.1) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_13151, "P"
else
  write "<!> Failed (1315.1) - Expected Event Message ", TST_ES_CDSRESIZED_ERR_EID, " not received."
  ut_setrequirements ES_13151, "F"
endif

;; Dump the CDS Registry in order to verify that the CDS above exists
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_CDS_REG_DUMP_INF_EID, "DEBUG", 1
s get_file_to_cvt (ramDir,"cfe_cds_reg.log","$sc_$cpu_cds_reg.log",hostCPU)
wait 5

if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1026) - CDS Registry Info retrieval. Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_1026, "P"
else
  write "<!> Failed (1026) - CDS Registry Info retrieval. Expected Event message ",CFE_ES_ALL_APPS_EID, " was not received"
  ut_setrequirements ES_1026, "F"
endif

;; Check if the CDS is in the Registry
found_CDS = FALSE
local cdsSize = 0
for cds_index = 1 to CFE_ES_CDS_MAX_NUM_ENTRIES do
  if ($SC_$CPU_ES_CDSREG[cds_index].CDSName = "TST_ES.TestCDS2") then
    found_CDS = TRUE
    cdsSize = $SC_$CPU_ES_CDSREG[cds_index].CDSSIZE
  endif
enddo

if (found_CDS = TRUE AND cdsSize = 24) then
  write "<*> Passed (1315.1) - TestCDS2 was found in Registry with the correct size."
  ut_setrequirements ES_13151, "P"
else
  write "<!> Failed (1315.1) - TestCDS2 was not found in Registry."
  ut_setrequirements ES_13151, "F"
endif

write ";*********************************************************************"
write "; Step 7.12: Send the command to write to the TestCDS2 in order to "
write ";            recalculate the Data Integrity Value."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_WRITECDSDATA_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES, TST_ES_WRITECDSDATAPASS_INF_EID, INFO, 2

cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_WRITECDSDATA CDSNAME="TestCDS2"
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1328) - Write CDS Data command sent successfully."
  ut_setrequirements ES_1328, "P"
else
  write "<!> Failed (1328) - Write CDS Data command did not increment valid command counter."
  ut_setrequirements ES_1328, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1328) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1328, "P"
else
  write "<!> Failed (1328) - Expected Event Message ", TST_ES_WRITECDSDATA_INF_EID, " not received."
  ut_setrequirements ES_1328, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1323;1328.1) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1323, "P"
  ut_setrequirements ES_13281, "P"
else
  write "<!> Failed (1323;1328.1) - Expected Event Message ", TST_ES_CDSNAMENOTFOUND_ERR_EID, " not received."
  ut_setrequirements ES_1323, "F"
  ut_setrequirements ES_13281, "F"
endif

;; Now perform a Read from TestCDS2 
;; Setup events to capture
ut_setupevents $SC, $CPU, TST_ES, TST_ES_GETCDSDATA_INF_EID, INFO, 1
ut_setupevents $SC, $CPU, TST_ES, TST_ES_GETCDSDATAPASS_INF_EID, INFO, 2

cmdcnt = $SC_$CPU_TST_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_TST_ES_GETCDSDATA CDSNAME="TestCDS2"
wait 5

ut_tlmwait $SC_$CPU_TST_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1315.2) - Read CDS Data command sent successfully."
  ut_setrequirements ES_13152, "P"
else
  write "<!> Failed (1315.2) - Get CDS Data command did not increment valid command counter."
  ut_setrequirements ES_13152, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1316) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1316, "P"
else
  write "<!> Failed (1316) - Expected Event Message ", TST_ES_GETCDSDATA_INF_EID, " not received."
  ut_setrequirements ES_1316, "F"
endif

;; Look for expected event #2
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1315.2) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_13152, "P"
else
  write "<!> Failed (1315.2) - Expected Event Message ", TST_ES_GETCDSDATAPASS_INF_EID, " not received."
  ut_setrequirements ES_13152, "F"
endif

write ";*********************************************************************"
write "; Step 7.13: Attempt to delete a CDS that does not exist. "
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_CDS_NAME_ERR_EID, ERROR, 1

errcnt = $SC_$CPU_ES_CMDEC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_ES_DELETECDS CDSNAME="invalidCDSName"
wait 5

ut_tlmwait $SC_$CPU_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed - Delete CDS command sent for an invalid CDS failed as expected."
else
  write "<!> Failed - Delete CDS command sent for an invalid CDS did not increment the error counter."
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
else
  write "<!> Failed - Expected Event Message ", CFE_ES_CDS_NAME_ERR_EID, " not received."
endif

write ";*********************************************************************"
write "; Step 7.14: Attempt to delete a valid CDS while the application that "
write "; 	    created it is still executing."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_CDS_OWNER_ACTIVE_EID, ERROR, 1

errcnt = $SC_$CPU_ES_CMDEC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_ES_DELETECDS CDSNAME="TST_ES.TestCDS2"
wait 5

ut_tlmwait $SC_$CPU_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed - Delete CDS command sent for an invalid CDS failed as expected."
else
  write "<!> Failed - Delete CDS command sent for an invalid CDS did not increment the error counter."
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
else
  write "<!> Failed - Expected Event Message ", CFE_ES_CDS_NAME_ERR_EID, " not received."
endif

write ";*********************************************************************"
write "; Step 7.15: Send the command to delete the TST_ES application. "
write ";*********************************************************************"
;; Send the ES_DeleteApp command for TST_ES
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_STOP_DBG_EID, "DEBUG", 1
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_STOP_INF_EID, "INFO", 2

cmdcnt = $SC_$CPU_ES_CMDPC + 1

; Delete the TST_ES application
/$SC_$CPU_ES_DELETEAPP APPLICATION="TST_ES"
wait 5

ut_tlmwait $SC_$CPU_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1006) - DeleteApp command executed properly."
  ut_setrequirements ES_1006, "P"
else
  write "<!> Failed (1006) - DeleteApp command failed."
  ut_setrequirements ES_1006, "F"
endif

;; Check if the event was rcv'd
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1006) - Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_1006, "P"
else
  write "<!> Failed (1006) - Expected Event message ",CFE_ES_STOP_DBG_EID, " was not received"
  ut_setrequirements ES_1006, "F"
endif

;; Check if the second event was rcv'd (may need to wait for this one)
if ($SC_$CPU_find_event[2].num_found_messages = 1) then
  write "<*> Passed (1006) - Event Msg ",$SC_$CPU_find_event[2].eventid," Found!"
  ut_setrequirements ES_1006, "P"
else
  write "<!> Failed - Expected Event Message ",CFE_ES_STOP_INF_EID," not received."
  ut_setrequirements ES_1006, "F"
endif

;; Dump all running apps again to verify that the TST_ES app is running
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_ALL_APPS_EID, "DEBUG", 1
s get_file_to_cvt (ramDir,"cfe_es_app_info.log","$sc_$cpu_es_app_info.log",hostCPU)
wait 5

if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1012) - App Info retrieval. Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_1012, "P"
else
  write "<!> Failed (1012) - App Info retrieval. Expected Event message ",CFE_ES_ALL_APPS_EID, " was not received"
  ut_setrequirements ES_1012, "F"
endif

;; Verify that TST_ES is no longer listed
found_app1 = FALSE
for app_index = 1 to CFE_ES_MAX_APPLICATIONS do
  if ($SC_$CPU_ES_ALE[app_index].ES_AL_AppName = "TST_ES") then
    found_app1 = TRUE
  endif
enddo

if (found_app1 = FALSE) then
  ut_setrequirements ES_1006, "P"
else
  ut_setrequirements ES_1006, "F"
endif

write ";*********************************************************************"
write "; Step 7.16: Send the command to delete a CDS. "
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_CDS_DELETED_INFO_EID, INFO, 1

cmdcnt = $SC_$CPU_ES_CMDPC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_ES_DELETECDS CDSNAME="TST_ES.TestCDS2"
wait 5

ut_tlmwait $SC_$CPU_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1027) - Delete CDS command sent successfully."
  ut_setrequirements ES_1027, "P"
else
  write "<!> Failed (1027) - Delete CDS command did not increment valid command counter."
  ut_setrequirements ES_1027, "F"
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1027) - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
  ut_setrequirements ES_1027, "P"
else
  write "<!> Failed (1027) - Expected Event Message ", CFE_ES_CDS_DELETED_INFO_EID, " not received."
  ut_setrequirements ES_1027, "F"
endif

;; Dump the CDS Registry in order to verify that the CDS above was deleted
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_CDS_REG_DUMP_INF_EID, "DEBUG", 1
s get_file_to_cvt (ramDir,"cfe_cds_reg.log","$sc_$cpu_cds_reg.log",hostCPU)
wait 5

if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1026) - CDS Registry Info retrieval. Event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_1026, "P"
else
  write "<!> Failed (1026) - CDS Registry Info retrieval. Expected Event message ",CFE_ES_CDS_REG_DUMP_INF_EID, " was not received"
  ut_setrequirements ES_1026, "F"
endif

;; Check if the CDS is in the Registry
found_CDS = FALSE
for cds_index = 1 to CFE_ES_CDS_MAX_NUM_ENTRIES do
  if ($SC_$CPU_ES_CDSREG[cds_index].CDSName = "TST_ES.TestCDS2") then
    found_CDS = TRUE
  endif
enddo

if (found_CDS = FALSE) then
  write "<*> Passed (1027) - TestCDS2 was not found in Registry."
  ut_setrequirements ES_1027, "P"
else
  write "<!> Failed (1027) - TestCDS2 was not deleted from Registry."
  ut_setrequirements ES_1027, "F"
endif

write ";*********************************************************************"
write "; Step 7.17: Start the TST_TBL Application in order to test some CDS "
write "; 	   error conditions using a Critical Table."
write ";*********************************************************************"
;; Setup error event to capture
ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_START_INF_EID, INFO, 1

s load_start_app ("TST_TBL", hostCPU)
wait 5

;; Look for expected event
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed - TST_TBL app started "
  write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
else
  write "<!> Failed - Expected Event Message ", CFE_ES_START_INF_EID, " not received."
endif

write ";*********************************************************************"
write "; Step 7.18: Try to delete the Critial Table using the ES_DELETECDS "
write ";	    command. This should generate an error event message."
write ";*********************************************************************"
;; Setup events to capture
ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_CDS_DELETE_TBL_ERR_EID, ERROR, 1

errcnt = $SC_$CPU_ES_CMDEC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_ES_DELETECDS CDSNAME="TST_TBL.CriticalTbl_04"
wait 5

ut_tlmwait $SC_$CPU_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed - Delete CDS command sent for a Critical Table failed as expected."
else
  write "<!> Failed - Delete CDS command sent for a Critical Table did not increment the error counter."
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
else
  write "<!> Failed - Expected Event Message ", CFE_ES_CDS_DELETE_TBL_ERR_EID, " not received."
endif

write ";*********************************************************************"
write "; Step 7.19: Send the WRITECDS2FILE command without a path "
write "; 	    specification for the filename."
write ";*********************************************************************"
ut_setupevents $SC, $CPU, CFE_ES, CFE_ES_CREATING_CDS_DUMP_ERR_EID, ERROR, 1

errcnt = $SC_$CPU_ES_CMDEC + 1

;; Send the command to the TST_ES application
/$SC_$CPU_ES_WRITECDS2FILE CDSREGFILENAME="nopathname"
wait 5

ut_tlmwait $SC_$CPU_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed - WriteCDSRegistry command failed as expected."
else
  write "<!> Failed - WriteCDSRegistry command did not increment the CMDEC."
endif

;; Look for expected event #1
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed - Event Msg ",$SC_$CPU_find_event[1].eventid," Found!"
else
  write "<!> Failed - Expected Event Message ", CFE_ES_CREATING_CDS_DUMP_ERR_EID, " not received."
endif

write ";*********************************************************************"
write "; Step 8.0: Shell Test "
write ";*********************************************************************"
write "; Step 8.1: Invoke the cfe_shell procedure. Invoke some shell commands."
write ";*********************************************************************"
;;s cfe_shell(hostCPU)
;; Setup the ES_Shell Event capture
;;ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_SHELL_INF_EID, "INFO", 1
;;write " Invoke several shell commands in the window that displays."
;;write " Verify that the results display in the window."
;;write " Type 'g' or 'go' in the ASIST command input field to continue."
;;wait

;; Set the Shell Command Requirement to 'A'
;;ut_setrequirements ES_1013, "A"
;;ut_setrequirements ES_10131, "A"

ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_SHELL_INF_EID, "INFO", 1

cmdcnt = $SC_$CPU_ES_CMDPC + 1

/$SC_$CPU_ES_SHELL CMDSTRING="i" OUTPUTFILENAME=""
wait 5

ut_tlmwait $SC_$CPU_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  ut_setrequirements ES_1013, "P"
else
  ut_setrequirements ES_1013, "F"
endif

write ";*********************************************************************"
write "; Step 8.2: Check for the ES_Shell event message."
write ";*********************************************************************"
if ($SC_$CPU_find_event[1].num_found_messages > 0) then
  write "<*> Passed (1013.1) - ES_Shell event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_10131, "P"
else
  write "<!> Failed (1013.1) - Expected ES_Shell event message ",CFE_ES_SHELL_INF_EID, " was not received"
  ut_setrequirements ES_10131, "F"
endif

write ";*********************************************************************"
write "; Step 8.3: Send the ES_Shell command specifying a file."
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_SHELL_INF_EID, "INFO", 1

cmdcnt = $SC_$CPU_ES_CMDPC + 1

/$SC_$CPU_ES_SHELL CMDSTRING="i" OUTPUTFILENAME="/ram/waltsShell.out"
wait 5

ut_tlmwait $SC_$CPU_ES_CMDPC, {cmdcnt}
if (UT_TW_Status = UT_Success) then
  ut_setrequirements ES_1013, "P"
else
  ut_setrequirements ES_1013, "F"
endif

;; Check for the event message
if ($SC_$CPU_find_event[1].num_found_messages > 0) then
  write "<*> Passed (1013.1) - ES_Shell event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_10131, "P"
else
  write "<!> Failed (1013.1) - Expected ES_Shell event message ",CFE_ES_SHELL_INF_EID, " was not received"
  ut_setrequirements ES_10131, "F"
endif

write ";*********************************************************************"
write "; Step 8.4: Send the ES_Shell command specifying an invalid file."
write ";*********************************************************************"
ut_setupevents "$SC", "$CPU", "CFE_ES", CFE_ES_SHELL_ERR_EID, "ERROR", 1

errcnt = $SC_$CPU_ES_CMDEC + 1

/$SC_$CPU_ES_SHELL CMDSTRING="i" OUTPUTFILENAME="waltsShell.out"
wait 5

ut_tlmwait $SC_$CPU_ES_CMDEC, {errcnt}
if (UT_TW_Status = UT_Success) then
  write "<*> Passed (1013) - ES_Shell command failed as expected."
  ut_setrequirements ES_1013, "P"
else
  write "<!> Failed (1013) - ES_Shell command passed when failure was expected."
  ut_setrequirements ES_1013, "F"
endif

;; Check for the event message
if ($SC_$CPU_find_event[1].num_found_messages = 1) then
  write "<*> Passed (1013.1) - ES_Shell event message ",$SC_$CPU_find_event[1].eventid, " received"
  ut_setrequirements ES_10131, "P"
else
  write "<!> Failed (1013.1) - Expected ES_Shell event message ",CFE_ES_SHELL_INF_EID, " was not received"
  ut_setrequirements ES_10131, "F"
endif

write ";*********************************************************************"
write "; Step 9.0: Test Clean-up "
write ";*********************************************************************"
write "; Step 9.1: Save the UART log "
write ";*********************************************************************"
write "; Step 9.1: Command a POWER-ON Reset to reset everything."
write ";*********************************************************************"
/$SC_$CPU_ES_POWERONRESET
wait 10

close_data_center
wait 60

cfe_startup $CPU
wait 5

write "**** Requirements Status Reporting"

write "--------------------------"
write "   Requirement(s) Report"
write "--------------------------"

end_it:
FOR i = 0 to ut_req_array_size DO
  ut_pfindicate {cfe_requirements[i]} {ut_requirement[i]}
ENDDO

drop ut_requirement ; needed to clear global variables
drop ut_req_array_size ; needed to clear global variables

;**********************************************************************
;  End procedure 
;**********************************************************************
ENDPROC 
